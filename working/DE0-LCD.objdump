
DE0-LCD.elf:     file format elf32-littlenios2
DE0-LCD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0401022c

Program Header:
    LOAD off    0x00001000 vaddr 0x04010000 paddr 0x04010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04010020 paddr 0x04010020 align 2**12
         filesz 0x0000842c memsz 0x0000842c flags r-x
    LOAD off    0x0000944c vaddr 0x0401844c paddr 0x04018770 align 2**12
         filesz 0x00000324 memsz 0x00000324 flags rw-
    LOAD off    0x00009a94 vaddr 0x04018a94 paddr 0x04018a94 align 2**12
         filesz 0x00000000 memsz 0x00000874 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04010000  04010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  04010020  04010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008068  0401022c  0401022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001b8  04018294  04018294  00009294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000324  0401844c  04018770  0000944c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000874  04018a94  04018a94  00009a94  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000740  00000000  00000000  00009798  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ed8  00000000  00000000  00009ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000f122  00000000  00000000  0000adb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000341d  00000000  00000000  00019ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a581  00000000  00000000  0001d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001314  00000000  00000000  00027870  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001007  00000000  00000000  00028b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000026d4  00000000  00000000  00029b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0002c260  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002eea6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002eea9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002eeac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002eead  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002eeae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002eeb2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002eeb6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002eeba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002eec3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002eecc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0002eed5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  0002eee1  2**0
                  CONTENTS, READONLY
 29 .jdi          000048ae  00000000  00000000  0002eefe  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007315a  00000000  00000000  000337ac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04010000 l    d  .entry	00000000 .entry
04010020 l    d  .exceptions	00000000 .exceptions
0401022c l    d  .text	00000000 .text
04018294 l    d  .rodata	00000000 .rodata
0401844c l    d  .rwdata	00000000 .rwdata
04018a94 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
04010264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 drawing_routines.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 ff.c
04010884 l     F .text	0000007c mem_cpy
04010900 l     F .text	00000068 mem_set
04010968 l     F .text	000000a8 mem_cmp
04010a10 l     F .text	00000080 chk_chr
04010a90 l     F .text	00000098 move_window
04010e5c l     F .text	000001fc dir_sdi
04011058 l     F .text	000001b0 dir_next
04011208 l     F .text	00000104 dir_find
0401130c l     F .text	00000100 dir_read
04018294 l     O .rodata	00000080 excvt.1901
0401140c l     F .text	00000318 create_name
04011724 l     F .text	00000240 get_fileinfo
04011964 l     F .text	000001d4 follow_path
04011b38 l     F .text	000001d0 check_fs
04011d08 l     F .text	00000824 chk_mounted
04018a98 l     O .bss	00000004 FatFs
04018a9c l     O .bss	00000002 Fsid
0401252c l     F .text	000000a4 validate
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
04018738 l     O .rwdata	00000001 Stat
04018aa0 l     O .bss	00000001 CardType
04018aa2 l     O .bss	00000002 Timer1
04018aa4 l     O .bss	00000002 Timer2
04018aa6 l     O .bss	00000001 XMITDummy
04018aa8 l     O .bss	00000002 Control1
0401339c l     F .text	0000004c SetLowSpeed
040133e8 l     F .text	0000006c SetHighSpeed
04013454 l     F .text	00000044 InitDiskIOHardware
04013498 l     F .text	0000003c Set8BitTransfer
040134d4 l     F .text	00000038 Set16BitTransfer
0401350c l     F .text	00000058 ReceiveU8
04013564 l     F .text	000001c8 ReceiveDatablock
0401372c l     F .text	00000154 TransmitDatablock
040138a4 l     F .text	00000058 WaitReady
04013880 l     F .text	00000024 GetCDWP
040138fc l     F .text	00000044 ReleaseBus
04013940 l     F .text	00000280 SendCMD
04018aac l     O .bss	00000004 pvm.1863
00000000 l    df *ABS*	00000000 main.c
04018ab0 l     O .bss	00000004 Systick
04018ab4 l     O .bss	00000002 wTimer10ms.2821
040147b8 l     F .text	00000068 TimerFunction
04018ab6 l     O .bss	00000002 Timer
04014820 l     F .text	00000044 IoInit
04018ad8 l     O .bss	00000018 alarm
00000000 l    df *ABS*	00000000 lib2-divmod.c
04014ba8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04014ea8 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0401844c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
040158f0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
04015c90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401852c l     O .rwdata	0000002c jtag_uart
04018558 l     O .rwdata	00000030 sgdma
04015d80 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
040166e0 l     F .text	00000060 alt_get_errno
04016c88 l     F .text	000000c0 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04016df4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
04016ff4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04017070 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04017150 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04017608 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04017758 l     F .text	000000f8 alt_file_locked
040179dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04018070 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04018230 l     F .text	00000040 alt_sim_halt
04018ad4 g     O .bss	00000004 alt_instruction_exception_handler
040132a8 g     F .text	000000d0 f_gets
0401595c g     F .text	0000006c alt_main
04014de4 g     F .text	00000090 _puts_r
04018d30 g     O .bss	00000224 Fatfs
0401917c g     O .bss	00000100 alt_irq
04010ba8 g     F .text	000002b4 get_fat
04018770 g       *ABS*	00000000 __flash_rwdata_start
04014d4c g     F .text	00000054 printf
0401614c g     F .text	00000124 alt_avalon_sgdma_do_sync_transfer
040168a0 g     F .text	000003e8 alt_avalon_sgdma_construct_descriptor_burst
04010268 g     F .text	00000068 setPix
00000000  w      *UND*	00000000 __errno
04010000 g     F .entry	0000001c __reset
0401053c g     F .text	00000120 my_dma_callback
040163b4 g     F .text	00000070 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
04010020 g       *ABS*	00000000 __flash_exceptions_start
04018ab8 g     O .bss	00000004 errno
0401410c g     F .text	0000019c ffs_DiskIOWrite
04018ac0 g     O .bss	00000004 alt_argv
04020730 g       *ABS*	00000000 _gp
04018a94 g     O .bss	00000004 active_buffer
040185b0 g     O .rwdata	00000180 alt_fd_list
040142a8 g     F .text	000004e4 ffs_DiskIOIoctl
04017278 g     F .text	00000094 alt_find_dev
04010480 g     F .text	000000bc nonburst_memset
040176e0 g     F .text	00000078 alt_io_redirect
04018294 g       *ABS*	00000000 __DTOR_END__
04014e74 g     F .text	00000014 puts
04017db8 g     F .text	000000dc alt_exception_cause_generated_bad_addr
04016498 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
04015e68 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04014da0 g     F .text	00000044 _printf_r
04014ce4 g     F .text	00000008 __udivsi3
04017d28 g     F .text	00000090 alt_icache_flush
040165c0 g     F .text	00000058 alt_avalon_sgdma_stop
04017b14 g     F .text	00000024 alt_dcache_flush
04018764 g     O .rwdata	00000004 alt_max_fd
040102d0 g     F .text	000001b0 line
04018740 g     O .rwdata	00000004 _global_impure_ptr
04019308 g       *ABS*	00000000 __bss_end
04017510 g     F .text	000000f8 alt_iic_isr_register
04016010 g     F .text	0000013c alt_avalon_sgdma_do_async_transfer
04018734 g     O .rwdata	00000004 frameBufferB
04015a60 g     F .text	0000010c alt_tick
040174c8 g     F .text	00000048 alt_ic_irq_enabled
040159c8 g     F .text	00000098 alt_alarm_stop
04018ad0 g     O .bss	00000004 alt_irq_active
040100fc g     F .exceptions	000000c8 alt_irq_handler
04018588 g     O .rwdata	00000028 alt_dev_null
04016618 g     F .text	00000070 alt_avalon_sgdma_check_descriptor_status
04017054 g     F .text	0000001c alt_dcache_flush_all
04018770 g       *ABS*	00000000 __ram_rwdata_end
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0401875c g     O .rwdata	00000008 alt_dev_list
04015b6c g     F .text	00000124 write
040167c8 g     F .text	0000007c alt_avalon_sgdma_enable_desc_poll
0401844c g       *ABS*	00000000 __ram_rodata_end
04014cec g     F .text	00000008 __umodsi3
04016424 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_stream_desc
0401651c g     F .text	00000050 alt_avalon_sgdma_register_callback
04018af0 g     O .bss	00000100 dmaDescA
04019308 g       *ABS*	00000000 end
04018bf0 g     O .bss	00000020 dmaDescEND
040101c4 g     F .exceptions	00000068 alt_instruction_exception_entry
04018290 g       *ABS*	00000000 __CTOR_LIST__
04019858 g       *ABS*	00000000 __alt_stack_pointer
04016844 g     F .text	0000005c alt_avalon_sgdma_disable_desc_poll
04016e64 g     F .text	00000090 alt_avalon_timer_sc_init
04015f6c g     F .text	000000a4 altera_avalon_jtag_uart_write
04016270 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
04014f28 g     F .text	0000069c ___vfprintf_internal_r
04016360 g     F .text	00000054 alt_avalon_sgdma_construct_stream_to_mem_desc
04018074 g     F .text	000001bc __call_exitprocs
04018f54 g     O .bss	0000000a Buff
04012c78 g     F .text	00000064 f_close
0401022c g     F .text	0000003c _start
04018ac8 g     O .bss	00000004 _alt_tick_rate
04016688 g     F .text	00000058 alt_avalon_sgdma_open
04018acc g     O .bss	00000004 _alt_nticks
04015d24 g     F .text	0000005c alt_sys_init
04017f04 g     F .text	0000016c __register_exitproc
04012858 g     F .text	00000420 f_read
04017ab4 g     F .text	00000040 alt_remap_uncached
040131c0 g     F .text	000000e8 f_readdir
04014cf4 g     F .text	00000038 __mulsi3
0401844c g       *ABS*	00000000 __ram_rwdata_start
04013fcc g     F .text	00000140 ffs_DiskIORead
04018294 g       *ABS*	00000000 __ram_rodata_start
0401065c g     F .text	00000228 init_and_start_framebuffer
04015db8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04017c58 g     F .text	000000d0 alt_get_fd
04013bec g     F .text	0000011c ffs_DiskIOTimerproc
04013d08 g     F .text	0000029c ffs_DiskIOInitialize
04017ec8 g     F .text	0000003c memcmp
04019308 g       *ABS*	00000000 __alt_stack_base
0401478c g     F .text	0000002c get_fattime
04017b38 g     F .text	00000120 alt_find_file
0401709c g     F .text	000000b4 alt_dev_llist_insert
04018730 g     O .rwdata	00000004 frameBufferA
0401656c g     F .text	00000054 alt_avalon_sgdma_start
040155e8 g     F .text	000000bc __sfvwrite_small_dev
04018a94 g       *ABS*	00000000 __bss_start
04014d2c g     F .text	00000020 memset
0401488c g     F .text	0000031c main
04018ac4 g     O .bss	00000004 alt_envp
04015e10 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0401874c g     O .rwdata	00000008 alt_sgdma_list
0401927c g     O .bss	0000008c _atexit0
04018768 g     O .rwdata	00000004 alt_errno
040125d0 g     F .text	000000a4 f_mount
04013048 g     F .text	00000178 f_opendir
04014c24 g     F .text	00000060 __divsi3
04018294 g       *ABS*	00000000 __CTOR_END__
04014864 g     F .text	00000028 die
04018294 g       *ABS*	00000000 __flash_rodata_start
04018294 g       *ABS*	00000000 __DTOR_LIST__
04015cf0 g     F .text	00000034 alt_irq_init
04017a3c g     F .text	00000078 alt_release_fd
04012cdc g     F .text	0000036c f_lseek
04017e94 g     F .text	00000014 atexit
040156a4 g     F .text	00000078 _write_r
0401873c g     O .rwdata	00000004 _impure_ptr
04018abc g     O .bss	00000004 alt_argc
04017214 g     F .text	00000064 _do_dtors
04018f60 g     O .bss	0000021c Fil
04010020 g       .exceptions	00000000 alt_irq_entry
04013fa4 g     F .text	00000028 ffs_DiskIOStatus
04018754 g     O .rwdata	00000008 alt_fs_list
04010020 g       *ABS*	00000000 __ram_exceptions_start
04010b28 g     F .text	00000080 clust2sect
0401733c g     F .text	00000050 alt_ic_isr_register
04018770 g       *ABS*	00000000 _edata
04019308 g       *ABS*	00000000 _end
0401022c g       *ABS*	00000000 __ram_exceptions_end
04017428 g     F .text	000000a0 alt_ic_irq_disable
04016740 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
04012674 g     F .text	000001e4 f_open
04017af4 g     F .text	00000020 altera_nios2_qsys_irq_init
04017ea8 g     F .text	00000020 exit
04018c10 g     O .bss	00000100 dmaDescB
04014c84 g     F .text	00000060 __modsi3
04019858 g       *ABS*	00000000 __alt_data_end
04010020 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
04018270 g     F .text	00000020 _exit
04013378 g     F .text	00000024 ffs_Init
0401571c g     F .text	00000154 alt_alarm_start
04014e88 g     F .text	00000020 strlen
04017850 g     F .text	0000018c open
0401730c g     F .text	00000030 alt_icache_flush_all
0401876c g     O .rwdata	00000004 alt_priority_mask
0401738c g     F .text	0000009c alt_ic_irq_enable
040155c4 g     F .text	00000024 __vfprintf_internal
04018d10 g     O .bss	00000020 dmaDescBEND
040162e0 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
04013bc0 g     F .text	0000002c ffs_DiskIOInit
04018744 g     O .rwdata	00000008 alt_alarm_list
040171b0 g     F .text	00000064 _do_ctors
04016ef4 g     F .text	00000100 close
04015870 g     F .text	00000080 alt_load
04016d48 g     F .text	000000ac alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

04010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4010000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 4010004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4010008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 401000c:	00bffd16 	blt	zero,r2,4010004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4010010:	00410074 	movhi	at,1025
    ori r1, r1, %lo(_start)
 4010014:	08408b14 	ori	at,at,556
    jmp r1
 4010018:	0800683a 	jmp	at
 401001c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>

Disassembly of section .exceptions:

04010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4010020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4010024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4010028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 401002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4010030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4010034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4010038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 401003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4010040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4010044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4010048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 401004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4010050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4010054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4010058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 401005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4010060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4010064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4010068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 401006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4010070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4010074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4010078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 401007c:	10000326 	beq	r2,zero,401008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4010080:	20000226 	beq	r4,zero,401008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4010084:	40100fc0 	call	40100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4010088:	00000706 	br	40100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 401008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4010090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4010094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4010098:	40101c40 	call	40101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 401009c:	1000021e 	bne	r2,zero,40100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40100d0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40100f0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40100f8:	ef80083a 	eret

040100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40100fc:	defff904 	addi	sp,sp,-28
 4010100:	dfc00615 	stw	ra,24(sp)
 4010104:	df000515 	stw	fp,20(sp)
 4010108:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 401010c:	0005313a 	rdctl	r2,ipending
 4010110:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4010114:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4010118:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 401011c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4010120:	00800044 	movi	r2,1
 4010124:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4010128:	e0ffff17 	ldw	r3,-4(fp)
 401012c:	e0bffe17 	ldw	r2,-8(fp)
 4010130:	1884703a 	and	r2,r3,r2
 4010134:	1005003a 	cmpeq	r2,r2,zero
 4010138:	1000161e 	bne	r2,zero,4010194 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 401013c:	e0bffd17 	ldw	r2,-12(fp)
 4010140:	00c100b4 	movhi	r3,1026
 4010144:	18e45f04 	addi	r3,r3,-28292
 4010148:	100490fa 	slli	r2,r2,3
 401014c:	10c5883a 	add	r2,r2,r3
 4010150:	11400017 	ldw	r5,0(r2)
 4010154:	e0bffd17 	ldw	r2,-12(fp)
 4010158:	00c100b4 	movhi	r3,1026
 401015c:	18e45f04 	addi	r3,r3,-28292
 4010160:	100490fa 	slli	r2,r2,3
 4010164:	10c5883a 	add	r2,r2,r3
 4010168:	10800104 	addi	r2,r2,4
 401016c:	11000017 	ldw	r4,0(r2)
 4010170:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4010174:	0005313a 	rdctl	r2,ipending
 4010178:	e0bffb15 	stw	r2,-20(fp)

  return active;
 401017c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4010180:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4010184:	e0bfff17 	ldw	r2,-4(fp)
 4010188:	1004c03a 	cmpne	r2,r2,zero
 401018c:	103fe31e 	bne	r2,zero,401011c <alt_irq_handler+0x20>
 4010190:	00000706 	br	40101b0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4010194:	e0bffe17 	ldw	r2,-8(fp)
 4010198:	1085883a 	add	r2,r2,r2
 401019c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 40101a0:	e0bffd17 	ldw	r2,-12(fp)
 40101a4:	10800044 	addi	r2,r2,1
 40101a8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40101ac:	003fde06 	br	4010128 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40101b0:	e037883a 	mov	sp,fp
 40101b4:	dfc00117 	ldw	ra,4(sp)
 40101b8:	df000017 	ldw	fp,0(sp)
 40101bc:	dec00204 	addi	sp,sp,8
 40101c0:	f800283a 	ret

040101c4 <alt_instruction_exception_entry>:
 * using alt_instruction_exception_register(). This routine will call
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40101c4:	defffa04 	addi	sp,sp,-24
 40101c8:	dfc00515 	stw	ra,20(sp)
 40101cc:	df000415 	stw	fp,16(sp)
 40101d0:	df000404 	addi	fp,sp,16
 40101d4:	e13ffe15 	stw	r4,-8(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40101d8:	00bfffc4 	movi	r2,-1
 40101dc:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40101e0:	e03ffc15 	stw	zero,-16(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40101e4:	d0a0e917 	ldw	r2,-31836(gp)
 40101e8:	1005003a 	cmpeq	r2,r2,zero
 40101ec:	1000071e 	bne	r2,zero,401020c <alt_instruction_exception_entry+0x48>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40101f0:	d0a0e917 	ldw	r2,-31836(gp)
 40101f4:	e13ffd17 	ldw	r4,-12(fp)
 40101f8:	e17ffe17 	ldw	r5,-8(fp)
 40101fc:	e1bffc17 	ldw	r6,-16(fp)
 4010200:	103ee83a 	callr	r2
 4010204:	e0bfff15 	stw	r2,-4(fp)
 4010208:	00000206 	br	4010214 <alt_instruction_exception_entry+0x50>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 401020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* // We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4010210:	e03fff15 	stw	zero,-4(fp)
 4010214:	e0bfff17 	ldw	r2,-4(fp)
}
 4010218:	e037883a 	mov	sp,fp
 401021c:	dfc00117 	ldw	ra,4(sp)
 4010220:	df000017 	ldw	fp,0(sp)
 4010224:	dec00204 	addi	sp,sp,8
 4010228:	f800283a 	ret

Disassembly of section .text:

0401022c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 401022c:	06c10074 	movhi	sp,1025
    ori sp, sp, %lo(__alt_stack_pointer)
 4010230:	dee61614 	ori	sp,sp,39000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 4010234:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 4010238:	d681cc14 	ori	gp,gp,1840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 401023c:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4010240:	10a2a514 	ori	r2,r2,35476

    movhi r3, %hi(__bss_end)
 4010244:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4010248:	18e4c214 	ori	r3,r3,37640

    beq r2, r3, 1f
 401024c:	10c00326 	beq	r2,r3,401025c <_start+0x30>

0:
    stw zero, (r2)
 4010250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4010254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4010258:	10fffd36 	bltu	r2,r3,4010250 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 401025c:	40158700 	call	4015870 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4010260:	401595c0 	call	401595c <alt_main>

04010264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4010264:	003fff06 	br	4010264 <alt_after_alt_main>

04010268 <setPix>:

#include "drawing_routines.h"

// draw a pixel
inline void setPix(const int x, const int y, const Color col, alt_u32* buffer)
{
 4010268:	defffa04 	addi	sp,sp,-24
 401026c:	dfc00515 	stw	ra,20(sp)
 4010270:	df000415 	stw	fp,16(sp)
 4010274:	df000404 	addi	fp,sp,16
 4010278:	e13ffc15 	stw	r4,-16(fp)
 401027c:	e17ffd15 	stw	r5,-12(fp)
 4010280:	e1bffe15 	stw	r6,-8(fp)
 4010284:	e1ffff15 	stw	r7,-4(fp)
    buffer[x + y * 480] = col.color32;
 4010288:	e13ffd17 	ldw	r4,-12(fp)
 401028c:	01407804 	movi	r5,480
 4010290:	4014cf40 	call	4014cf4 <__mulsi3>
 4010294:	1007883a 	mov	r3,r2
 4010298:	e0bffc17 	ldw	r2,-16(fp)
 401029c:	1885883a 	add	r2,r3,r2
 40102a0:	1085883a 	add	r2,r2,r2
 40102a4:	1085883a 	add	r2,r2,r2
 40102a8:	1007883a 	mov	r3,r2
 40102ac:	e0bfff17 	ldw	r2,-4(fp)
 40102b0:	1887883a 	add	r3,r3,r2
 40102b4:	e0bffe17 	ldw	r2,-8(fp)
 40102b8:	18800015 	stw	r2,0(r3)
}
 40102bc:	e037883a 	mov	sp,fp
 40102c0:	dfc00117 	ldw	ra,4(sp)
 40102c4:	df000017 	ldw	fp,0(sp)
 40102c8:	dec00204 	addi	sp,sp,8
 40102cc:	f800283a 	ret

040102d0 <line>:

// bresenham line drawing
void line(alt_u32* buffer, int x0, int y0, int x1, int y1, Color color) {
 40102d0:	defff104 	addi	sp,sp,-60
 40102d4:	dfc00e15 	stw	ra,56(sp)
 40102d8:	df000d15 	stw	fp,52(sp)
 40102dc:	df000d04 	addi	fp,sp,52
 40102e0:	e13ff915 	stw	r4,-28(fp)
 40102e4:	e17ffa15 	stw	r5,-24(fp)
 40102e8:	e1bffb15 	stw	r6,-20(fp)
 40102ec:	e1fffc15 	stw	r7,-16(fp)

    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 40102f0:	e0fffc17 	ldw	r3,-16(fp)
 40102f4:	e0bffa17 	ldw	r2,-24(fp)
 40102f8:	1885c83a 	sub	r2,r3,r2
 40102fc:	e0bff815 	stw	r2,-32(fp)
 4010300:	e0bff817 	ldw	r2,-32(fp)
 4010304:	1004403a 	cmpge	r2,r2,zero
 4010308:	1000031e 	bne	r2,zero,4010318 <line+0x48>
 401030c:	e0bff817 	ldw	r2,-32(fp)
 4010310:	0085c83a 	sub	r2,zero,r2
 4010314:	e0bff815 	stw	r2,-32(fp)
 4010318:	e0fffa17 	ldw	r3,-24(fp)
 401031c:	e0bffc17 	ldw	r2,-16(fp)
 4010320:	1880030e 	bge	r3,r2,4010330 <line+0x60>
 4010324:	00800044 	movi	r2,1
 4010328:	e0bfff15 	stw	r2,-4(fp)
 401032c:	00000206 	br	4010338 <line+0x68>
 4010330:	00bfffc4 	movi	r2,-1
 4010334:	e0bfff15 	stw	r2,-4(fp)
 4010338:	e0bfff17 	ldw	r2,-4(fp)
 401033c:	e0bff715 	stw	r2,-36(fp)
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 4010340:	e0c00217 	ldw	r3,8(fp)
 4010344:	e0bffb17 	ldw	r2,-20(fp)
 4010348:	1885c83a 	sub	r2,r3,r2
 401034c:	e0bff615 	stw	r2,-40(fp)
 4010350:	e0bff617 	ldw	r2,-40(fp)
 4010354:	1004403a 	cmpge	r2,r2,zero
 4010358:	1000031e 	bne	r2,zero,4010368 <line+0x98>
 401035c:	e0bff617 	ldw	r2,-40(fp)
 4010360:	0085c83a 	sub	r2,zero,r2
 4010364:	e0bff615 	stw	r2,-40(fp)
 4010368:	e0fffb17 	ldw	r3,-20(fp)
 401036c:	e0800217 	ldw	r2,8(fp)
 4010370:	1880030e 	bge	r3,r2,4010380 <line+0xb0>
 4010374:	00800044 	movi	r2,1
 4010378:	e0bffe15 	stw	r2,-8(fp)
 401037c:	00000206 	br	4010388 <line+0xb8>
 4010380:	00bfffc4 	movi	r2,-1
 4010384:	e0bffe15 	stw	r2,-8(fp)
 4010388:	e0bffe17 	ldw	r2,-8(fp)
 401038c:	e0bff515 	stw	r2,-44(fp)
    int err = (dx>dy ? dx : -dy)/2, e2;
 4010390:	e0fff817 	ldw	r3,-32(fp)
 4010394:	e0bff617 	ldw	r2,-40(fp)
 4010398:	10c00716 	blt	r2,r3,40103b8 <line+0xe8>
 401039c:	e0bff617 	ldw	r2,-40(fp)
 40103a0:	0087c83a 	sub	r3,zero,r2
 40103a4:	1804d7fa 	srli	r2,r3,31
 40103a8:	10c5883a 	add	r2,r2,r3
 40103ac:	1005d07a 	srai	r2,r2,1
 40103b0:	e0bffd15 	stw	r2,-12(fp)
 40103b4:	00000506 	br	40103cc <line+0xfc>
 40103b8:	e0fff817 	ldw	r3,-32(fp)
 40103bc:	1804d7fa 	srli	r2,r3,31
 40103c0:	10c5883a 	add	r2,r2,r3
 40103c4:	1005d07a 	srai	r2,r2,1
 40103c8:	e0bffd15 	stw	r2,-12(fp)
 40103cc:	e0bffd17 	ldw	r2,-12(fp)
 40103d0:	e0bff415 	stw	r2,-48(fp)
 40103d4:	00000006 	br	40103d8 <line+0x108>

    for(;;){
        setPix(x0, y0, color, buffer);
 40103d8:	e13ffa17 	ldw	r4,-24(fp)
 40103dc:	e17ffb17 	ldw	r5,-20(fp)
 40103e0:	e1800317 	ldw	r6,12(fp)
 40103e4:	e1fff917 	ldw	r7,-28(fp)
 40103e8:	40102680 	call	4010268 <setPix>
	if (x0==x1 && y0==y1) break;
 40103ec:	e0fffa17 	ldw	r3,-24(fp)
 40103f0:	e0bffc17 	ldw	r2,-16(fp)
 40103f4:	1880031e 	bne	r3,r2,4010404 <line+0x134>
 40103f8:	e0fffb17 	ldw	r3,-20(fp)
 40103fc:	e0800217 	ldw	r2,8(fp)
 4010400:	18801a26 	beq	r3,r2,401046c <line+0x19c>
	e2 = err;
 4010404:	e0bff417 	ldw	r2,-48(fp)
 4010408:	e0bff315 	stw	r2,-52(fp)
	if (e2 >-dx) { err -= dy; x0 += sx; }
 401040c:	e0bff817 	ldw	r2,-32(fp)
 4010410:	0087c83a 	sub	r3,zero,r2
 4010414:	e0bff317 	ldw	r2,-52(fp)
 4010418:	1880080e 	bge	r3,r2,401043c <line+0x16c>
 401041c:	e0fff417 	ldw	r3,-48(fp)
 4010420:	e0bff617 	ldw	r2,-40(fp)
 4010424:	1885c83a 	sub	r2,r3,r2
 4010428:	e0bff415 	stw	r2,-48(fp)
 401042c:	e0fffa17 	ldw	r3,-24(fp)
 4010430:	e0bff717 	ldw	r2,-36(fp)
 4010434:	1885883a 	add	r2,r3,r2
 4010438:	e0bffa15 	stw	r2,-24(fp)
	if (e2 < dy) { err += dx; y0 += sy; }
 401043c:	e0fff317 	ldw	r3,-52(fp)
 4010440:	e0bff617 	ldw	r2,-40(fp)
 4010444:	18bfe40e 	bge	r3,r2,40103d8 <line+0x108>
 4010448:	e0fff417 	ldw	r3,-48(fp)
 401044c:	e0bff817 	ldw	r2,-32(fp)
 4010450:	1885883a 	add	r2,r3,r2
 4010454:	e0bff415 	stw	r2,-48(fp)
 4010458:	e0fffb17 	ldw	r3,-20(fp)
 401045c:	e0bff517 	ldw	r2,-44(fp)
 4010460:	1885883a 	add	r2,r3,r2
 4010464:	e0bffb15 	stw	r2,-20(fp)
    }
 4010468:	003fdb06 	br	40103d8 <line+0x108>
}
 401046c:	e037883a 	mov	sp,fp
 4010470:	dfc00117 	ldw	ra,4(sp)
 4010474:	df000017 	ldw	fp,0(sp)
 4010478:	dec00204 	addi	sp,sp,8
 401047c:	f800283a 	ret

04010480 <nonburst_memset>:

// useful to fill parts of the screen without blocking the SDRAM for too long
// use this instead of memset when doing frame buffer fills
void nonburst_memset(alt_u32* trg, alt_u32 val, alt_u32 size)
{
 4010480:	defff704 	addi	sp,sp,-36
 4010484:	dfc00815 	stw	ra,32(sp)
 4010488:	df000715 	stw	fp,28(sp)
 401048c:	df000704 	addi	fp,sp,28
 4010490:	e13ffb15 	stw	r4,-20(fp)
 4010494:	e17ffc15 	stw	r5,-16(fp)
 4010498:	e1bffd15 	stw	r6,-12(fp)
const int chunkSize = 8;// <-size of burst, lower this if the display gets corrupted.
 401049c:	00800204 	movi	r2,8
 40104a0:	e0bffa15 	stw	r2,-24(fp)
alt_u32 s;
//int i;
    while(size) {
 40104a4:	00001d06 	br	401051c <nonburst_memset+0x9c>
	s = (size>chunkSize)?chunkSize:size;
 40104a8:	e0bffa17 	ldw	r2,-24(fp)
 40104ac:	e0bffe15 	stw	r2,-8(fp)
 40104b0:	e0fffd17 	ldw	r3,-12(fp)
 40104b4:	e0ffff15 	stw	r3,-4(fp)
 40104b8:	e0bffe17 	ldw	r2,-8(fp)
 40104bc:	e0ffff17 	ldw	r3,-4(fp)
 40104c0:	10c0022e 	bgeu	r2,r3,40104cc <nonburst_memset+0x4c>
 40104c4:	e0bffe17 	ldw	r2,-8(fp)
 40104c8:	e0bfff15 	stw	r2,-4(fp)
 40104cc:	e0ffff17 	ldw	r3,-4(fp)
 40104d0:	e0fff915 	stw	r3,-28(fp)
	memset(trg, val, s*4);
 40104d4:	e17ffc17 	ldw	r5,-16(fp)
 40104d8:	e0bff917 	ldw	r2,-28(fp)
 40104dc:	1085883a 	add	r2,r2,r2
 40104e0:	1085883a 	add	r2,r2,r2
 40104e4:	100d883a 	mov	r6,r2
 40104e8:	e13ffb17 	ldw	r4,-20(fp)
 40104ec:	4014d2c0 	call	4014d2c <memset>
        trg+=s;
 40104f0:	e0bff917 	ldw	r2,-28(fp)
 40104f4:	1085883a 	add	r2,r2,r2
 40104f8:	1085883a 	add	r2,r2,r2
 40104fc:	1007883a 	mov	r3,r2
 4010500:	e0bffb17 	ldw	r2,-20(fp)
 4010504:	10c5883a 	add	r2,r2,r3
 4010508:	e0bffb15 	stw	r2,-20(fp)
        //for(i=0;i<30;i++) {}
	size-=s;
 401050c:	e0fffd17 	ldw	r3,-12(fp)
 4010510:	e0bff917 	ldw	r2,-28(fp)
 4010514:	1885c83a 	sub	r2,r3,r2
 4010518:	e0bffd15 	stw	r2,-12(fp)
void nonburst_memset(alt_u32* trg, alt_u32 val, alt_u32 size)
{
const int chunkSize = 8;// <-size of burst, lower this if the display gets corrupted.
alt_u32 s;
//int i;
    while(size) {
 401051c:	e0bffd17 	ldw	r2,-12(fp)
 4010520:	1004c03a 	cmpne	r2,r2,zero
 4010524:	103fe01e 	bne	r2,zero,40104a8 <nonburst_memset+0x28>
	memset(trg, val, s*4);
        trg+=s;
        //for(i=0;i<30;i++) {}
	size-=s;
    }
}
 4010528:	e037883a 	mov	sp,fp
 401052c:	dfc00117 	ldw	ra,4(sp)
 4010530:	df000017 	ldw	fp,0(sp)
 4010534:	dec00204 	addi	sp,sp,8
 4010538:	f800283a 	ret

0401053c <my_dma_callback>:


// The InterruptService Routine (actually a callback function called by the ISR)
//
void my_dma_callback(void *data)
{
 401053c:	defffc04 	addi	sp,sp,-16
 4010540:	dfc00315 	stw	ra,12(sp)
 4010544:	df000215 	stw	fp,8(sp)
 4010548:	df000204 	addi	fp,sp,8
 401054c:	e13fff15 	stw	r4,-4(fp)
    // reset the OWNED_BY_HW bit in the descriptors to reuse the chain
    int i;

    if (active_buffer == 0) {
 4010550:	d0a0d917 	ldw	r2,-31900(gp)
 4010554:	1004c03a 	cmpne	r2,r2,zero
 4010558:	10001e1e 	bne	r2,zero,40105d4 <my_dma_callback+0x98>
    	for(i = 0; i < 8;++i) {
 401055c:	e03ffe15 	stw	zero,-8(fp)
 4010560:	00001406 	br	40105b4 <my_dma_callback+0x78>
    		dmaDescA[i].control |= 1<<ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_OFST;
 4010564:	e17ffe17 	ldw	r5,-8(fp)
 4010568:	e0bffe17 	ldw	r2,-8(fp)
 401056c:	00c100b4 	movhi	r3,1026
 4010570:	18e2bc04 	addi	r3,r3,-29968
 4010574:	1004917a 	slli	r2,r2,5
 4010578:	10c5883a 	add	r2,r2,r3
 401057c:	108007c4 	addi	r2,r2,31
 4010580:	10c00003 	ldbu	r3,0(r2)
 4010584:	00bfe004 	movi	r2,-128
 4010588:	1884b03a 	or	r2,r3,r2
 401058c:	1009883a 	mov	r4,r2
 4010590:	00c100b4 	movhi	r3,1026
 4010594:	18e2bc04 	addi	r3,r3,-29968
 4010598:	2804917a 	slli	r2,r5,5
 401059c:	10c5883a 	add	r2,r2,r3
 40105a0:	108007c4 	addi	r2,r2,31
 40105a4:	11000005 	stb	r4,0(r2)
{
    // reset the OWNED_BY_HW bit in the descriptors to reuse the chain
    int i;

    if (active_buffer == 0) {
    	for(i = 0; i < 8;++i) {
 40105a8:	e0bffe17 	ldw	r2,-8(fp)
 40105ac:	10800044 	addi	r2,r2,1
 40105b0:	e0bffe15 	stw	r2,-8(fp)
 40105b4:	e0bffe17 	ldw	r2,-8(fp)
 40105b8:	10800210 	cmplti	r2,r2,8
 40105bc:	103fe91e 	bne	r2,zero,4010564 <my_dma_callback+0x28>
    		dmaDescA[i].control |= 1<<ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_OFST;
    	}
        // trigger another transfer all over again
        alt_avalon_sgdma_do_async_transfer((alt_sgdma_dev*)data, dmaDescA);
 40105c0:	e13fff17 	ldw	r4,-4(fp)
 40105c4:	014100b4 	movhi	r5,1026
 40105c8:	2962bc04 	addi	r5,r5,-29968
 40105cc:	40160100 	call	4016010 <alt_avalon_sgdma_do_async_transfer>
 40105d0:	00001d06 	br	4010648 <my_dma_callback+0x10c>
    } else {
    	for(i = 0; i < 8;++i) {
 40105d4:	e03ffe15 	stw	zero,-8(fp)
 40105d8:	00001406 	br	401062c <my_dma_callback+0xf0>
    	    dmaDescB[i].control |= 1<<ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_OFST;
 40105dc:	e17ffe17 	ldw	r5,-8(fp)
 40105e0:	e0bffe17 	ldw	r2,-8(fp)
 40105e4:	00c100b4 	movhi	r3,1026
 40105e8:	18e30404 	addi	r3,r3,-29680
 40105ec:	1004917a 	slli	r2,r2,5
 40105f0:	10c5883a 	add	r2,r2,r3
 40105f4:	108007c4 	addi	r2,r2,31
 40105f8:	10c00003 	ldbu	r3,0(r2)
 40105fc:	00bfe004 	movi	r2,-128
 4010600:	1884b03a 	or	r2,r3,r2
 4010604:	1009883a 	mov	r4,r2
 4010608:	00c100b4 	movhi	r3,1026
 401060c:	18e30404 	addi	r3,r3,-29680
 4010610:	2804917a 	slli	r2,r5,5
 4010614:	10c5883a 	add	r2,r2,r3
 4010618:	108007c4 	addi	r2,r2,31
 401061c:	11000005 	stb	r4,0(r2)
    		dmaDescA[i].control |= 1<<ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_OFST;
    	}
        // trigger another transfer all over again
        alt_avalon_sgdma_do_async_transfer((alt_sgdma_dev*)data, dmaDescA);
    } else {
    	for(i = 0; i < 8;++i) {
 4010620:	e0bffe17 	ldw	r2,-8(fp)
 4010624:	10800044 	addi	r2,r2,1
 4010628:	e0bffe15 	stw	r2,-8(fp)
 401062c:	e0bffe17 	ldw	r2,-8(fp)
 4010630:	10800210 	cmplti	r2,r2,8
 4010634:	103fe91e 	bne	r2,zero,40105dc <my_dma_callback+0xa0>
    	    dmaDescB[i].control |= 1<<ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_OFST;
    	}
        // trigger another transfer all over again
         alt_avalon_sgdma_do_async_transfer((alt_sgdma_dev*)data, dmaDescB);
 4010638:	e13fff17 	ldw	r4,-4(fp)
 401063c:	014100b4 	movhi	r5,1026
 4010640:	29630404 	addi	r5,r5,-29680
 4010644:	40160100 	call	4016010 <alt_avalon_sgdma_do_async_transfer>
    }
}
 4010648:	e037883a 	mov	sp,fp
 401064c:	dfc00117 	ldw	ra,4(sp)
 4010650:	df000017 	ldw	fp,0(sp)
 4010654:	dec00204 	addi	sp,sp,8
 4010658:	f800283a 	ret

0401065c <init_and_start_framebuffer>:

// this subroutine initializes a chain of descriptors, registers the
// interrupt service routine and starts the first asynchronous transfer
//
void init_and_start_framebuffer(alt_sgdma_dev *dma)
{
 401065c:	defff004 	addi	sp,sp,-64
 4010660:	dfc00f15 	stw	ra,60(sp)
 4010664:	df000e15 	stw	fp,56(sp)
 4010668:	df000e04 	addi	fp,sp,56
 401066c:	e13ff915 	stw	r4,-28(fp)
    // 480*272 lines * 4 bytes = 522240 bytes
    //   65532 (0xfffc) bytes * 7 = 458724
    //  +63516 (0xf81c) bytes

    // frame buffer A
    alt_u8* buff = (alt_u8*)frameBufferA;
 4010670:	d0a00017 	ldw	r2,-32768(gp)
 4010674:	e0bff815 	stw	r2,-32(fp)
    int i;
    for(i = 0; i < 8; ++i) {
 4010678:	e03ff715 	stw	zero,-36(fp)
 401067c:	00003406 	br	4010750 <init_and_start_framebuffer+0xf4>
        alt_u16 size = (i<7)?0xfffc:0xf81c;
 4010680:	e0bff717 	ldw	r2,-36(fp)
 4010684:	108001c8 	cmpgei	r2,r2,7
 4010688:	1000031e 	bne	r2,zero,4010698 <init_and_start_framebuffer+0x3c>
 401068c:	00bfff04 	movi	r2,-4
 4010690:	e0bfff0d 	sth	r2,-4(fp)
 4010694:	00000206 	br	40106a0 <init_and_start_framebuffer+0x44>
 4010698:	00be0704 	movi	r2,-2020
 401069c:	e0bfff0d 	sth	r2,-4(fp)
 40106a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40106a4:	e0bff68d 	sth	r2,-38(fp)
	alt_avalon_sgdma_construct_mem_to_stream_desc(
 40106a8:	e0bff717 	ldw	r2,-36(fp)
 40106ac:	1004917a 	slli	r2,r2,5
 40106b0:	1007883a 	mov	r3,r2
 40106b4:	008100b4 	movhi	r2,1026
 40106b8:	10a2bc04 	addi	r2,r2,-29968
 40106bc:	1887883a 	add	r3,r3,r2
 40106c0:	e0fffe15 	stw	r3,-8(fp)
 40106c4:	e0bff717 	ldw	r2,-36(fp)
 40106c8:	108001c8 	cmpgei	r2,r2,7
 40106cc:	1000081e 	bne	r2,zero,40106f0 <init_and_start_framebuffer+0x94>
 40106d0:	e0bff717 	ldw	r2,-36(fp)
 40106d4:	1004917a 	slli	r2,r2,5
 40106d8:	1007883a 	mov	r3,r2
 40106dc:	008100b4 	movhi	r2,1026
 40106e0:	10a2c404 	addi	r2,r2,-29936
 40106e4:	1887883a 	add	r3,r3,r2
 40106e8:	e0fffd15 	stw	r3,-12(fp)
 40106ec:	00000306 	br	40106fc <init_and_start_framebuffer+0xa0>
 40106f0:	008100b4 	movhi	r2,1026
 40106f4:	10a2fc04 	addi	r2,r2,-29712
 40106f8:	e0bffd15 	stw	r2,-12(fp)
 40106fc:	e1bff817 	ldw	r6,-32(fp)
 4010700:	e1fff68b 	ldhu	r7,-38(fp)
 4010704:	e0bff717 	ldw	r2,-36(fp)
 4010708:	1007003a 	cmpeq	r3,r2,zero
 401070c:	e0bff717 	ldw	r2,-36(fp)
 4010710:	108001e0 	cmpeqi	r2,r2,7
 4010714:	d8000015 	stw	zero,0(sp)
 4010718:	d8c00115 	stw	r3,4(sp)
 401071c:	d8800215 	stw	r2,8(sp)
 4010720:	d8000315 	stw	zero,12(sp)
 4010724:	e13ffe17 	ldw	r4,-8(fp)
 4010728:	e17ffd17 	ldw	r5,-12(fp)
 401072c:	40164240 	call	4016424 <alt_avalon_sgdma_construct_mem_to_stream_desc>
	    &dmaDescA[i],
	    (i<7) ? (&dmaDescA[i+1]) : &dmaDescEND,
	    (alt_u32*)buff,
	    size, 0, i==0, i==7, 0);
	    buff+= size;
 4010730:	e0bff68b 	ldhu	r2,-38(fp)
 4010734:	1007883a 	mov	r3,r2
 4010738:	e0bff817 	ldw	r2,-32(fp)
 401073c:	10c5883a 	add	r2,r2,r3
 4010740:	e0bff815 	stw	r2,-32(fp)
    //  +63516 (0xf81c) bytes

    // frame buffer A
    alt_u8* buff = (alt_u8*)frameBufferA;
    int i;
    for(i = 0; i < 8; ++i) {
 4010744:	e0bff717 	ldw	r2,-36(fp)
 4010748:	10800044 	addi	r2,r2,1
 401074c:	e0bff715 	stw	r2,-36(fp)
 4010750:	e0bff717 	ldw	r2,-36(fp)
 4010754:	10800210 	cmplti	r2,r2,8
 4010758:	103fc91e 	bne	r2,zero,4010680 <init_and_start_framebuffer+0x24>
	    size, 0, i==0, i==7, 0);
	    buff+= size;
	}

    // frame buffer B
    buff = (alt_u8*)frameBufferB;
 401075c:	d0a00117 	ldw	r2,-32764(gp)
 4010760:	e0bff815 	stw	r2,-32(fp)
    for(i = 0; i < 8; ++i) {
 4010764:	e03ff715 	stw	zero,-36(fp)
 4010768:	00003406 	br	401083c <init_and_start_framebuffer+0x1e0>
        alt_u16 size = (i<7)?0xfffc:0xf81c;
 401076c:	e0bff717 	ldw	r2,-36(fp)
 4010770:	108001c8 	cmpgei	r2,r2,7
 4010774:	1000031e 	bne	r2,zero,4010784 <init_and_start_framebuffer+0x128>
 4010778:	00bfff04 	movi	r2,-4
 401077c:	e0bffc0d 	sth	r2,-16(fp)
 4010780:	00000206 	br	401078c <init_and_start_framebuffer+0x130>
 4010784:	00be0704 	movi	r2,-2020
 4010788:	e0bffc0d 	sth	r2,-16(fp)
 401078c:	e0bffc0b 	ldhu	r2,-16(fp)
 4010790:	e0bff60d 	sth	r2,-40(fp)
	alt_avalon_sgdma_construct_mem_to_stream_desc(
 4010794:	e0bff717 	ldw	r2,-36(fp)
 4010798:	1004917a 	slli	r2,r2,5
 401079c:	1007883a 	mov	r3,r2
 40107a0:	008100b4 	movhi	r2,1026
 40107a4:	10a30404 	addi	r2,r2,-29680
 40107a8:	1887883a 	add	r3,r3,r2
 40107ac:	e0fffb15 	stw	r3,-20(fp)
 40107b0:	e0bff717 	ldw	r2,-36(fp)
 40107b4:	108001c8 	cmpgei	r2,r2,7
 40107b8:	1000081e 	bne	r2,zero,40107dc <init_and_start_framebuffer+0x180>
 40107bc:	e0bff717 	ldw	r2,-36(fp)
 40107c0:	1004917a 	slli	r2,r2,5
 40107c4:	1007883a 	mov	r3,r2
 40107c8:	008100b4 	movhi	r2,1026
 40107cc:	10a30c04 	addi	r2,r2,-29648
 40107d0:	1887883a 	add	r3,r3,r2
 40107d4:	e0fffa15 	stw	r3,-24(fp)
 40107d8:	00000306 	br	40107e8 <init_and_start_framebuffer+0x18c>
 40107dc:	008100b4 	movhi	r2,1026
 40107e0:	10a34404 	addi	r2,r2,-29424
 40107e4:	e0bffa15 	stw	r2,-24(fp)
 40107e8:	e1bff817 	ldw	r6,-32(fp)
 40107ec:	e1fff60b 	ldhu	r7,-40(fp)
 40107f0:	e0bff717 	ldw	r2,-36(fp)
 40107f4:	1007003a 	cmpeq	r3,r2,zero
 40107f8:	e0bff717 	ldw	r2,-36(fp)
 40107fc:	108001e0 	cmpeqi	r2,r2,7
 4010800:	d8000015 	stw	zero,0(sp)
 4010804:	d8c00115 	stw	r3,4(sp)
 4010808:	d8800215 	stw	r2,8(sp)
 401080c:	d8000315 	stw	zero,12(sp)
 4010810:	e13ffb17 	ldw	r4,-20(fp)
 4010814:	e17ffa17 	ldw	r5,-24(fp)
 4010818:	40164240 	call	4016424 <alt_avalon_sgdma_construct_mem_to_stream_desc>
	    &dmaDescB[i],
	    (i<7) ? (&dmaDescB[i+1]) : &dmaDescBEND,
	    (alt_u32*)buff,
	    size, 0, i==0, i==7, 0);
	    buff+= size;
 401081c:	e0bff60b 	ldhu	r2,-40(fp)
 4010820:	1007883a 	mov	r3,r2
 4010824:	e0bff817 	ldw	r2,-32(fp)
 4010828:	10c5883a 	add	r2,r2,r3
 401082c:	e0bff815 	stw	r2,-32(fp)
	    buff+= size;
	}

    // frame buffer B
    buff = (alt_u8*)frameBufferB;
    for(i = 0; i < 8; ++i) {
 4010830:	e0bff717 	ldw	r2,-36(fp)
 4010834:	10800044 	addi	r2,r2,1
 4010838:	e0bff715 	stw	r2,-36(fp)
 401083c:	e0bff717 	ldw	r2,-36(fp)
 4010840:	10800210 	cmplti	r2,r2,8
 4010844:	103fc91e 	bne	r2,zero,401076c <init_and_start_framebuffer+0x110>
	    (alt_u32*)buff,
	    size, 0, i==0, i==7, 0);
	    buff+= size;
	}

	alt_avalon_sgdma_register_callback(
 4010848:	e13ff917 	ldw	r4,-28(fp)
 401084c:	01410074 	movhi	r5,1025
 4010850:	29414f04 	addi	r5,r5,1340
 4010854:	01800604 	movi	r6,24
 4010858:	e1fff917 	ldw	r7,-28(fp)
 401085c:	401651c0 	call	401651c <alt_avalon_sgdma_register_callback>
            dma, my_dma_callback,
            ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK
            |ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK,
            (void*)dma);

	alt_avalon_sgdma_do_async_transfer(dma, dmaDescA);
 4010860:	e13ff917 	ldw	r4,-28(fp)
 4010864:	014100b4 	movhi	r5,1026
 4010868:	2962bc04 	addi	r5,r5,-29968
 401086c:	40160100 	call	4016010 <alt_avalon_sgdma_do_async_transfer>
}
 4010870:	e037883a 	mov	sp,fp
 4010874:	dfc00117 	ldw	ra,4(sp)
 4010878:	df000017 	ldw	fp,0(sp)
 401087c:	dec00204 	addi	sp,sp,8
 4010880:	f800283a 	ret

04010884 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, FFS_U32 cnt) {
 4010884:	defffa04 	addi	sp,sp,-24
 4010888:	df000515 	stw	fp,20(sp)
 401088c:	df000504 	addi	fp,sp,20
 4010890:	e13ffd15 	stw	r4,-12(fp)
 4010894:	e17ffe15 	stw	r5,-8(fp)
 4010898:	e1bfff15 	stw	r6,-4(fp)
   FFS_U8 *d = (FFS_U8*)dst;
 401089c:	e0bffd17 	ldw	r2,-12(fp)
 40108a0:	e0bffc15 	stw	r2,-16(fp)
   const FFS_U8 *s = (const FFS_U8*)src;
 40108a4:	e0bffe17 	ldw	r2,-8(fp)
 40108a8:	e0bffb15 	stw	r2,-20(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
 40108ac:	00000a06 	br	40108d8 <mem_cpy+0x54>
      *d++ = *s++;
 40108b0:	e0bffb17 	ldw	r2,-20(fp)
 40108b4:	10c00003 	ldbu	r3,0(r2)
 40108b8:	e0bffc17 	ldw	r2,-16(fp)
 40108bc:	10c00005 	stb	r3,0(r2)
 40108c0:	e0bffc17 	ldw	r2,-16(fp)
 40108c4:	10800044 	addi	r2,r2,1
 40108c8:	e0bffc15 	stw	r2,-16(fp)
 40108cc:	e0bffb17 	ldw	r2,-20(fp)
 40108d0:	10800044 	addi	r2,r2,1
 40108d4:	e0bffb15 	stw	r2,-20(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
 40108d8:	e0bfff17 	ldw	r2,-4(fp)
 40108dc:	10bfffc4 	addi	r2,r2,-1
 40108e0:	e0bfff15 	stw	r2,-4(fp)
 40108e4:	e0bfff17 	ldw	r2,-4(fp)
 40108e8:	10bfffd8 	cmpnei	r2,r2,-1
 40108ec:	103ff01e 	bne	r2,zero,40108b0 <mem_cpy+0x2c>
      *d++ = *s++;
}
 40108f0:	e037883a 	mov	sp,fp
 40108f4:	df000017 	ldw	fp,0(sp)
 40108f8:	dec00104 	addi	sp,sp,4
 40108fc:	f800283a 	ret

04010900 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, FFS_U32 cnt) {
 4010900:	defffb04 	addi	sp,sp,-20
 4010904:	df000415 	stw	fp,16(sp)
 4010908:	df000404 	addi	fp,sp,16
 401090c:	e13ffd15 	stw	r4,-12(fp)
 4010910:	e17ffe15 	stw	r5,-8(fp)
 4010914:	e1bfff15 	stw	r6,-4(fp)
   FFS_U8 *d = (FFS_U8*)dst;
 4010918:	e0bffd17 	ldw	r2,-12(fp)
 401091c:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
 4010920:	00000706 	br	4010940 <mem_set+0x40>
      *d++ = (FFS_U8)val;
 4010924:	e0bffe17 	ldw	r2,-8(fp)
 4010928:	1007883a 	mov	r3,r2
 401092c:	e0bffc17 	ldw	r2,-16(fp)
 4010930:	10c00005 	stb	r3,0(r2)
 4010934:	e0bffc17 	ldw	r2,-16(fp)
 4010938:	10800044 	addi	r2,r2,1
 401093c:	e0bffc15 	stw	r2,-16(fp)
/* Fill memory */
static
void mem_set (void* dst, int val, FFS_U32 cnt) {
   FFS_U8 *d = (FFS_U8*)dst;

   while (cnt--)
 4010940:	e0bfff17 	ldw	r2,-4(fp)
 4010944:	10bfffc4 	addi	r2,r2,-1
 4010948:	e0bfff15 	stw	r2,-4(fp)
 401094c:	e0bfff17 	ldw	r2,-4(fp)
 4010950:	10bfffd8 	cmpnei	r2,r2,-1
 4010954:	103ff31e 	bne	r2,zero,4010924 <mem_set+0x24>
      *d++ = (FFS_U8)val;
}
 4010958:	e037883a 	mov	sp,fp
 401095c:	df000017 	ldw	fp,0(sp)
 4010960:	dec00104 	addi	sp,sp,4
 4010964:	f800283a 	ret

04010968 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, FFS_U32 cnt) {
 4010968:	defff904 	addi	sp,sp,-28
 401096c:	df000615 	stw	fp,24(sp)
 4010970:	df000604 	addi	fp,sp,24
 4010974:	e13ffd15 	stw	r4,-12(fp)
 4010978:	e17ffe15 	stw	r5,-8(fp)
 401097c:	e1bfff15 	stw	r6,-4(fp)
   const FFS_U8 *d = (const FFS_U8 *)dst, *s = (const FFS_U8 *)src;
 4010980:	e0bffd17 	ldw	r2,-12(fp)
 4010984:	e0bffc15 	stw	r2,-16(fp)
 4010988:	e0bffe17 	ldw	r2,-8(fp)
 401098c:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
 4010990:	e03ffa15 	stw	zero,-24(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
 4010994:	e0bfff17 	ldw	r2,-4(fp)
 4010998:	10bfffc4 	addi	r2,r2,-1
 401099c:	e0bfff15 	stw	r2,-4(fp)
 40109a0:	e0bfff17 	ldw	r2,-4(fp)
 40109a4:	10bfffe0 	cmpeqi	r2,r2,-1
 40109a8:	1000141e 	bne	r2,zero,40109fc <mem_cmp+0x94>
 40109ac:	e0bffc17 	ldw	r2,-16(fp)
 40109b0:	10800003 	ldbu	r2,0(r2)
 40109b4:	10c03fcc 	andi	r3,r2,255
 40109b8:	e0bffb17 	ldw	r2,-20(fp)
 40109bc:	10800003 	ldbu	r2,0(r2)
 40109c0:	10803fcc 	andi	r2,r2,255
 40109c4:	1885c83a 	sub	r2,r3,r2
 40109c8:	e0bffa15 	stw	r2,-24(fp)
 40109cc:	e0bffa17 	ldw	r2,-24(fp)
 40109d0:	1005003a 	cmpeq	r2,r2,zero
 40109d4:	1007883a 	mov	r3,r2
 40109d8:	e0bffc17 	ldw	r2,-16(fp)
 40109dc:	10800044 	addi	r2,r2,1
 40109e0:	e0bffc15 	stw	r2,-16(fp)
 40109e4:	e0bffb17 	ldw	r2,-20(fp)
 40109e8:	10800044 	addi	r2,r2,1
 40109ec:	e0bffb15 	stw	r2,-20(fp)
 40109f0:	18803fcc 	andi	r2,r3,255
 40109f4:	1004c03a 	cmpne	r2,r2,zero
 40109f8:	103fe61e 	bne	r2,zero,4010994 <mem_cmp+0x2c>
   return r;
 40109fc:	e0bffa17 	ldw	r2,-24(fp)
}
 4010a00:	e037883a 	mov	sp,fp
 4010a04:	df000017 	ldw	fp,0(sp)
 4010a08:	dec00104 	addi	sp,sp,4
 4010a0c:	f800283a 	ret

04010a10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 4010a10:	defffd04 	addi	sp,sp,-12
 4010a14:	df000215 	stw	fp,8(sp)
 4010a18:	df000204 	addi	fp,sp,8
 4010a1c:	e13ffe15 	stw	r4,-8(fp)
 4010a20:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
 4010a24:	00000306 	br	4010a34 <chk_chr+0x24>
 4010a28:	e0bffe17 	ldw	r2,-8(fp)
 4010a2c:	10800044 	addi	r2,r2,1
 4010a30:	e0bffe15 	stw	r2,-8(fp)
 4010a34:	e0bffe17 	ldw	r2,-8(fp)
 4010a38:	10800003 	ldbu	r2,0(r2)
 4010a3c:	10803fcc 	andi	r2,r2,255
 4010a40:	1080201c 	xori	r2,r2,128
 4010a44:	10bfe004 	addi	r2,r2,-128
 4010a48:	1005003a 	cmpeq	r2,r2,zero
 4010a4c:	1000071e 	bne	r2,zero,4010a6c <chk_chr+0x5c>
 4010a50:	e0bffe17 	ldw	r2,-8(fp)
 4010a54:	10800003 	ldbu	r2,0(r2)
 4010a58:	10c03fcc 	andi	r3,r2,255
 4010a5c:	18c0201c 	xori	r3,r3,128
 4010a60:	18ffe004 	addi	r3,r3,-128
 4010a64:	e0bfff17 	ldw	r2,-4(fp)
 4010a68:	18bfef1e 	bne	r3,r2,4010a28 <chk_chr+0x18>
   return *str;
 4010a6c:	e0bffe17 	ldw	r2,-8(fp)
 4010a70:	10800003 	ldbu	r2,0(r2)
 4010a74:	10803fcc 	andi	r2,r2,255
 4010a78:	1080201c 	xori	r2,r2,128
 4010a7c:	10bfe004 	addi	r2,r2,-128
}
 4010a80:	e037883a 	mov	sp,fp
 4010a84:	df000017 	ldw	fp,0(sp)
 4010a88:	dec00104 	addi	sp,sp,4
 4010a8c:	f800283a 	ret

04010a90 <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   FFS_U32 sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
 4010a90:	defffa04 	addi	sp,sp,-24
 4010a94:	dfc00515 	stw	ra,20(sp)
 4010a98:	df000415 	stw	fp,16(sp)
 4010a9c:	df000404 	addi	fp,sp,16
 4010aa0:	e13ffd15 	stw	r4,-12(fp)
 4010aa4:	e17ffe15 	stw	r5,-8(fp)
   FFS_U32 wsect;


   wsect = fs->winsect;
 4010aa8:	e0bffd17 	ldw	r2,-12(fp)
 4010aac:	10800817 	ldw	r2,32(r2)
 4010ab0:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
 4010ab4:	e0fffc17 	ldw	r3,-16(fp)
 4010ab8:	e0bffe17 	ldw	r2,-8(fp)
 4010abc:	18801326 	beq	r3,r2,4010b0c <move_window+0x7c>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
 4010ac0:	e0bffe17 	ldw	r2,-8(fp)
 4010ac4:	1005003a 	cmpeq	r2,r2,zero
 4010ac8:	1000101e 	bne	r2,zero,4010b0c <move_window+0x7c>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 4010acc:	e0bffd17 	ldw	r2,-12(fp)
 4010ad0:	10800043 	ldbu	r2,1(r2)
 4010ad4:	11003fcc 	andi	r4,r2,255
 4010ad8:	e0bffd17 	ldw	r2,-12(fp)
 4010adc:	11400904 	addi	r5,r2,36
 4010ae0:	e1bffe17 	ldw	r6,-8(fp)
 4010ae4:	01c00044 	movi	r7,1
 4010ae8:	4013fcc0 	call	4013fcc <ffs_DiskIORead>
 4010aec:	1005003a 	cmpeq	r2,r2,zero
 4010af0:	1000031e 	bne	r2,zero,4010b00 <move_window+0x70>
            return FR_DISK_ERR;
 4010af4:	00800044 	movi	r2,1
 4010af8:	e0bfff15 	stw	r2,-4(fp)
 4010afc:	00000406 	br	4010b10 <move_window+0x80>
         fs->winsect = sector;
 4010b00:	e0fffd17 	ldw	r3,-12(fp)
 4010b04:	e0bffe17 	ldw	r2,-8(fp)
 4010b08:	18800815 	stw	r2,32(r3)
      }
   }

   return FR_OK;
 4010b0c:	e03fff15 	stw	zero,-4(fp)
 4010b10:	e0bfff17 	ldw	r2,-4(fp)
}
 4010b14:	e037883a 	mov	sp,fp
 4010b18:	dfc00117 	ldw	ra,4(sp)
 4010b1c:	df000017 	ldw	fp,0(sp)
 4010b20:	dec00204 	addi	sp,sp,8
 4010b24:	f800283a 	ret

04010b28 <clust2sect>:

FFS_U32 clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   FFS_U32 clst     /* Cluster# to be converted */
)
{
 4010b28:	defffb04 	addi	sp,sp,-20
 4010b2c:	dfc00415 	stw	ra,16(sp)
 4010b30:	df000315 	stw	fp,12(sp)
 4010b34:	df000304 	addi	fp,sp,12
 4010b38:	e13ffd15 	stw	r4,-12(fp)
 4010b3c:	e17ffe15 	stw	r5,-8(fp)
   clst -= 2;
 4010b40:	e0bffe17 	ldw	r2,-8(fp)
 4010b44:	10bfff84 	addi	r2,r2,-2
 4010b48:	e0bffe15 	stw	r2,-8(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
 4010b4c:	e0bffd17 	ldw	r2,-12(fp)
 4010b50:	10800317 	ldw	r2,12(r2)
 4010b54:	10ffff84 	addi	r3,r2,-2
 4010b58:	e0bffe17 	ldw	r2,-8(fp)
 4010b5c:	10c00236 	bltu	r2,r3,4010b68 <clust2sect+0x40>
 4010b60:	e03fff15 	stw	zero,-4(fp)
 4010b64:	00000a06 	br	4010b90 <clust2sect+0x68>
   return clst * fs->csize + fs->database;
 4010b68:	e0bffd17 	ldw	r2,-12(fp)
 4010b6c:	10800083 	ldbu	r2,2(r2)
 4010b70:	11003fcc 	andi	r4,r2,255
 4010b74:	e17ffe17 	ldw	r5,-8(fp)
 4010b78:	4014cf40 	call	4014cf4 <__mulsi3>
 4010b7c:	1007883a 	mov	r3,r2
 4010b80:	e0bffd17 	ldw	r2,-12(fp)
 4010b84:	10800717 	ldw	r2,28(r2)
 4010b88:	1887883a 	add	r3,r3,r2
 4010b8c:	e0ffff15 	stw	r3,-4(fp)
 4010b90:	e0bfff17 	ldw	r2,-4(fp)
}
 4010b94:	e037883a 	mov	sp,fp
 4010b98:	dfc00117 	ldw	ra,4(sp)
 4010b9c:	df000017 	ldw	fp,0(sp)
 4010ba0:	dec00204 	addi	sp,sp,8
 4010ba4:	f800283a 	ret

04010ba8 <get_fat>:

FFS_U32 get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   FFS_U32 clst  /* Cluster# to get the link information */
)
{
 4010ba8:	defff604 	addi	sp,sp,-40
 4010bac:	dfc00915 	stw	ra,36(sp)
 4010bb0:	df000815 	stw	fp,32(sp)
 4010bb4:	df000804 	addi	fp,sp,32
 4010bb8:	e13ffb15 	stw	r4,-20(fp)
 4010bbc:	e17ffc15 	stw	r5,-16(fp)
   FFS_U32 wc, bc;
   FFS_U8 *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
 4010bc0:	e0bffc17 	ldw	r2,-16(fp)
 4010bc4:	108000b0 	cmpltui	r2,r2,2
 4010bc8:	1000041e 	bne	r2,zero,4010bdc <get_fat+0x34>
 4010bcc:	e0bffb17 	ldw	r2,-20(fp)
 4010bd0:	10c00317 	ldw	r3,12(r2)
 4010bd4:	e0bffc17 	ldw	r2,-16(fp)
 4010bd8:	10c00336 	bltu	r2,r3,4010be8 <get_fat+0x40>
      return 1;
 4010bdc:	00800044 	movi	r2,1
 4010be0:	e0bfff15 	stw	r2,-4(fp)
 4010be4:	00009706 	br	4010e44 <get_fat+0x29c>

   switch (fs->fs_type) {
 4010be8:	e0bffb17 	ldw	r2,-20(fp)
 4010bec:	10800003 	ldbu	r2,0(r2)
 4010bf0:	10803fcc 	andi	r2,r2,255
 4010bf4:	e0bffe15 	stw	r2,-8(fp)
 4010bf8:	e0fffe17 	ldw	r3,-8(fp)
 4010bfc:	188000a0 	cmpeqi	r2,r3,2
 4010c00:	1000461e 	bne	r2,zero,4010d1c <get_fat+0x174>
 4010c04:	e0fffe17 	ldw	r3,-8(fp)
 4010c08:	188000e0 	cmpeqi	r2,r3,3
 4010c0c:	1000601e 	bne	r2,zero,4010d90 <get_fat+0x1e8>
 4010c10:	e0fffe17 	ldw	r3,-8(fp)
 4010c14:	18800060 	cmpeqi	r2,r3,1
 4010c18:	1000011e 	bne	r2,zero,4010c20 <get_fat+0x78>
 4010c1c:	00008706 	br	4010e3c <get_fat+0x294>
   case FS_FAT12 :
      bc = (FFS_U32)clst; bc += bc / 2;
 4010c20:	e0bffc17 	ldw	r2,-16(fp)
 4010c24:	e0bff915 	stw	r2,-28(fp)
 4010c28:	e0bff917 	ldw	r2,-28(fp)
 4010c2c:	1006d07a 	srli	r3,r2,1
 4010c30:	e0bff917 	ldw	r2,-28(fp)
 4010c34:	10c5883a 	add	r2,r2,r3
 4010c38:	e0bff915 	stw	r2,-28(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 4010c3c:	e0bffb17 	ldw	r2,-20(fp)
 4010c40:	10c00517 	ldw	r3,20(r2)
 4010c44:	e0bff917 	ldw	r2,-28(fp)
 4010c48:	1004d27a 	srli	r2,r2,9
 4010c4c:	188b883a 	add	r5,r3,r2
 4010c50:	e13ffb17 	ldw	r4,-20(fp)
 4010c54:	4010a900 	call	4010a90 <move_window>
 4010c58:	1004c03a 	cmpne	r2,r2,zero
 4010c5c:	1000771e 	bne	r2,zero,4010e3c <get_fat+0x294>
      wc = fs->win[bc % SS(fs)]; bc++;
 4010c60:	e0bff917 	ldw	r2,-28(fp)
 4010c64:	10c07fcc 	andi	r3,r2,511
 4010c68:	e0bffb17 	ldw	r2,-20(fp)
 4010c6c:	1885883a 	add	r2,r3,r2
 4010c70:	10800904 	addi	r2,r2,36
 4010c74:	10800003 	ldbu	r2,0(r2)
 4010c78:	10803fcc 	andi	r2,r2,255
 4010c7c:	e0bffa15 	stw	r2,-24(fp)
 4010c80:	e0bff917 	ldw	r2,-28(fp)
 4010c84:	10800044 	addi	r2,r2,1
 4010c88:	e0bff915 	stw	r2,-28(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 4010c8c:	e0bffb17 	ldw	r2,-20(fp)
 4010c90:	10c00517 	ldw	r3,20(r2)
 4010c94:	e0bff917 	ldw	r2,-28(fp)
 4010c98:	1004d27a 	srli	r2,r2,9
 4010c9c:	188b883a 	add	r5,r3,r2
 4010ca0:	e13ffb17 	ldw	r4,-20(fp)
 4010ca4:	4010a900 	call	4010a90 <move_window>
 4010ca8:	1004c03a 	cmpne	r2,r2,zero
 4010cac:	1000631e 	bne	r2,zero,4010e3c <get_fat+0x294>
      wc |= fs->win[bc % SS(fs)] << 8;
 4010cb0:	e0bff917 	ldw	r2,-28(fp)
 4010cb4:	10c07fcc 	andi	r3,r2,511
 4010cb8:	e0bffb17 	ldw	r2,-20(fp)
 4010cbc:	1885883a 	add	r2,r3,r2
 4010cc0:	10800904 	addi	r2,r2,36
 4010cc4:	10800003 	ldbu	r2,0(r2)
 4010cc8:	10803fcc 	andi	r2,r2,255
 4010ccc:	1004923a 	slli	r2,r2,8
 4010cd0:	1007883a 	mov	r3,r2
 4010cd4:	e0bffa17 	ldw	r2,-24(fp)
 4010cd8:	10c4b03a 	or	r2,r2,r3
 4010cdc:	e0bffa15 	stw	r2,-24(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 4010ce0:	e0bffc17 	ldw	r2,-16(fp)
 4010ce4:	1080004c 	andi	r2,r2,1
 4010ce8:	10803fcc 	andi	r2,r2,255
 4010cec:	1005003a 	cmpeq	r2,r2,zero
 4010cf0:	1000041e 	bne	r2,zero,4010d04 <get_fat+0x15c>
 4010cf4:	e0bffa17 	ldw	r2,-24(fp)
 4010cf8:	1004d13a 	srli	r2,r2,4
 4010cfc:	e0bffd15 	stw	r2,-12(fp)
 4010d00:	00000306 	br	4010d10 <get_fat+0x168>
 4010d04:	e0bffa17 	ldw	r2,-24(fp)
 4010d08:	1083ffcc 	andi	r2,r2,4095
 4010d0c:	e0bffd15 	stw	r2,-12(fp)
 4010d10:	e0bffd17 	ldw	r2,-12(fp)
 4010d14:	e0bfff15 	stw	r2,-4(fp)
 4010d18:	00004a06 	br	4010e44 <get_fat+0x29c>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 4010d1c:	e0bffb17 	ldw	r2,-20(fp)
 4010d20:	10c00517 	ldw	r3,20(r2)
 4010d24:	e0bffc17 	ldw	r2,-16(fp)
 4010d28:	1004d23a 	srli	r2,r2,8
 4010d2c:	188b883a 	add	r5,r3,r2
 4010d30:	e13ffb17 	ldw	r4,-20(fp)
 4010d34:	4010a900 	call	4010a90 <move_window>
 4010d38:	1004c03a 	cmpne	r2,r2,zero
 4010d3c:	10003f1e 	bne	r2,zero,4010e3c <get_fat+0x294>
      p = &fs->win[clst * 2 % SS(fs)];
 4010d40:	e0bffb17 	ldw	r2,-20(fp)
 4010d44:	10c00904 	addi	r3,r2,36
 4010d48:	e0bffc17 	ldw	r2,-16(fp)
 4010d4c:	1085883a 	add	r2,r2,r2
 4010d50:	10807fcc 	andi	r2,r2,511
 4010d54:	1885883a 	add	r2,r3,r2
 4010d58:	e0bff815 	stw	r2,-32(fp)
      return LD_WORD(p);
 4010d5c:	e0bff817 	ldw	r2,-32(fp)
 4010d60:	10800044 	addi	r2,r2,1
 4010d64:	10800003 	ldbu	r2,0(r2)
 4010d68:	10803fcc 	andi	r2,r2,255
 4010d6c:	1004923a 	slli	r2,r2,8
 4010d70:	1007883a 	mov	r3,r2
 4010d74:	e0bff817 	ldw	r2,-32(fp)
 4010d78:	10800003 	ldbu	r2,0(r2)
 4010d7c:	10803fcc 	andi	r2,r2,255
 4010d80:	1884b03a 	or	r2,r3,r2
 4010d84:	10bfffcc 	andi	r2,r2,65535
 4010d88:	e0bfff15 	stw	r2,-4(fp)
 4010d8c:	00002d06 	br	4010e44 <get_fat+0x29c>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 4010d90:	e0bffb17 	ldw	r2,-20(fp)
 4010d94:	10c00517 	ldw	r3,20(r2)
 4010d98:	e0bffc17 	ldw	r2,-16(fp)
 4010d9c:	1004d1fa 	srli	r2,r2,7
 4010da0:	188b883a 	add	r5,r3,r2
 4010da4:	e13ffb17 	ldw	r4,-20(fp)
 4010da8:	4010a900 	call	4010a90 <move_window>
 4010dac:	1004c03a 	cmpne	r2,r2,zero
 4010db0:	1000221e 	bne	r2,zero,4010e3c <get_fat+0x294>
      p = &fs->win[clst * 4 % SS(fs)];
 4010db4:	e0bffb17 	ldw	r2,-20(fp)
 4010db8:	10c00904 	addi	r3,r2,36
 4010dbc:	e0bffc17 	ldw	r2,-16(fp)
 4010dc0:	1085883a 	add	r2,r2,r2
 4010dc4:	1085883a 	add	r2,r2,r2
 4010dc8:	10807fcc 	andi	r2,r2,511
 4010dcc:	1885883a 	add	r2,r3,r2
 4010dd0:	e0bff815 	stw	r2,-32(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
 4010dd4:	e0bff817 	ldw	r2,-32(fp)
 4010dd8:	108000c4 	addi	r2,r2,3
 4010ddc:	10800003 	ldbu	r2,0(r2)
 4010de0:	10803fcc 	andi	r2,r2,255
 4010de4:	1006963a 	slli	r3,r2,24
 4010de8:	e0bff817 	ldw	r2,-32(fp)
 4010dec:	10800084 	addi	r2,r2,2
 4010df0:	10800003 	ldbu	r2,0(r2)
 4010df4:	10803fcc 	andi	r2,r2,255
 4010df8:	1004943a 	slli	r2,r2,16
 4010dfc:	1886b03a 	or	r3,r3,r2
 4010e00:	e0bff817 	ldw	r2,-32(fp)
 4010e04:	10800044 	addi	r2,r2,1
 4010e08:	10800003 	ldbu	r2,0(r2)
 4010e0c:	10803fcc 	andi	r2,r2,255
 4010e10:	1004923a 	slli	r2,r2,8
 4010e14:	1886b03a 	or	r3,r3,r2
 4010e18:	e0bff817 	ldw	r2,-32(fp)
 4010e1c:	10800003 	ldbu	r2,0(r2)
 4010e20:	10803fcc 	andi	r2,r2,255
 4010e24:	1886b03a 	or	r3,r3,r2
 4010e28:	00840034 	movhi	r2,4096
 4010e2c:	10bfffc4 	addi	r2,r2,-1
 4010e30:	1886703a 	and	r3,r3,r2
 4010e34:	e0ffff15 	stw	r3,-4(fp)
 4010e38:	00000206 	br	4010e44 <get_fat+0x29c>
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
 4010e3c:	00ffffc4 	movi	r3,-1
 4010e40:	e0ffff15 	stw	r3,-4(fp)
 4010e44:	e0bfff17 	ldw	r2,-4(fp)
}
 4010e48:	e037883a 	mov	sp,fp
 4010e4c:	dfc00117 	ldw	ra,4(sp)
 4010e50:	df000017 	ldw	fp,0(sp)
 4010e54:	dec00204 	addi	sp,sp,8
 4010e58:	f800283a 	ret

04010e5c <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   FFS_U16 idx    /* Directory index number */
)
{
 4010e5c:	defff904 	addi	sp,sp,-28
 4010e60:	dfc00615 	stw	ra,24(sp)
 4010e64:	df000515 	stw	fp,20(sp)
 4010e68:	df000504 	addi	fp,sp,20
 4010e6c:	e13ffd15 	stw	r4,-12(fp)
 4010e70:	e17ffe0d 	sth	r5,-8(fp)
   FFS_U32 clst;
   FFS_U16 ic;


   dj->index = idx;
 4010e74:	e0fffd17 	ldw	r3,-12(fp)
 4010e78:	e0bffe0b 	ldhu	r2,-8(fp)
 4010e7c:	1880018d 	sth	r2,6(r3)
   clst = dj->sclust;
 4010e80:	e0bffd17 	ldw	r2,-12(fp)
 4010e84:	10800217 	ldw	r2,8(r2)
 4010e88:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
 4010e8c:	e0bffc17 	ldw	r2,-16(fp)
 4010e90:	10800060 	cmpeqi	r2,r2,1
 4010e94:	1000051e 	bne	r2,zero,4010eac <dir_sdi+0x50>
 4010e98:	e0bffd17 	ldw	r2,-12(fp)
 4010e9c:	10800017 	ldw	r2,0(r2)
 4010ea0:	10c00317 	ldw	r3,12(r2)
 4010ea4:	e0bffc17 	ldw	r2,-16(fp)
 4010ea8:	10c00336 	bltu	r2,r3,4010eb8 <dir_sdi+0x5c>
      return FR_INT_ERR;
 4010eac:	00800084 	movi	r2,2
 4010eb0:	e0bfff15 	stw	r2,-4(fp)
 4010eb4:	00006206 	br	4011040 <dir_sdi+0x1e4>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
 4010eb8:	e0bffc17 	ldw	r2,-16(fp)
 4010ebc:	1004c03a 	cmpne	r2,r2,zero
 4010ec0:	10000a1e 	bne	r2,zero,4010eec <dir_sdi+0x90>
 4010ec4:	e0bffd17 	ldw	r2,-12(fp)
 4010ec8:	10800017 	ldw	r2,0(r2)
 4010ecc:	10800003 	ldbu	r2,0(r2)
 4010ed0:	10803fcc 	andi	r2,r2,255
 4010ed4:	108000d8 	cmpnei	r2,r2,3
 4010ed8:	1000041e 	bne	r2,zero,4010eec <dir_sdi+0x90>
      clst = dj->fs->dirbase;
 4010edc:	e0bffd17 	ldw	r2,-12(fp)
 4010ee0:	10800017 	ldw	r2,0(r2)
 4010ee4:	10800617 	ldw	r2,24(r2)
 4010ee8:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
 4010eec:	e0bffc17 	ldw	r2,-16(fp)
 4010ef0:	1004c03a 	cmpne	r2,r2,zero
 4010ef4:	1000161e 	bne	r2,zero,4010f50 <dir_sdi+0xf4>
      dj->clust = clst;
 4010ef8:	e0fffd17 	ldw	r3,-12(fp)
 4010efc:	e0bffc17 	ldw	r2,-16(fp)
 4010f00:	18800315 	stw	r2,12(r3)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
 4010f04:	e0bffd17 	ldw	r2,-12(fp)
 4010f08:	10800017 	ldw	r2,0(r2)
 4010f0c:	1080020b 	ldhu	r2,8(r2)
 4010f10:	10ffffcc 	andi	r3,r2,65535
 4010f14:	e0bffe0b 	ldhu	r2,-8(fp)
 4010f18:	10c00336 	bltu	r2,r3,4010f28 <dir_sdi+0xcc>
         return FR_INT_ERR;
 4010f1c:	00800084 	movi	r2,2
 4010f20:	e0bfff15 	stw	r2,-4(fp)
 4010f24:	00004606 	br	4011040 <dir_sdi+0x1e4>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
 4010f28:	e0bffd17 	ldw	r2,-12(fp)
 4010f2c:	10800017 	ldw	r2,0(r2)
 4010f30:	10c00617 	ldw	r3,24(r2)
 4010f34:	e0bffe0b 	ldhu	r2,-8(fp)
 4010f38:	1004d13a 	srli	r2,r2,4
 4010f3c:	10bfffcc 	andi	r2,r2,65535
 4010f40:	1887883a 	add	r3,r3,r2
 4010f44:	e0bffd17 	ldw	r2,-12(fp)
 4010f48:	10c00415 	stw	r3,16(r2)
 4010f4c:	00003206 	br	4011018 <dir_sdi+0x1bc>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
 4010f50:	e0bffd17 	ldw	r2,-12(fp)
 4010f54:	10800017 	ldw	r2,0(r2)
 4010f58:	10800083 	ldbu	r2,2(r2)
 4010f5c:	10803fcc 	andi	r2,r2,255
 4010f60:	1004913a 	slli	r2,r2,4
 4010f64:	e0bffb0d 	sth	r2,-20(fp)
      while (idx >= ic) {  /* Follow cluster chain */
 4010f68:	00001a06 	br	4010fd4 <dir_sdi+0x178>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
 4010f6c:	e0bffd17 	ldw	r2,-12(fp)
 4010f70:	11000017 	ldw	r4,0(r2)
 4010f74:	e17ffc17 	ldw	r5,-16(fp)
 4010f78:	4010ba80 	call	4010ba8 <get_fat>
 4010f7c:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
 4010f80:	e0bffc17 	ldw	r2,-16(fp)
 4010f84:	10bfffd8 	cmpnei	r2,r2,-1
 4010f88:	1000031e 	bne	r2,zero,4010f98 <dir_sdi+0x13c>
 4010f8c:	00800044 	movi	r2,1
 4010f90:	e0bfff15 	stw	r2,-4(fp)
 4010f94:	00002a06 	br	4011040 <dir_sdi+0x1e4>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
 4010f98:	e0bffc17 	ldw	r2,-16(fp)
 4010f9c:	108000b0 	cmpltui	r2,r2,2
 4010fa0:	1000051e 	bne	r2,zero,4010fb8 <dir_sdi+0x15c>
 4010fa4:	e0bffd17 	ldw	r2,-12(fp)
 4010fa8:	10800017 	ldw	r2,0(r2)
 4010fac:	10c00317 	ldw	r3,12(r2)
 4010fb0:	e0bffc17 	ldw	r2,-16(fp)
 4010fb4:	10c00336 	bltu	r2,r3,4010fc4 <dir_sdi+0x168>
            return FR_INT_ERR;
 4010fb8:	00800084 	movi	r2,2
 4010fbc:	e0bfff15 	stw	r2,-4(fp)
 4010fc0:	00001f06 	br	4011040 <dir_sdi+0x1e4>
         idx -= ic;
 4010fc4:	e0bffe0b 	ldhu	r2,-8(fp)
 4010fc8:	e0fffb0b 	ldhu	r3,-20(fp)
 4010fcc:	10c5c83a 	sub	r2,r2,r3
 4010fd0:	e0bffe0d 	sth	r2,-8(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
 4010fd4:	e0fffe0b 	ldhu	r3,-8(fp)
 4010fd8:	e0bffb0b 	ldhu	r2,-20(fp)
 4010fdc:	18bfe32e 	bgeu	r3,r2,4010f6c <dir_sdi+0x110>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
 4010fe0:	e0fffd17 	ldw	r3,-12(fp)
 4010fe4:	e0bffc17 	ldw	r2,-16(fp)
 4010fe8:	18800315 	stw	r2,12(r3)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
 4010fec:	e0bffd17 	ldw	r2,-12(fp)
 4010ff0:	11000017 	ldw	r4,0(r2)
 4010ff4:	e17ffc17 	ldw	r5,-16(fp)
 4010ff8:	4010b280 	call	4010b28 <clust2sect>
 4010ffc:	1007883a 	mov	r3,r2
 4011000:	e0bffe0b 	ldhu	r2,-8(fp)
 4011004:	1004d13a 	srli	r2,r2,4
 4011008:	10bfffcc 	andi	r2,r2,65535
 401100c:	1887883a 	add	r3,r3,r2
 4011010:	e0bffd17 	ldw	r2,-12(fp)
 4011014:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
 4011018:	e0bffd17 	ldw	r2,-12(fp)
 401101c:	10800017 	ldw	r2,0(r2)
 4011020:	10c00904 	addi	r3,r2,36
 4011024:	e0bffe0b 	ldhu	r2,-8(fp)
 4011028:	108003cc 	andi	r2,r2,15
 401102c:	1004917a 	slli	r2,r2,5
 4011030:	1887883a 	add	r3,r3,r2
 4011034:	e0bffd17 	ldw	r2,-12(fp)
 4011038:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
 401103c:	e03fff15 	stw	zero,-4(fp)
 4011040:	e0bfff17 	ldw	r2,-4(fp)
}
 4011044:	e037883a 	mov	sp,fp
 4011048:	dfc00117 	ldw	ra,4(sp)
 401104c:	df000017 	ldw	fp,0(sp)
 4011050:	dec00204 	addi	sp,sp,8
 4011054:	f800283a 	ret

04011058 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 4011058:	defff904 	addi	sp,sp,-28
 401105c:	dfc00615 	stw	ra,24(sp)
 4011060:	df000515 	stw	fp,20(sp)
 4011064:	df000504 	addi	fp,sp,20
 4011068:	e13ffd15 	stw	r4,-12(fp)
 401106c:	e17ffe15 	stw	r5,-8(fp)
   FFS_U32 clst;
   FFS_U16 i;


//   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
 4011070:	e0bffd17 	ldw	r2,-12(fp)
 4011074:	1080018b 	ldhu	r2,6(r2)
 4011078:	10800044 	addi	r2,r2,1
 401107c:	e0bffb0d 	sth	r2,-20(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
 4011080:	e0bffb0b 	ldhu	r2,-20(fp)
 4011084:	1005003a 	cmpeq	r2,r2,zero
 4011088:	1000041e 	bne	r2,zero,401109c <dir_next+0x44>
 401108c:	e0bffd17 	ldw	r2,-12(fp)
 4011090:	10800417 	ldw	r2,16(r2)
 4011094:	1004c03a 	cmpne	r2,r2,zero
 4011098:	1000031e 	bne	r2,zero,40110a8 <dir_next+0x50>
      return FR_NO_FILE;
 401109c:	00800104 	movi	r2,4
 40110a0:	e0bfff15 	stw	r2,-4(fp)
 40110a4:	00005206 	br	40111f0 <dir_next+0x198>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
 40110a8:	e0bffb0b 	ldhu	r2,-20(fp)
 40110ac:	108003cc 	andi	r2,r2,15
 40110b0:	1004c03a 	cmpne	r2,r2,zero
 40110b4:	1000411e 	bne	r2,zero,40111bc <dir_next+0x164>
      dj->sect++;             /* Next sector */
 40110b8:	e0bffd17 	ldw	r2,-12(fp)
 40110bc:	10800417 	ldw	r2,16(r2)
 40110c0:	10c00044 	addi	r3,r2,1
 40110c4:	e0bffd17 	ldw	r2,-12(fp)
 40110c8:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
 40110cc:	e0bffd17 	ldw	r2,-12(fp)
 40110d0:	10800317 	ldw	r2,12(r2)
 40110d4:	1004c03a 	cmpne	r2,r2,zero
 40110d8:	1000091e 	bne	r2,zero,4011100 <dir_next+0xa8>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
 40110dc:	e0bffd17 	ldw	r2,-12(fp)
 40110e0:	10800017 	ldw	r2,0(r2)
 40110e4:	1080020b 	ldhu	r2,8(r2)
 40110e8:	10ffffcc 	andi	r3,r2,65535
 40110ec:	e0bffb0b 	ldhu	r2,-20(fp)
 40110f0:	10c03236 	bltu	r2,r3,40111bc <dir_next+0x164>
            return FR_NO_FILE;
 40110f4:	00800104 	movi	r2,4
 40110f8:	e0bfff15 	stw	r2,-4(fp)
 40110fc:	00003c06 	br	40111f0 <dir_next+0x198>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
 4011100:	e0bffb0b 	ldhu	r2,-20(fp)
 4011104:	1004d13a 	srli	r2,r2,4
 4011108:	10ffffcc 	andi	r3,r2,65535
 401110c:	e0bffd17 	ldw	r2,-12(fp)
 4011110:	10800017 	ldw	r2,0(r2)
 4011114:	10800083 	ldbu	r2,2(r2)
 4011118:	10803fcc 	andi	r2,r2,255
 401111c:	10bfffc4 	addi	r2,r2,-1
 4011120:	1884703a 	and	r2,r3,r2
 4011124:	1004c03a 	cmpne	r2,r2,zero
 4011128:	1000241e 	bne	r2,zero,40111bc <dir_next+0x164>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
 401112c:	e0bffd17 	ldw	r2,-12(fp)
 4011130:	11000017 	ldw	r4,0(r2)
 4011134:	e0bffd17 	ldw	r2,-12(fp)
 4011138:	11400317 	ldw	r5,12(r2)
 401113c:	4010ba80 	call	4010ba8 <get_fat>
 4011140:	e0bffc15 	stw	r2,-16(fp)
            if (clst <= 1) return FR_INT_ERR;
 4011144:	e0bffc17 	ldw	r2,-16(fp)
 4011148:	108000a8 	cmpgeui	r2,r2,2
 401114c:	1000031e 	bne	r2,zero,401115c <dir_next+0x104>
 4011150:	00800084 	movi	r2,2
 4011154:	e0bfff15 	stw	r2,-4(fp)
 4011158:	00002506 	br	40111f0 <dir_next+0x198>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 401115c:	e0bffc17 	ldw	r2,-16(fp)
 4011160:	10bfffd8 	cmpnei	r2,r2,-1
 4011164:	1000031e 	bne	r2,zero,4011174 <dir_next+0x11c>
 4011168:	00800044 	movi	r2,1
 401116c:	e0bfff15 	stw	r2,-4(fp)
 4011170:	00001f06 	br	40111f0 <dir_next+0x198>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
 4011174:	e0bffd17 	ldw	r2,-12(fp)
 4011178:	10800017 	ldw	r2,0(r2)
 401117c:	10c00317 	ldw	r3,12(r2)
 4011180:	e0bffc17 	ldw	r2,-16(fp)
 4011184:	10c00336 	bltu	r2,r3,4011194 <dir_next+0x13c>
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
#else
               return FR_NO_FILE;         /* Report EOT */
 4011188:	00800104 	movi	r2,4
 401118c:	e0bfff15 	stw	r2,-4(fp)
 4011190:	00001706 	br	40111f0 <dir_next+0x198>
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
 4011194:	e0fffd17 	ldw	r3,-12(fp)
 4011198:	e0bffc17 	ldw	r2,-16(fp)
 401119c:	18800315 	stw	r2,12(r3)
            dj->sect = clust2sect(dj->fs, clst);
 40111a0:	e0bffd17 	ldw	r2,-12(fp)
 40111a4:	11000017 	ldw	r4,0(r2)
 40111a8:	e17ffc17 	ldw	r5,-16(fp)
 40111ac:	4010b280 	call	4010b28 <clust2sect>
 40111b0:	1007883a 	mov	r3,r2
 40111b4:	e0bffd17 	ldw	r2,-12(fp)
 40111b8:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
 40111bc:	e0fffd17 	ldw	r3,-12(fp)
 40111c0:	e0bffb0b 	ldhu	r2,-20(fp)
 40111c4:	1880018d 	sth	r2,6(r3)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 40111c8:	e0bffd17 	ldw	r2,-12(fp)
 40111cc:	10800017 	ldw	r2,0(r2)
 40111d0:	10c00904 	addi	r3,r2,36
 40111d4:	e0bffb0b 	ldhu	r2,-20(fp)
 40111d8:	108003cc 	andi	r2,r2,15
 40111dc:	1004917a 	slli	r2,r2,5
 40111e0:	1887883a 	add	r3,r3,r2
 40111e4:	e0bffd17 	ldw	r2,-12(fp)
 40111e8:	10c00515 	stw	r3,20(r2)

   return FR_OK;
 40111ec:	e03fff15 	stw	zero,-4(fp)
 40111f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40111f4:	e037883a 	mov	sp,fp
 40111f8:	dfc00117 	ldw	ra,4(sp)
 40111fc:	df000017 	ldw	fp,0(sp)
 4011200:	dec00204 	addi	sp,sp,8
 4011204:	f800283a 	ret

04011208 <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
 4011208:	defff904 	addi	sp,sp,-28
 401120c:	dfc00615 	stw	ra,24(sp)
 4011210:	df000515 	stw	fp,20(sp)
 4011214:	df000504 	addi	fp,sp,20
 4011218:	e13ffe15 	stw	r4,-8(fp)
   FFS_U8 c, *dir;
#if _USE_LFN
   FFS_U8 a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
 401121c:	e13ffe17 	ldw	r4,-8(fp)
 4011220:	000b883a 	mov	r5,zero
 4011224:	4010e5c0 	call	4010e5c <dir_sdi>
 4011228:	e0bffd15 	stw	r2,-12(fp)
   if (res != FR_OK) return res;
 401122c:	e0bffd17 	ldw	r2,-12(fp)
 4011230:	1005003a 	cmpeq	r2,r2,zero
 4011234:	1000031e 	bne	r2,zero,4011244 <dir_find+0x3c>
 4011238:	e0bffd17 	ldw	r2,-12(fp)
 401123c:	e0bfff15 	stw	r2,-4(fp)
 4011240:	00002c06 	br	40112f4 <dir_find+0xec>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
 4011244:	e0bffe17 	ldw	r2,-8(fp)
 4011248:	11000017 	ldw	r4,0(r2)
 401124c:	e0bffe17 	ldw	r2,-8(fp)
 4011250:	11400417 	ldw	r5,16(r2)
 4011254:	4010a900 	call	4010a90 <move_window>
 4011258:	e0bffd15 	stw	r2,-12(fp)
      if (res != FR_OK) break;
 401125c:	e0bffd17 	ldw	r2,-12(fp)
 4011260:	1004c03a 	cmpne	r2,r2,zero
 4011264:	1000211e 	bne	r2,zero,40112ec <dir_find+0xe4>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
 4011268:	e0bffe17 	ldw	r2,-8(fp)
 401126c:	10800517 	ldw	r2,20(r2)
 4011270:	e0bffb15 	stw	r2,-20(fp)
      c = dir[DIR_Name];
 4011274:	e0bffb17 	ldw	r2,-20(fp)
 4011278:	10800003 	ldbu	r2,0(r2)
 401127c:	e0bffc05 	stb	r2,-16(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
 4011280:	e0bffc03 	ldbu	r2,-16(fp)
 4011284:	1004c03a 	cmpne	r2,r2,zero
 4011288:	1000031e 	bne	r2,zero,4011298 <dir_find+0x90>
 401128c:	00800104 	movi	r2,4
 4011290:	e0bffd15 	stw	r2,-12(fp)
 4011294:	00001506 	br	40112ec <dir_find+0xe4>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 4011298:	e0bffb17 	ldw	r2,-20(fp)
 401129c:	108002c4 	addi	r2,r2,11
 40112a0:	10800003 	ldbu	r2,0(r2)
 40112a4:	10803fcc 	andi	r2,r2,255
 40112a8:	1080020c 	andi	r2,r2,8
 40112ac:	1004c03a 	cmpne	r2,r2,zero
 40112b0:	1000071e 	bne	r2,zero,40112d0 <dir_find+0xc8>
 40112b4:	e0bffe17 	ldw	r2,-8(fp)
 40112b8:	11400617 	ldw	r5,24(r2)
 40112bc:	e13ffb17 	ldw	r4,-20(fp)
 40112c0:	018002c4 	movi	r6,11
 40112c4:	40109680 	call	4010968 <mem_cmp>
 40112c8:	1005003a 	cmpeq	r2,r2,zero
 40112cc:	1000071e 	bne	r2,zero,40112ec <dir_find+0xe4>
         break;
#endif
      res = dir_next(dj, 0);     /* Next entry */
 40112d0:	e13ffe17 	ldw	r4,-8(fp)
 40112d4:	000b883a 	mov	r5,zero
 40112d8:	40110580 	call	4011058 <dir_next>
 40112dc:	e0bffd15 	stw	r2,-12(fp)
   } while (res == FR_OK);
 40112e0:	e0bffd17 	ldw	r2,-12(fp)
 40112e4:	1005003a 	cmpeq	r2,r2,zero
 40112e8:	103fd61e 	bne	r2,zero,4011244 <dir_find+0x3c>

   return res;
 40112ec:	e0bffd17 	ldw	r2,-12(fp)
 40112f0:	e0bfff15 	stw	r2,-4(fp)
 40112f4:	e0bfff17 	ldw	r2,-4(fp)
}
 40112f8:	e037883a 	mov	sp,fp
 40112fc:	dfc00117 	ldw	ra,4(sp)
 4011300:	df000017 	ldw	fp,0(sp)
 4011304:	dec00204 	addi	sp,sp,8
 4011308:	f800283a 	ret

0401130c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
 401130c:	defffa04 	addi	sp,sp,-24
 4011310:	dfc00515 	stw	ra,20(sp)
 4011314:	df000415 	stw	fp,16(sp)
 4011318:	df000404 	addi	fp,sp,16
 401131c:	e13fff15 	stw	r4,-4(fp)
   FFS_U8 c, *dir;
#if _USE_LFN
   FFS_U8 a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
 4011320:	00800104 	movi	r2,4
 4011324:	e0bffe15 	stw	r2,-8(fp)
   while (dj->sect) {
 4011328:	00002906 	br	40113d0 <dir_read+0xc4>
      res = move_window(dj->fs, dj->sect);
 401132c:	e0bfff17 	ldw	r2,-4(fp)
 4011330:	11000017 	ldw	r4,0(r2)
 4011334:	e0bfff17 	ldw	r2,-4(fp)
 4011338:	11400417 	ldw	r5,16(r2)
 401133c:	4010a900 	call	4010a90 <move_window>
 4011340:	e0bffe15 	stw	r2,-8(fp)
      if (res != FR_OK) break;
 4011344:	e0bffe17 	ldw	r2,-8(fp)
 4011348:	1004c03a 	cmpne	r2,r2,zero
 401134c:	1000241e 	bne	r2,zero,40113e0 <dir_read+0xd4>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
 4011350:	e0bfff17 	ldw	r2,-4(fp)
 4011354:	10800517 	ldw	r2,20(r2)
 4011358:	e0bffc15 	stw	r2,-16(fp)
      c = dir[DIR_Name];
 401135c:	e0bffc17 	ldw	r2,-16(fp)
 4011360:	10800003 	ldbu	r2,0(r2)
 4011364:	e0bffd05 	stb	r2,-12(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
 4011368:	e0bffd03 	ldbu	r2,-12(fp)
 401136c:	1004c03a 	cmpne	r2,r2,zero
 4011370:	1000031e 	bne	r2,zero,4011380 <dir_read+0x74>
 4011374:	00800104 	movi	r2,4
 4011378:	e0bffe15 	stw	r2,-8(fp)
 401137c:	00001806 	br	40113e0 <dir_read+0xd4>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
 4011380:	e0bffd03 	ldbu	r2,-12(fp)
 4011384:	10803960 	cmpeqi	r2,r2,229
 4011388:	10000a1e 	bne	r2,zero,40113b4 <dir_read+0xa8>
 401138c:	e0bffd03 	ldbu	r2,-12(fp)
 4011390:	10800ba0 	cmpeqi	r2,r2,46
 4011394:	1000071e 	bne	r2,zero,40113b4 <dir_read+0xa8>
 4011398:	e0bffc17 	ldw	r2,-16(fp)
 401139c:	108002c4 	addi	r2,r2,11
 40113a0:	10800003 	ldbu	r2,0(r2)
 40113a4:	10803fcc 	andi	r2,r2,255
 40113a8:	1080020c 	andi	r2,r2,8
 40113ac:	1005003a 	cmpeq	r2,r2,zero
 40113b0:	10000b1e 	bne	r2,zero,40113e0 <dir_read+0xd4>
         break;
#endif
      res = dir_next(dj, 0);           /* Next entry */
 40113b4:	e13fff17 	ldw	r4,-4(fp)
 40113b8:	000b883a 	mov	r5,zero
 40113bc:	40110580 	call	4011058 <dir_next>
 40113c0:	e0bffe15 	stw	r2,-8(fp)
      if (res != FR_OK) break;
 40113c4:	e0bffe17 	ldw	r2,-8(fp)
 40113c8:	1004c03a 	cmpne	r2,r2,zero
 40113cc:	1000041e 	bne	r2,zero,40113e0 <dir_read+0xd4>
#if _USE_LFN
   FFS_U8 a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
 40113d0:	e0bfff17 	ldw	r2,-4(fp)
 40113d4:	10800417 	ldw	r2,16(r2)
 40113d8:	1004c03a 	cmpne	r2,r2,zero
 40113dc:	103fd31e 	bne	r2,zero,401132c <dir_read+0x20>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
   }

   if (res != FR_OK) dj->sect = 0;
 40113e0:	e0bffe17 	ldw	r2,-8(fp)
 40113e4:	1005003a 	cmpeq	r2,r2,zero
 40113e8:	1000021e 	bne	r2,zero,40113f4 <dir_read+0xe8>
 40113ec:	e0bfff17 	ldw	r2,-4(fp)
 40113f0:	10000415 	stw	zero,16(r2)

   return res;
 40113f4:	e0bffe17 	ldw	r2,-8(fp)
}
 40113f8:	e037883a 	mov	sp,fp
 40113fc:	dfc00117 	ldw	ra,4(sp)
 4011400:	df000017 	ldw	fp,0(sp)
 4011404:	dec00204 	addi	sp,sp,8
 4011408:	f800283a 	ret

0401140c <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
 401140c:	defff404 	addi	sp,sp,-48
 4011410:	dfc00b15 	stw	ra,44(sp)
 4011414:	df000a15 	stw	fp,40(sp)
 4011418:	df000a04 	addi	fp,sp,40
 401141c:	e13ffc15 	stw	r4,-16(fp)
 4011420:	e17ffd15 	stw	r5,-12(fp)
   FFS_U8 b, c, d, *sfn;
   FFS_U32 ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
 4011424:	e0bffd17 	ldw	r2,-12(fp)
 4011428:	10800017 	ldw	r2,0(r2)
 401142c:	e0bff615 	stw	r2,-40(fp)
 4011430:	00000306 	br	4011440 <create_name+0x34>
 4011434:	e0bff617 	ldw	r2,-40(fp)
 4011438:	10800044 	addi	r2,r2,1
 401143c:	e0bff615 	stw	r2,-40(fp)
 4011440:	e0bff617 	ldw	r2,-40(fp)
 4011444:	10800003 	ldbu	r2,0(r2)
 4011448:	10803fcc 	andi	r2,r2,255
 401144c:	1080201c 	xori	r2,r2,128
 4011450:	10bfe004 	addi	r2,r2,-128
 4011454:	10800be0 	cmpeqi	r2,r2,47
 4011458:	103ff61e 	bne	r2,zero,4011434 <create_name+0x28>
 401145c:	e0bff617 	ldw	r2,-40(fp)
 4011460:	10800003 	ldbu	r2,0(r2)
 4011464:	10803fcc 	andi	r2,r2,255
 4011468:	1080201c 	xori	r2,r2,128
 401146c:	10bfe004 	addi	r2,r2,-128
 4011470:	10801720 	cmpeqi	r2,r2,92
 4011474:	103fef1e 	bne	r2,zero,4011434 <create_name+0x28>
   sfn = dj->fn;
 4011478:	e0bffc17 	ldw	r2,-16(fp)
 401147c:	10800617 	ldw	r2,24(r2)
 4011480:	e0bffa15 	stw	r2,-24(fp)
   mem_set(sfn, ' ', 11);
 4011484:	e13ffa17 	ldw	r4,-24(fp)
 4011488:	01400804 	movi	r5,32
 401148c:	018002c4 	movi	r6,11
 4011490:	40109000 	call	4010900 <mem_set>
   si = i = b = 0; ni = 8;
 4011494:	e03ffb85 	stb	zero,-18(fp)
 4011498:	e03ff715 	stw	zero,-36(fp)
 401149c:	e0bff717 	ldw	r2,-36(fp)
 40114a0:	e0bff815 	stw	r2,-32(fp)
 40114a4:	00800204 	movi	r2,8
 40114a8:	e0bff915 	stw	r2,-28(fp)
 40114ac:	00000006 	br	40114b0 <create_name+0xa4>
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (FFS_U8)p[si++];
 40114b0:	e0fff817 	ldw	r3,-32(fp)
 40114b4:	e0bff617 	ldw	r2,-40(fp)
 40114b8:	1885883a 	add	r2,r3,r2
 40114bc:	10800003 	ldbu	r2,0(r2)
 40114c0:	e0bffb45 	stb	r2,-19(fp)
 40114c4:	e0bff817 	ldw	r2,-32(fp)
 40114c8:	10800044 	addi	r2,r2,1
 40114cc:	e0bff815 	stw	r2,-32(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
 40114d0:	e0bffb43 	ldbu	r2,-19(fp)
 40114d4:	10800870 	cmpltui	r2,r2,33
 40114d8:	1000561e 	bne	r2,zero,4011634 <create_name+0x228>
 40114dc:	e0bffb43 	ldbu	r2,-19(fp)
 40114e0:	10800be0 	cmpeqi	r2,r2,47
 40114e4:	1000531e 	bne	r2,zero,4011634 <create_name+0x228>
 40114e8:	e0bffb43 	ldbu	r2,-19(fp)
 40114ec:	10801720 	cmpeqi	r2,r2,92
 40114f0:	1000501e 	bne	r2,zero,4011634 <create_name+0x228>
      if (c == '.' || i >= ni) {
 40114f4:	e0bffb43 	ldbu	r2,-19(fp)
 40114f8:	10800ba0 	cmpeqi	r2,r2,46
 40114fc:	1000031e 	bne	r2,zero,401150c <create_name+0x100>
 4011500:	e0fff717 	ldw	r3,-36(fp)
 4011504:	e0bff917 	ldw	r2,-28(fp)
 4011508:	18801236 	bltu	r3,r2,4011554 <create_name+0x148>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
 401150c:	e0bff917 	ldw	r2,-28(fp)
 4011510:	10800218 	cmpnei	r2,r2,8
 4011514:	1000031e 	bne	r2,zero,4011524 <create_name+0x118>
 4011518:	e0bffb43 	ldbu	r2,-19(fp)
 401151c:	10800ba0 	cmpeqi	r2,r2,46
 4011520:	1000031e 	bne	r2,zero,4011530 <create_name+0x124>
 4011524:	00800184 	movi	r2,6
 4011528:	e0bfff15 	stw	r2,-4(fp)
 401152c:	00007706 	br	401170c <create_name+0x300>
         i = 8; ni = 11;
 4011530:	00800204 	movi	r2,8
 4011534:	e0bff715 	stw	r2,-36(fp)
 4011538:	008002c4 	movi	r2,11
 401153c:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
 4011540:	e0bffb83 	ldbu	r2,-18(fp)
 4011544:	1085883a 	add	r2,r2,r2
 4011548:	1085883a 	add	r2,r2,r2
 401154c:	e0bffb85 	stb	r2,-18(fp)
 4011550:	003fd706 	br	40114b0 <create_name+0xa4>
      }
      if (c >= 0x80) {           /* Extended char? */
 4011554:	e0bffb43 	ldbu	r2,-19(fp)
 4011558:	10803fcc 	andi	r2,r2,255
 401155c:	1080201c 	xori	r2,r2,128
 4011560:	10bfe004 	addi	r2,r2,-128
 4011564:	1004403a 	cmpge	r2,r2,zero
 4011568:	10000a1e 	bne	r2,zero,4011594 <create_name+0x188>
         b |= 3;                 /* Eliminate NT flag */
 401156c:	e0bffb83 	ldbu	r2,-18(fp)
 4011570:	108000d4 	ori	r2,r2,3
 4011574:	e0bffb85 	stb	r2,-18(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
 4011578:	e0bffb43 	ldbu	r2,-19(fp)
 401157c:	10ffe004 	addi	r3,r2,-128
 4011580:	008100b4 	movhi	r2,1026
 4011584:	10a0a504 	addi	r2,r2,-32108
 4011588:	10c5883a 	add	r2,r2,r3
 401158c:	10800003 	ldbu	r2,0(r2)
 4011590:	e0bffb45 	stb	r2,-19(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
 4011594:	e17ffb43 	ldbu	r5,-19(fp)
 4011598:	010100b4 	movhi	r4,1026
 401159c:	2120c504 	addi	r4,r4,-31980
 40115a0:	4010a100 	call	4010a10 <chk_chr>
 40115a4:	1005003a 	cmpeq	r2,r2,zero
 40115a8:	1000031e 	bne	r2,zero,40115b8 <create_name+0x1ac>
            return FR_INVALID_NAME;
 40115ac:	00800184 	movi	r2,6
 40115b0:	e0bfff15 	stw	r2,-4(fp)
 40115b4:	00005506 	br	401170c <create_name+0x300>
         if (IsUpper(c)) {       /* ASCII large capital? */
 40115b8:	e0bffb43 	ldbu	r2,-19(fp)
 40115bc:	10801070 	cmpltui	r2,r2,65
 40115c0:	1000071e 	bne	r2,zero,40115e0 <create_name+0x1d4>
 40115c4:	e0bffb43 	ldbu	r2,-19(fp)
 40115c8:	108016e8 	cmpgeui	r2,r2,91
 40115cc:	1000041e 	bne	r2,zero,40115e0 <create_name+0x1d4>
            b |= 2;
 40115d0:	e0bffb83 	ldbu	r2,-18(fp)
 40115d4:	10800094 	ori	r2,r2,2
 40115d8:	e0bffb85 	stb	r2,-18(fp)
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
            return FR_INVALID_NAME;
         if (IsUpper(c)) {       /* ASCII large capital? */
 40115dc:	00000c06 	br	4011610 <create_name+0x204>
            b |= 2;
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
 40115e0:	e0bffb43 	ldbu	r2,-19(fp)
 40115e4:	10801870 	cmpltui	r2,r2,97
 40115e8:	1000091e 	bne	r2,zero,4011610 <create_name+0x204>
 40115ec:	e0bffb43 	ldbu	r2,-19(fp)
 40115f0:	10801ee8 	cmpgeui	r2,r2,123
 40115f4:	1000061e 	bne	r2,zero,4011610 <create_name+0x204>
               b |= 1; c -= 0x20;
 40115f8:	e0bffb83 	ldbu	r2,-18(fp)
 40115fc:	10800054 	ori	r2,r2,1
 4011600:	e0bffb85 	stb	r2,-18(fp)
 4011604:	e0bffb43 	ldbu	r2,-19(fp)
 4011608:	10bff804 	addi	r2,r2,-32
 401160c:	e0bffb45 	stb	r2,-19(fp)
            }
         }
         sfn[i++] = c;
 4011610:	e0fff717 	ldw	r3,-36(fp)
 4011614:	e0bffa17 	ldw	r2,-24(fp)
 4011618:	1887883a 	add	r3,r3,r2
 401161c:	e0bffb43 	ldbu	r2,-19(fp)
 4011620:	18800005 	stb	r2,0(r3)
 4011624:	e0bff717 	ldw	r2,-36(fp)
 4011628:	10800044 	addi	r2,r2,1
 401162c:	e0bff715 	stw	r2,-36(fp)
      }
   }
 4011630:	003f9f06 	br	40114b0 <create_name+0xa4>
   *path = &p[si];                  /* Return pointer to the next segment */
 4011634:	e0fff817 	ldw	r3,-32(fp)
 4011638:	e0bff617 	ldw	r2,-40(fp)
 401163c:	1887883a 	add	r3,r3,r2
 4011640:	e0bffd17 	ldw	r2,-12(fp)
 4011644:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
 4011648:	e0bffb43 	ldbu	r2,-19(fp)
 401164c:	10800868 	cmpgeui	r2,r2,33
 4011650:	1000031e 	bne	r2,zero,4011660 <create_name+0x254>
 4011654:	00800104 	movi	r2,4
 4011658:	e0bffe05 	stb	r2,-8(fp)
 401165c:	00000106 	br	4011664 <create_name+0x258>
 4011660:	e03ffe05 	stb	zero,-8(fp)
 4011664:	e0bffe03 	ldbu	r2,-8(fp)
 4011668:	e0bffb45 	stb	r2,-19(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
 401166c:	e0bff717 	ldw	r2,-36(fp)
 4011670:	1004c03a 	cmpne	r2,r2,zero
 4011674:	1000031e 	bne	r2,zero,4011684 <create_name+0x278>
 4011678:	00800184 	movi	r2,6
 401167c:	e0bfff15 	stw	r2,-4(fp)
 4011680:	00002206 	br	401170c <create_name+0x300>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
 4011684:	e0bffa17 	ldw	r2,-24(fp)
 4011688:	10800003 	ldbu	r2,0(r2)
 401168c:	10803fcc 	andi	r2,r2,255
 4011690:	10803958 	cmpnei	r2,r2,229
 4011694:	1000031e 	bne	r2,zero,40116a4 <create_name+0x298>
 4011698:	e0fffa17 	ldw	r3,-24(fp)
 401169c:	00800144 	movi	r2,5
 40116a0:	18800005 	stb	r2,0(r3)

   if (ni == 8) b <<= 2;
 40116a4:	e0bff917 	ldw	r2,-28(fp)
 40116a8:	10800218 	cmpnei	r2,r2,8
 40116ac:	1000041e 	bne	r2,zero,40116c0 <create_name+0x2b4>
 40116b0:	e0bffb83 	ldbu	r2,-18(fp)
 40116b4:	1085883a 	add	r2,r2,r2
 40116b8:	1085883a 	add	r2,r2,r2
 40116bc:	e0bffb85 	stb	r2,-18(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
 40116c0:	e0bffb83 	ldbu	r2,-18(fp)
 40116c4:	108000cc 	andi	r2,r2,3
 40116c8:	10800058 	cmpnei	r2,r2,1
 40116cc:	1000031e 	bne	r2,zero,40116dc <create_name+0x2d0>
 40116d0:	e0bffb43 	ldbu	r2,-19(fp)
 40116d4:	10800414 	ori	r2,r2,16
 40116d8:	e0bffb45 	stb	r2,-19(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
 40116dc:	e0bffb83 	ldbu	r2,-18(fp)
 40116e0:	1080030c 	andi	r2,r2,12
 40116e4:	10800118 	cmpnei	r2,r2,4
 40116e8:	1000031e 	bne	r2,zero,40116f8 <create_name+0x2ec>
 40116ec:	e0bffb43 	ldbu	r2,-19(fp)
 40116f0:	10800214 	ori	r2,r2,8
 40116f4:	e0bffb45 	stb	r2,-19(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
 40116f8:	e0bffa17 	ldw	r2,-24(fp)
 40116fc:	10c002c4 	addi	r3,r2,11
 4011700:	e0bffb43 	ldbu	r2,-19(fp)
 4011704:	18800005 	stb	r2,0(r3)

   return FR_OK;
 4011708:	e03fff15 	stw	zero,-4(fp)
 401170c:	e0bfff17 	ldw	r2,-4(fp)
#endif
}
 4011710:	e037883a 	mov	sp,fp
 4011714:	dfc00117 	ldw	ra,4(sp)
 4011718:	df000017 	ldw	fp,0(sp)
 401171c:	dec00204 	addi	sp,sp,8
 4011720:	f800283a 	ret

04011724 <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
 4011724:	defff804 	addi	sp,sp,-32
 4011728:	df000715 	stw	fp,28(sp)
 401172c:	df000704 	addi	fp,sp,28
 4011730:	e13ffe15 	stw	r4,-8(fp)
 4011734:	e17fff15 	stw	r5,-4(fp)
   FFS_U32 i;
   FFS_U8 nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
 4011738:	e0bfff17 	ldw	r2,-4(fp)
 401173c:	10800244 	addi	r2,r2,9
 4011740:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
 4011744:	e0bffe17 	ldw	r2,-8(fp)
 4011748:	10800417 	ldw	r2,16(r2)
 401174c:	1005003a 	cmpeq	r2,r2,zero
 4011750:	10007e1e 	bne	r2,zero,401194c <get_fileinfo+0x228>
      dir = dj->dir;
 4011754:	e0bffe17 	ldw	r2,-8(fp)
 4011758:	10800517 	ldw	r2,20(r2)
 401175c:	e0bffb15 	stw	r2,-20(fp)
      nt = dir[DIR_NTres];    /* NT flag */
 4011760:	e0bffb17 	ldw	r2,-20(fp)
 4011764:	10800304 	addi	r2,r2,12
 4011768:	10800003 	ldbu	r2,0(r2)
 401176c:	e0bffc05 	stb	r2,-16(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
 4011770:	e03ffd15 	stw	zero,-12(fp)
 4011774:	00001606 	br	40117d0 <get_fileinfo+0xac>
         c = dir[i];
 4011778:	e0fffd17 	ldw	r3,-12(fp)
 401177c:	e0bffb17 	ldw	r2,-20(fp)
 4011780:	1885883a 	add	r2,r3,r2
 4011784:	10800003 	ldbu	r2,0(r2)
 4011788:	e0bff905 	stb	r2,-28(fp)
         if (c == ' ') break;
 401178c:	e0bff907 	ldb	r2,-28(fp)
 4011790:	10800820 	cmpeqi	r2,r2,32
 4011794:	1000111e 	bne	r2,zero,40117dc <get_fileinfo+0xb8>
         if (c == NDDE) c = (TCHAR)DDE;
 4011798:	e0bff907 	ldb	r2,-28(fp)
 401179c:	10800158 	cmpnei	r2,r2,5
 40117a0:	1000021e 	bne	r2,zero,40117ac <get_fileinfo+0x88>
 40117a4:	00bff944 	movi	r2,-27
 40117a8:	e0bff905 	stb	r2,-28(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
 40117ac:	e0fffa17 	ldw	r3,-24(fp)
 40117b0:	e0bff903 	ldbu	r2,-28(fp)
 40117b4:	18800005 	stb	r2,0(r3)
 40117b8:	e0bffa17 	ldw	r2,-24(fp)
 40117bc:	10800044 	addi	r2,r2,1
 40117c0:	e0bffa15 	stw	r2,-24(fp)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
 40117c4:	e0bffd17 	ldw	r2,-12(fp)
 40117c8:	10800044 	addi	r2,r2,1
 40117cc:	e0bffd15 	stw	r2,-12(fp)
 40117d0:	e0bffd17 	ldw	r2,-12(fp)
 40117d4:	10800230 	cmpltui	r2,r2,8
 40117d8:	103fe71e 	bne	r2,zero,4011778 <get_fileinfo+0x54>
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
 40117dc:	e0bffb17 	ldw	r2,-20(fp)
 40117e0:	10800204 	addi	r2,r2,8
 40117e4:	10800003 	ldbu	r2,0(r2)
 40117e8:	10803fcc 	andi	r2,r2,255
 40117ec:	10800820 	cmpeqi	r2,r2,32
 40117f0:	10001d1e 	bne	r2,zero,4011868 <get_fileinfo+0x144>
         *p++ = '.';
 40117f4:	e0fffa17 	ldw	r3,-24(fp)
 40117f8:	00800b84 	movi	r2,46
 40117fc:	18800005 	stb	r2,0(r3)
 4011800:	e0bffa17 	ldw	r2,-24(fp)
 4011804:	10800044 	addi	r2,r2,1
 4011808:	e0bffa15 	stw	r2,-24(fp)
         for (i = 8; i < 11; i++) {
 401180c:	00800204 	movi	r2,8
 4011810:	e0bffd15 	stw	r2,-12(fp)
 4011814:	00001106 	br	401185c <get_fileinfo+0x138>
            c = dir[i];
 4011818:	e0fffd17 	ldw	r3,-12(fp)
 401181c:	e0bffb17 	ldw	r2,-20(fp)
 4011820:	1885883a 	add	r2,r3,r2
 4011824:	10800003 	ldbu	r2,0(r2)
 4011828:	e0bff905 	stb	r2,-28(fp)
            if (c == ' ') break;
 401182c:	e0bff907 	ldb	r2,-28(fp)
 4011830:	10800820 	cmpeqi	r2,r2,32
 4011834:	10000c1e 	bne	r2,zero,4011868 <get_fileinfo+0x144>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
 4011838:	e0fffa17 	ldw	r3,-24(fp)
 401183c:	e0bff903 	ldbu	r2,-28(fp)
 4011840:	18800005 	stb	r2,0(r3)
 4011844:	e0bffa17 	ldw	r2,-24(fp)
 4011848:	10800044 	addi	r2,r2,1
 401184c:	e0bffa15 	stw	r2,-24(fp)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
 4011850:	e0bffd17 	ldw	r2,-12(fp)
 4011854:	10800044 	addi	r2,r2,1
 4011858:	e0bffd15 	stw	r2,-12(fp)
 401185c:	e0bffd17 	ldw	r2,-12(fp)
 4011860:	108002f0 	cmpltui	r2,r2,11
 4011864:	103fec1e 	bne	r2,zero,4011818 <get_fileinfo+0xf4>
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
 4011868:	e0bffb17 	ldw	r2,-20(fp)
 401186c:	108002c4 	addi	r2,r2,11
 4011870:	10c00003 	ldbu	r3,0(r2)
 4011874:	e0bfff17 	ldw	r2,-4(fp)
 4011878:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
 401187c:	e0bffb17 	ldw	r2,-20(fp)
 4011880:	108007c4 	addi	r2,r2,31
 4011884:	10800003 	ldbu	r2,0(r2)
 4011888:	10803fcc 	andi	r2,r2,255
 401188c:	1006963a 	slli	r3,r2,24
 4011890:	e0bffb17 	ldw	r2,-20(fp)
 4011894:	10800784 	addi	r2,r2,30
 4011898:	10800003 	ldbu	r2,0(r2)
 401189c:	10803fcc 	andi	r2,r2,255
 40118a0:	1004943a 	slli	r2,r2,16
 40118a4:	1886b03a 	or	r3,r3,r2
 40118a8:	e0bffb17 	ldw	r2,-20(fp)
 40118ac:	10800744 	addi	r2,r2,29
 40118b0:	10800003 	ldbu	r2,0(r2)
 40118b4:	10803fcc 	andi	r2,r2,255
 40118b8:	1004923a 	slli	r2,r2,8
 40118bc:	1886b03a 	or	r3,r3,r2
 40118c0:	e0bffb17 	ldw	r2,-20(fp)
 40118c4:	10800704 	addi	r2,r2,28
 40118c8:	10800003 	ldbu	r2,0(r2)
 40118cc:	10803fcc 	andi	r2,r2,255
 40118d0:	1886b03a 	or	r3,r3,r2
 40118d4:	e0bfff17 	ldw	r2,-4(fp)
 40118d8:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
 40118dc:	e0bffb17 	ldw	r2,-20(fp)
 40118e0:	10800644 	addi	r2,r2,25
 40118e4:	10800003 	ldbu	r2,0(r2)
 40118e8:	10803fcc 	andi	r2,r2,255
 40118ec:	1004923a 	slli	r2,r2,8
 40118f0:	1007883a 	mov	r3,r2
 40118f4:	e0bffb17 	ldw	r2,-20(fp)
 40118f8:	10800604 	addi	r2,r2,24
 40118fc:	10800003 	ldbu	r2,0(r2)
 4011900:	10803fcc 	andi	r2,r2,255
 4011904:	1884b03a 	or	r2,r3,r2
 4011908:	1007883a 	mov	r3,r2
 401190c:	e0bfff17 	ldw	r2,-4(fp)
 4011910:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
 4011914:	e0bffb17 	ldw	r2,-20(fp)
 4011918:	108005c4 	addi	r2,r2,23
 401191c:	10800003 	ldbu	r2,0(r2)
 4011920:	10803fcc 	andi	r2,r2,255
 4011924:	1004923a 	slli	r2,r2,8
 4011928:	1007883a 	mov	r3,r2
 401192c:	e0bffb17 	ldw	r2,-20(fp)
 4011930:	10800584 	addi	r2,r2,22
 4011934:	10800003 	ldbu	r2,0(r2)
 4011938:	10803fcc 	andi	r2,r2,255
 401193c:	1884b03a 	or	r2,r3,r2
 4011940:	1007883a 	mov	r3,r2
 4011944:	e0bfff17 	ldw	r2,-4(fp)
 4011948:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
 401194c:	e0bffa17 	ldw	r2,-24(fp)
 4011950:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
 4011954:	e037883a 	mov	sp,fp
 4011958:	df000017 	ldw	fp,0(sp)
 401195c:	dec00104 	addi	sp,sp,4
 4011960:	f800283a 	ret

04011964 <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
 4011964:	defff904 	addi	sp,sp,-28
 4011968:	dfc00615 	stw	ra,24(sp)
 401196c:	df000515 	stw	fp,20(sp)
 4011970:	df000504 	addi	fp,sp,20
 4011974:	e13ffe15 	stw	r4,-8(fp)
 4011978:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
 401197c:	e0bfff17 	ldw	r2,-4(fp)
 4011980:	10800003 	ldbu	r2,0(r2)
 4011984:	10803fcc 	andi	r2,r2,255
 4011988:	1080201c 	xori	r2,r2,128
 401198c:	10bfe004 	addi	r2,r2,-128
 4011990:	10800be0 	cmpeqi	r2,r2,47
 4011994:	1000071e 	bne	r2,zero,40119b4 <follow_path+0x50>
 4011998:	e0bfff17 	ldw	r2,-4(fp)
 401199c:	10800003 	ldbu	r2,0(r2)
 40119a0:	10803fcc 	andi	r2,r2,255
 40119a4:	1080201c 	xori	r2,r2,128
 40119a8:	10bfe004 	addi	r2,r2,-128
 40119ac:	10801718 	cmpnei	r2,r2,92
 40119b0:	1000031e 	bne	r2,zero,40119c0 <follow_path+0x5c>
      path++;
 40119b4:	e0bfff17 	ldw	r2,-4(fp)
 40119b8:	10800044 	addi	r2,r2,1
 40119bc:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
 40119c0:	e0bffe17 	ldw	r2,-8(fp)
 40119c4:	10000215 	stw	zero,8(r2)
#endif

   if ((FFS_U32)*path < ' ') {         /* Nul path means the start directory itself */
 40119c8:	e0bfff17 	ldw	r2,-4(fp)
 40119cc:	10800003 	ldbu	r2,0(r2)
 40119d0:	10803fcc 	andi	r2,r2,255
 40119d4:	10800828 	cmpgeui	r2,r2,32
 40119d8:	1000071e 	bne	r2,zero,40119f8 <follow_path+0x94>
      res = dir_sdi(dj, 0);
 40119dc:	e13ffe17 	ldw	r4,-8(fp)
 40119e0:	000b883a 	mov	r5,zero
 40119e4:	4010e5c0 	call	4010e5c <dir_sdi>
 40119e8:	e0bffd15 	stw	r2,-12(fp)
      dj->dir = 0;
 40119ec:	e0bffe17 	ldw	r2,-8(fp)
 40119f0:	10000515 	stw	zero,20(r2)
 40119f4:	00004a06 	br	4011b20 <follow_path+0x1bc>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
 40119f8:	e17fff04 	addi	r5,fp,-4
 40119fc:	e13ffe17 	ldw	r4,-8(fp)
 4011a00:	401140c0 	call	401140c <create_name>
 4011a04:	e0bffd15 	stw	r2,-12(fp)
         if (res != FR_OK) break;
 4011a08:	e0bffd17 	ldw	r2,-12(fp)
 4011a0c:	1004c03a 	cmpne	r2,r2,zero
 4011a10:	1000431e 	bne	r2,zero,4011b20 <follow_path+0x1bc>
         res = dir_find(dj);           /* Find it */
 4011a14:	e13ffe17 	ldw	r4,-8(fp)
 4011a18:	40112080 	call	4011208 <dir_find>
 4011a1c:	e0bffd15 	stw	r2,-12(fp)
         ns = *(dj->fn+NS);
 4011a20:	e0bffe17 	ldw	r2,-8(fp)
 4011a24:	10800617 	ldw	r2,24(r2)
 4011a28:	108002c4 	addi	r2,r2,11
 4011a2c:	10800003 	ldbu	r2,0(r2)
 4011a30:	e0bffb05 	stb	r2,-20(fp)
         if (res != FR_OK) {           /* Failed to find the object */
 4011a34:	e0bffd17 	ldw	r2,-12(fp)
 4011a38:	1005003a 	cmpeq	r2,r2,zero
 4011a3c:	10000a1e 	bne	r2,zero,4011a68 <follow_path+0x104>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
 4011a40:	e0bffd17 	ldw	r2,-12(fp)
 4011a44:	10800118 	cmpnei	r2,r2,4
 4011a48:	1000351e 	bne	r2,zero,4011b20 <follow_path+0x1bc>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
 4011a4c:	e0bffb03 	ldbu	r2,-20(fp)
 4011a50:	1080010c 	andi	r2,r2,4
 4011a54:	1004c03a 	cmpne	r2,r2,zero
 4011a58:	1000311e 	bne	r2,zero,4011b20 <follow_path+0x1bc>
 4011a5c:	00800144 	movi	r2,5
 4011a60:	e0bffd15 	stw	r2,-12(fp)
            }
            break;
 4011a64:	00002e06 	br	4011b20 <follow_path+0x1bc>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
 4011a68:	e0bffb03 	ldbu	r2,-20(fp)
 4011a6c:	1080010c 	andi	r2,r2,4
 4011a70:	1004c03a 	cmpne	r2,r2,zero
 4011a74:	10002a1e 	bne	r2,zero,4011b20 <follow_path+0x1bc>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
 4011a78:	e0bffe17 	ldw	r2,-8(fp)
 4011a7c:	10800517 	ldw	r2,20(r2)
 4011a80:	e0bffc15 	stw	r2,-16(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 4011a84:	e0bffc17 	ldw	r2,-16(fp)
 4011a88:	108002c4 	addi	r2,r2,11
 4011a8c:	10800003 	ldbu	r2,0(r2)
 4011a90:	10803fcc 	andi	r2,r2,255
 4011a94:	1080040c 	andi	r2,r2,16
 4011a98:	1004c03a 	cmpne	r2,r2,zero
 4011a9c:	1000031e 	bne	r2,zero,4011aac <follow_path+0x148>
            res = FR_NO_PATH; break;
 4011aa0:	00800144 	movi	r2,5
 4011aa4:	e0bffd15 	stw	r2,-12(fp)
 4011aa8:	00001d06 	br	4011b20 <follow_path+0x1bc>
         }
         dj->sclust = LD_CLUST(dir);
 4011aac:	e0bffc17 	ldw	r2,-16(fp)
 4011ab0:	10800544 	addi	r2,r2,21
 4011ab4:	10800003 	ldbu	r2,0(r2)
 4011ab8:	10803fcc 	andi	r2,r2,255
 4011abc:	1004923a 	slli	r2,r2,8
 4011ac0:	1007883a 	mov	r3,r2
 4011ac4:	e0bffc17 	ldw	r2,-16(fp)
 4011ac8:	10800504 	addi	r2,r2,20
 4011acc:	10800003 	ldbu	r2,0(r2)
 4011ad0:	10803fcc 	andi	r2,r2,255
 4011ad4:	1884b03a 	or	r2,r3,r2
 4011ad8:	10bfffcc 	andi	r2,r2,65535
 4011adc:	1008943a 	slli	r4,r2,16
 4011ae0:	e0bffc17 	ldw	r2,-16(fp)
 4011ae4:	108006c4 	addi	r2,r2,27
 4011ae8:	10800003 	ldbu	r2,0(r2)
 4011aec:	10803fcc 	andi	r2,r2,255
 4011af0:	1004923a 	slli	r2,r2,8
 4011af4:	1007883a 	mov	r3,r2
 4011af8:	e0bffc17 	ldw	r2,-16(fp)
 4011afc:	10800684 	addi	r2,r2,26
 4011b00:	10800003 	ldbu	r2,0(r2)
 4011b04:	10803fcc 	andi	r2,r2,255
 4011b08:	1884b03a 	or	r2,r3,r2
 4011b0c:	10bfffcc 	andi	r2,r2,65535
 4011b10:	2086b03a 	or	r3,r4,r2
 4011b14:	e0bffe17 	ldw	r2,-8(fp)
 4011b18:	10c00215 	stw	r3,8(r2)
      }
 4011b1c:	003fb606 	br	40119f8 <follow_path+0x94>
   }

   return res;
 4011b20:	e0bffd17 	ldw	r2,-12(fp)
}
 4011b24:	e037883a 	mov	sp,fp
 4011b28:	dfc00117 	ldw	ra,4(sp)
 4011b2c:	df000017 	ldw	fp,0(sp)
 4011b30:	dec00204 	addi	sp,sp,8
 4011b34:	f800283a 	ret

04011b38 <check_fs>:
static
FFS_U8 check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   FFS_U32 sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 4011b38:	defffb04 	addi	sp,sp,-20
 4011b3c:	dfc00415 	stw	ra,16(sp)
 4011b40:	df000315 	stw	fp,12(sp)
 4011b44:	df000304 	addi	fp,sp,12
 4011b48:	e13ffd15 	stw	r4,-12(fp)
 4011b4c:	e17ffe15 	stw	r5,-8(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
 4011b50:	e0bffd17 	ldw	r2,-12(fp)
 4011b54:	10800043 	ldbu	r2,1(r2)
 4011b58:	11003fcc 	andi	r4,r2,255
 4011b5c:	e0bffd17 	ldw	r2,-12(fp)
 4011b60:	11400904 	addi	r5,r2,36
 4011b64:	e1bffe17 	ldw	r6,-8(fp)
 4011b68:	01c00044 	movi	r7,1
 4011b6c:	4013fcc0 	call	4013fcc <ffs_DiskIORead>
 4011b70:	1005003a 	cmpeq	r2,r2,zero
 4011b74:	1000031e 	bne	r2,zero,4011b84 <check_fs+0x4c>
      return 3;
 4011b78:	008000c4 	movi	r2,3
 4011b7c:	e0bfff15 	stw	r2,-4(fp)
 4011b80:	00005b06 	br	4011cf0 <check_fs+0x1b8>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
 4011b84:	e0bffd17 	ldw	r2,-12(fp)
 4011b88:	10800904 	addi	r2,r2,36
 4011b8c:	10807fc4 	addi	r2,r2,511
 4011b90:	10800003 	ldbu	r2,0(r2)
 4011b94:	10803fcc 	andi	r2,r2,255
 4011b98:	1004923a 	slli	r2,r2,8
 4011b9c:	1007883a 	mov	r3,r2
 4011ba0:	e0bffd17 	ldw	r2,-12(fp)
 4011ba4:	10800904 	addi	r2,r2,36
 4011ba8:	10807f84 	addi	r2,r2,510
 4011bac:	10800003 	ldbu	r2,0(r2)
 4011bb0:	10803fcc 	andi	r2,r2,255
 4011bb4:	1884b03a 	or	r2,r3,r2
 4011bb8:	10bfffcc 	andi	r2,r2,65535
 4011bbc:	10a0001c 	xori	r2,r2,32768
 4011bc0:	10a00004 	addi	r2,r2,-32768
 4011bc4:	10aa9560 	cmpeqi	r2,r2,-21931
 4011bc8:	1000031e 	bne	r2,zero,4011bd8 <check_fs+0xa0>
      return 2;
 4011bcc:	00800084 	movi	r2,2
 4011bd0:	e0bfff15 	stw	r2,-4(fp)
 4011bd4:	00004606 	br	4011cf0 <check_fs+0x1b8>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
 4011bd8:	e0bffd17 	ldw	r2,-12(fp)
 4011bdc:	10800904 	addi	r2,r2,36
 4011be0:	10800e44 	addi	r2,r2,57
 4011be4:	10800003 	ldbu	r2,0(r2)
 4011be8:	10803fcc 	andi	r2,r2,255
 4011bec:	1006963a 	slli	r3,r2,24
 4011bf0:	e0bffd17 	ldw	r2,-12(fp)
 4011bf4:	10800904 	addi	r2,r2,36
 4011bf8:	10800e04 	addi	r2,r2,56
 4011bfc:	10800003 	ldbu	r2,0(r2)
 4011c00:	10803fcc 	andi	r2,r2,255
 4011c04:	1004943a 	slli	r2,r2,16
 4011c08:	1886b03a 	or	r3,r3,r2
 4011c0c:	e0bffd17 	ldw	r2,-12(fp)
 4011c10:	10800904 	addi	r2,r2,36
 4011c14:	10800dc4 	addi	r2,r2,55
 4011c18:	10800003 	ldbu	r2,0(r2)
 4011c1c:	10803fcc 	andi	r2,r2,255
 4011c20:	1004923a 	slli	r2,r2,8
 4011c24:	1886b03a 	or	r3,r3,r2
 4011c28:	e0bffd17 	ldw	r2,-12(fp)
 4011c2c:	10800904 	addi	r2,r2,36
 4011c30:	10800d84 	addi	r2,r2,54
 4011c34:	10800003 	ldbu	r2,0(r2)
 4011c38:	10803fcc 	andi	r2,r2,255
 4011c3c:	1886b03a 	or	r3,r3,r2
 4011c40:	00804034 	movhi	r2,256
 4011c44:	10bfffc4 	addi	r2,r2,-1
 4011c48:	1886703a 	and	r3,r3,r2
 4011c4c:	00801534 	movhi	r2,84
 4011c50:	10905184 	addi	r2,r2,16710
 4011c54:	1880021e 	bne	r3,r2,4011c60 <check_fs+0x128>
      return 0;
 4011c58:	e03fff15 	stw	zero,-4(fp)
 4011c5c:	00002406 	br	4011cf0 <check_fs+0x1b8>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 4011c60:	e0bffd17 	ldw	r2,-12(fp)
 4011c64:	10800904 	addi	r2,r2,36
 4011c68:	10801544 	addi	r2,r2,85
 4011c6c:	10800003 	ldbu	r2,0(r2)
 4011c70:	10803fcc 	andi	r2,r2,255
 4011c74:	1006963a 	slli	r3,r2,24
 4011c78:	e0bffd17 	ldw	r2,-12(fp)
 4011c7c:	10800904 	addi	r2,r2,36
 4011c80:	10801504 	addi	r2,r2,84
 4011c84:	10800003 	ldbu	r2,0(r2)
 4011c88:	10803fcc 	andi	r2,r2,255
 4011c8c:	1004943a 	slli	r2,r2,16
 4011c90:	1886b03a 	or	r3,r3,r2
 4011c94:	e0bffd17 	ldw	r2,-12(fp)
 4011c98:	10800904 	addi	r2,r2,36
 4011c9c:	108014c4 	addi	r2,r2,83
 4011ca0:	10800003 	ldbu	r2,0(r2)
 4011ca4:	10803fcc 	andi	r2,r2,255
 4011ca8:	1004923a 	slli	r2,r2,8
 4011cac:	1886b03a 	or	r3,r3,r2
 4011cb0:	e0bffd17 	ldw	r2,-12(fp)
 4011cb4:	10800904 	addi	r2,r2,36
 4011cb8:	10801484 	addi	r2,r2,82
 4011cbc:	10800003 	ldbu	r2,0(r2)
 4011cc0:	10803fcc 	andi	r2,r2,255
 4011cc4:	1886b03a 	or	r3,r3,r2
 4011cc8:	00804034 	movhi	r2,256
 4011ccc:	10bfffc4 	addi	r2,r2,-1
 4011cd0:	1886703a 	and	r3,r3,r2
 4011cd4:	00801534 	movhi	r2,84
 4011cd8:	10905184 	addi	r2,r2,16710
 4011cdc:	1880021e 	bne	r3,r2,4011ce8 <check_fs+0x1b0>
      return 0;
 4011ce0:	e03fff15 	stw	zero,-4(fp)
 4011ce4:	00000206 	br	4011cf0 <check_fs+0x1b8>

   return 1;
 4011ce8:	00800044 	movi	r2,1
 4011cec:	e0bfff15 	stw	r2,-4(fp)
 4011cf0:	e0bfff17 	ldw	r2,-4(fp)
}
 4011cf4:	e037883a 	mov	sp,fp
 4011cf8:	dfc00117 	ldw	ra,4(sp)
 4011cfc:	df000017 	ldw	fp,0(sp)
 4011d00:	dec00204 	addi	sp,sp,8
 4011d04:	f800283a 	ret

04011d08 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   FFS_U8 chk_wp       /* !=0: Check media write protection for write access */
)
{
 4011d08:	deffec04 	addi	sp,sp,-80
 4011d0c:	dfc01315 	stw	ra,76(sp)
 4011d10:	df001215 	stw	fp,72(sp)
 4011d14:	df001204 	addi	fp,sp,72
 4011d18:	e13ffb15 	stw	r4,-20(fp)
 4011d1c:	e17ffc15 	stw	r5,-16(fp)
 4011d20:	e1bffd05 	stb	r6,-12(fp)
   FFS_U8 fmt, b, pi, *tbl;
   FFS_U32 vol;
   DSTATUS stat;
   FFS_U32 bsect, fasize, tsect, sysect, nclst, szbfat;
   FFS_U16 nrsv;
   const TCHAR *p = *path;
 4011d24:	e0bffb17 	ldw	r2,-20(fp)
 4011d28:	10800017 	ldw	r2,0(r2)
 4011d2c:	e0bfef15 	stw	r2,-68(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
 4011d30:	e0bfef17 	ldw	r2,-68(fp)
 4011d34:	10800003 	ldbu	r2,0(r2)
 4011d38:	10803fcc 	andi	r2,r2,255
 4011d3c:	1080201c 	xori	r2,r2,128
 4011d40:	10bfe004 	addi	r2,r2,-128
 4011d44:	10bff404 	addi	r2,r2,-48
 4011d48:	e0bff815 	stw	r2,-32(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
 4011d4c:	e0bff817 	ldw	r2,-32(fp)
 4011d50:	108002a8 	cmpgeui	r2,r2,10
 4011d54:	10000f1e 	bne	r2,zero,4011d94 <chk_mounted+0x8c>
 4011d58:	e0bfef17 	ldw	r2,-68(fp)
 4011d5c:	10800044 	addi	r2,r2,1
 4011d60:	10800003 	ldbu	r2,0(r2)
 4011d64:	10803fcc 	andi	r2,r2,255
 4011d68:	1080201c 	xori	r2,r2,128
 4011d6c:	10bfe004 	addi	r2,r2,-128
 4011d70:	10800e98 	cmpnei	r2,r2,58
 4011d74:	1000071e 	bne	r2,zero,4011d94 <chk_mounted+0x8c>
      p += 2; *path = p;            /* Return pointer to the path name */
 4011d78:	e0bfef17 	ldw	r2,-68(fp)
 4011d7c:	10800084 	addi	r2,r2,2
 4011d80:	e0bfef15 	stw	r2,-68(fp)
 4011d84:	e0fffb17 	ldw	r3,-20(fp)
 4011d88:	e0bfef17 	ldw	r2,-68(fp)
 4011d8c:	18800015 	stw	r2,0(r3)
   const TCHAR *p = *path;
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
 4011d90:	00000106 	br	4011d98 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
 4011d94:	e03ff815 	stw	zero,-32(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
 4011d98:	e0bff817 	ldw	r2,-32(fp)
 4011d9c:	1005003a 	cmpeq	r2,r2,zero
 4011da0:	1000031e 	bne	r2,zero,4011db0 <chk_mounted+0xa8>
      return FR_INVALID_DRIVE;
 4011da4:	008002c4 	movi	r2,11
 4011da8:	e0bfff15 	stw	r2,-4(fp)
 4011dac:	0001d906 	br	4012514 <chk_mounted+0x80c>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
 4011db0:	e0bff817 	ldw	r2,-32(fp)
 4011db4:	1085883a 	add	r2,r2,r2
 4011db8:	1087883a 	add	r3,r2,r2
 4011dbc:	d0a0da04 	addi	r2,gp,-31896
 4011dc0:	1885883a 	add	r2,r3,r2
 4011dc4:	10800017 	ldw	r2,0(r2)
 4011dc8:	e0bfee15 	stw	r2,-72(fp)
 4011dcc:	e0fffc17 	ldw	r3,-16(fp)
 4011dd0:	e0bfee17 	ldw	r2,-72(fp)
 4011dd4:	18800015 	stw	r2,0(r3)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
 4011dd8:	e0bfee17 	ldw	r2,-72(fp)
 4011ddc:	1004c03a 	cmpne	r2,r2,zero
 4011de0:	1000031e 	bne	r2,zero,4011df0 <chk_mounted+0xe8>
 4011de4:	00800304 	movi	r2,12
 4011de8:	e0bfff15 	stw	r2,-4(fp)
 4011dec:	0001c906 	br	4012514 <chk_mounted+0x80c>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
 4011df0:	e0bfee17 	ldw	r2,-72(fp)
 4011df4:	10800003 	ldbu	r2,0(r2)
 4011df8:	10803fcc 	andi	r2,r2,255
 4011dfc:	1005003a 	cmpeq	r2,r2,zero
 4011e00:	10000b1e 	bne	r2,zero,4011e30 <chk_mounted+0x128>
      stat = disk_status(fs->drv);
 4011e04:	e0bfee17 	ldw	r2,-72(fp)
 4011e08:	10800043 	ldbu	r2,1(r2)
 4011e0c:	11003fcc 	andi	r4,r2,255
 4011e10:	4013fa40 	call	4013fa4 <ffs_DiskIOStatus>
 4011e14:	e0bff705 	stb	r2,-36(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
 4011e18:	e0bff703 	ldbu	r2,-36(fp)
 4011e1c:	1080004c 	andi	r2,r2,1
 4011e20:	1004c03a 	cmpne	r2,r2,zero
 4011e24:	1000021e 	bne	r2,zero,4011e30 <chk_mounted+0x128>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
            return FR_WRITE_PROTECTED;
         return FR_OK;           /* The file system object is valid */
 4011e28:	e03fff15 	stw	zero,-4(fp)
 4011e2c:	0001b906 	br	4012514 <chk_mounted+0x80c>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
 4011e30:	e0bfee17 	ldw	r2,-72(fp)
 4011e34:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
 4011e38:	e0bff817 	ldw	r2,-32(fp)
 4011e3c:	1007883a 	mov	r3,r2
 4011e40:	e0bfee17 	ldw	r2,-72(fp)
 4011e44:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
 4011e48:	e0bfee17 	ldw	r2,-72(fp)
 4011e4c:	10800043 	ldbu	r2,1(r2)
 4011e50:	11003fcc 	andi	r4,r2,255
 4011e54:	4013d080 	call	4013d08 <ffs_DiskIOInitialize>
 4011e58:	e0bff705 	stb	r2,-36(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
 4011e5c:	e0bff703 	ldbu	r2,-36(fp)
 4011e60:	1080004c 	andi	r2,r2,1
 4011e64:	10803fcc 	andi	r2,r2,255
 4011e68:	1005003a 	cmpeq	r2,r2,zero
 4011e6c:	1000031e 	bne	r2,zero,4011e7c <chk_mounted+0x174>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
 4011e70:	008000c4 	movi	r2,3
 4011e74:	e0bfff15 	stw	r2,-4(fp)
 4011e78:	0001a606 	br	4012514 <chk_mounted+0x80c>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 4011e7c:	e03ff615 	stw	zero,-40(fp)
 4011e80:	e13fee17 	ldw	r4,-72(fp)
 4011e84:	e17ff617 	ldw	r5,-40(fp)
 4011e88:	4011b380 	call	4011b38 <check_fs>
 4011e8c:	e0bffa85 	stb	r2,-22(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
 4011e90:	e0bffa83 	ldbu	r2,-22(fp)
 4011e94:	10800058 	cmpnei	r2,r2,1
 4011e98:	10002f1e 	bne	r2,zero,4011f58 <chk_mounted+0x250>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
 4011e9c:	e03ffa05 	stb	zero,-24(fp)
      if (pi) pi--;
 4011ea0:	e0bffa03 	ldbu	r2,-24(fp)
 4011ea4:	1005003a 	cmpeq	r2,r2,zero
 4011ea8:	1000031e 	bne	r2,zero,4011eb8 <chk_mounted+0x1b0>
 4011eac:	e0bffa03 	ldbu	r2,-24(fp)
 4011eb0:	10bfffc4 	addi	r2,r2,-1
 4011eb4:	e0bffa05 	stb	r2,-24(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 4011eb8:	e0bfee17 	ldw	r2,-72(fp)
 4011ebc:	10c00904 	addi	r3,r2,36
 4011ec0:	e0bffa03 	ldbu	r2,-24(fp)
 4011ec4:	1004913a 	slli	r2,r2,4
 4011ec8:	1885883a 	add	r2,r3,r2
 4011ecc:	10806f84 	addi	r2,r2,446
 4011ed0:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
 4011ed4:	e0bff917 	ldw	r2,-28(fp)
 4011ed8:	10800104 	addi	r2,r2,4
 4011edc:	10800003 	ldbu	r2,0(r2)
 4011ee0:	10803fcc 	andi	r2,r2,255
 4011ee4:	1005003a 	cmpeq	r2,r2,zero
 4011ee8:	10001b1e 	bne	r2,zero,4011f58 <chk_mounted+0x250>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
 4011eec:	e0bff917 	ldw	r2,-28(fp)
 4011ef0:	108002c4 	addi	r2,r2,11
 4011ef4:	10800003 	ldbu	r2,0(r2)
 4011ef8:	10803fcc 	andi	r2,r2,255
 4011efc:	1006963a 	slli	r3,r2,24
 4011f00:	e0bff917 	ldw	r2,-28(fp)
 4011f04:	10800284 	addi	r2,r2,10
 4011f08:	10800003 	ldbu	r2,0(r2)
 4011f0c:	10803fcc 	andi	r2,r2,255
 4011f10:	1004943a 	slli	r2,r2,16
 4011f14:	1886b03a 	or	r3,r3,r2
 4011f18:	e0bff917 	ldw	r2,-28(fp)
 4011f1c:	10800244 	addi	r2,r2,9
 4011f20:	10800003 	ldbu	r2,0(r2)
 4011f24:	10803fcc 	andi	r2,r2,255
 4011f28:	1004923a 	slli	r2,r2,8
 4011f2c:	1886b03a 	or	r3,r3,r2
 4011f30:	e0bff917 	ldw	r2,-28(fp)
 4011f34:	10800204 	addi	r2,r2,8
 4011f38:	10800003 	ldbu	r2,0(r2)
 4011f3c:	10803fcc 	andi	r2,r2,255
 4011f40:	1884b03a 	or	r2,r3,r2
 4011f44:	e0bff615 	stw	r2,-40(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
 4011f48:	e13fee17 	ldw	r4,-72(fp)
 4011f4c:	e17ff617 	ldw	r5,-40(fp)
 4011f50:	4011b380 	call	4011b38 <check_fs>
 4011f54:	e0bffa85 	stb	r2,-22(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
 4011f58:	e0bffa83 	ldbu	r2,-22(fp)
 4011f5c:	108000d8 	cmpnei	r2,r2,3
 4011f60:	1000031e 	bne	r2,zero,4011f70 <chk_mounted+0x268>
 4011f64:	00800044 	movi	r2,1
 4011f68:	e0bfff15 	stw	r2,-4(fp)
 4011f6c:	00016906 	br	4012514 <chk_mounted+0x80c>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
 4011f70:	e0bffa83 	ldbu	r2,-22(fp)
 4011f74:	1005003a 	cmpeq	r2,r2,zero
 4011f78:	1000031e 	bne	r2,zero,4011f88 <chk_mounted+0x280>
 4011f7c:	00800344 	movi	r2,13
 4011f80:	e0bfff15 	stw	r2,-4(fp)
 4011f84:	00016306 	br	4012514 <chk_mounted+0x80c>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
 4011f88:	e0bfee17 	ldw	r2,-72(fp)
 4011f8c:	10800904 	addi	r2,r2,36
 4011f90:	10800304 	addi	r2,r2,12
 4011f94:	10800003 	ldbu	r2,0(r2)
 4011f98:	10803fcc 	andi	r2,r2,255
 4011f9c:	1004923a 	slli	r2,r2,8
 4011fa0:	1007883a 	mov	r3,r2
 4011fa4:	e0bfee17 	ldw	r2,-72(fp)
 4011fa8:	10800904 	addi	r2,r2,36
 4011fac:	108002c4 	addi	r2,r2,11
 4011fb0:	10800003 	ldbu	r2,0(r2)
 4011fb4:	10803fcc 	andi	r2,r2,255
 4011fb8:	1884b03a 	or	r2,r3,r2
 4011fbc:	10bfffcc 	andi	r2,r2,65535
 4011fc0:	10a0001c 	xori	r2,r2,32768
 4011fc4:	10a00004 	addi	r2,r2,-32768
 4011fc8:	10808020 	cmpeqi	r2,r2,512
 4011fcc:	1000031e 	bne	r2,zero,4011fdc <chk_mounted+0x2d4>
      return FR_NO_FILESYSTEM;
 4011fd0:	00800344 	movi	r2,13
 4011fd4:	e0bfff15 	stw	r2,-4(fp)
 4011fd8:	00014e06 	br	4012514 <chk_mounted+0x80c>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
 4011fdc:	e0bfee17 	ldw	r2,-72(fp)
 4011fe0:	10800904 	addi	r2,r2,36
 4011fe4:	108005c4 	addi	r2,r2,23
 4011fe8:	10800003 	ldbu	r2,0(r2)
 4011fec:	10803fcc 	andi	r2,r2,255
 4011ff0:	1004923a 	slli	r2,r2,8
 4011ff4:	1007883a 	mov	r3,r2
 4011ff8:	e0bfee17 	ldw	r2,-72(fp)
 4011ffc:	10800904 	addi	r2,r2,36
 4012000:	10800584 	addi	r2,r2,22
 4012004:	10800003 	ldbu	r2,0(r2)
 4012008:	10803fcc 	andi	r2,r2,255
 401200c:	1884b03a 	or	r2,r3,r2
 4012010:	10bfffcc 	andi	r2,r2,65535
 4012014:	e0bff515 	stw	r2,-44(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 4012018:	e0bff517 	ldw	r2,-44(fp)
 401201c:	1004c03a 	cmpne	r2,r2,zero
 4012020:	10001b1e 	bne	r2,zero,4012090 <chk_mounted+0x388>
 4012024:	e0bfee17 	ldw	r2,-72(fp)
 4012028:	10800904 	addi	r2,r2,36
 401202c:	108009c4 	addi	r2,r2,39
 4012030:	10800003 	ldbu	r2,0(r2)
 4012034:	10803fcc 	andi	r2,r2,255
 4012038:	1006963a 	slli	r3,r2,24
 401203c:	e0bfee17 	ldw	r2,-72(fp)
 4012040:	10800904 	addi	r2,r2,36
 4012044:	10800984 	addi	r2,r2,38
 4012048:	10800003 	ldbu	r2,0(r2)
 401204c:	10803fcc 	andi	r2,r2,255
 4012050:	1004943a 	slli	r2,r2,16
 4012054:	1886b03a 	or	r3,r3,r2
 4012058:	e0bfee17 	ldw	r2,-72(fp)
 401205c:	10800904 	addi	r2,r2,36
 4012060:	10800944 	addi	r2,r2,37
 4012064:	10800003 	ldbu	r2,0(r2)
 4012068:	10803fcc 	andi	r2,r2,255
 401206c:	1004923a 	slli	r2,r2,8
 4012070:	1886b03a 	or	r3,r3,r2
 4012074:	e0bfee17 	ldw	r2,-72(fp)
 4012078:	10800904 	addi	r2,r2,36
 401207c:	10800904 	addi	r2,r2,36
 4012080:	10800003 	ldbu	r2,0(r2)
 4012084:	10803fcc 	andi	r2,r2,255
 4012088:	1884b03a 	or	r2,r3,r2
 401208c:	e0bff515 	stw	r2,-44(fp)
   fs->fsize = fasize;
 4012090:	e0ffee17 	ldw	r3,-72(fp)
 4012094:	e0bff517 	ldw	r2,-44(fp)
 4012098:	18800415 	stw	r2,16(r3)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
 401209c:	e0bfee17 	ldw	r2,-72(fp)
 40120a0:	10800d03 	ldbu	r2,52(r2)
 40120a4:	e0bffa45 	stb	r2,-23(fp)
 40120a8:	e0ffee17 	ldw	r3,-72(fp)
 40120ac:	e0bffa43 	ldbu	r2,-23(fp)
 40120b0:	188000c5 	stb	r2,3(r3)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
 40120b4:	e0bffa43 	ldbu	r2,-23(fp)
 40120b8:	10800060 	cmpeqi	r2,r2,1
 40120bc:	1000061e 	bne	r2,zero,40120d8 <chk_mounted+0x3d0>
 40120c0:	e0bffa43 	ldbu	r2,-23(fp)
 40120c4:	108000a0 	cmpeqi	r2,r2,2
 40120c8:	1000031e 	bne	r2,zero,40120d8 <chk_mounted+0x3d0>
 40120cc:	00800344 	movi	r2,13
 40120d0:	e0bfff15 	stw	r2,-4(fp)
 40120d4:	00010f06 	br	4012514 <chk_mounted+0x80c>
   fasize *= b;                              /* Number of sectors for FAT area */
 40120d8:	e17ffa43 	ldbu	r5,-23(fp)
 40120dc:	e13ff517 	ldw	r4,-44(fp)
 40120e0:	4014cf40 	call	4014cf4 <__mulsi3>
 40120e4:	e0bff515 	stw	r2,-44(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
 40120e8:	e0bfee17 	ldw	r2,-72(fp)
 40120ec:	10800c43 	ldbu	r2,49(r2)
 40120f0:	e0bffa45 	stb	r2,-23(fp)
 40120f4:	e0ffee17 	ldw	r3,-72(fp)
 40120f8:	e0bffa43 	ldbu	r2,-23(fp)
 40120fc:	18800085 	stb	r2,2(r3)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
 4012100:	e0bffa43 	ldbu	r2,-23(fp)
 4012104:	1005003a 	cmpeq	r2,r2,zero
 4012108:	1000061e 	bne	r2,zero,4012124 <chk_mounted+0x41c>
 401210c:	e0fffa43 	ldbu	r3,-23(fp)
 4012110:	e0bffa43 	ldbu	r2,-23(fp)
 4012114:	10bfffc4 	addi	r2,r2,-1
 4012118:	1884703a 	and	r2,r3,r2
 401211c:	1005003a 	cmpeq	r2,r2,zero
 4012120:	1000031e 	bne	r2,zero,4012130 <chk_mounted+0x428>
 4012124:	00800344 	movi	r2,13
 4012128:	e0bfff15 	stw	r2,-4(fp)
 401212c:	0000f906 	br	4012514 <chk_mounted+0x80c>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
 4012130:	e0bfee17 	ldw	r2,-72(fp)
 4012134:	10800904 	addi	r2,r2,36
 4012138:	10800484 	addi	r2,r2,18
 401213c:	10800003 	ldbu	r2,0(r2)
 4012140:	10803fcc 	andi	r2,r2,255
 4012144:	1004923a 	slli	r2,r2,8
 4012148:	1007883a 	mov	r3,r2
 401214c:	e0bfee17 	ldw	r2,-72(fp)
 4012150:	10800904 	addi	r2,r2,36
 4012154:	10800444 	addi	r2,r2,17
 4012158:	10800003 	ldbu	r2,0(r2)
 401215c:	10803fcc 	andi	r2,r2,255
 4012160:	1884b03a 	or	r2,r3,r2
 4012164:	1007883a 	mov	r3,r2
 4012168:	e0bfee17 	ldw	r2,-72(fp)
 401216c:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
 4012170:	e0bfee17 	ldw	r2,-72(fp)
 4012174:	1080020b 	ldhu	r2,8(r2)
 4012178:	10bfffcc 	andi	r2,r2,65535
 401217c:	108003cc 	andi	r2,r2,15
 4012180:	1005003a 	cmpeq	r2,r2,zero
 4012184:	1000031e 	bne	r2,zero,4012194 <chk_mounted+0x48c>
 4012188:	00800344 	movi	r2,13
 401218c:	e0bfff15 	stw	r2,-4(fp)
 4012190:	0000e006 	br	4012514 <chk_mounted+0x80c>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
 4012194:	e0bfee17 	ldw	r2,-72(fp)
 4012198:	10800904 	addi	r2,r2,36
 401219c:	10800504 	addi	r2,r2,20
 40121a0:	10800003 	ldbu	r2,0(r2)
 40121a4:	10803fcc 	andi	r2,r2,255
 40121a8:	1004923a 	slli	r2,r2,8
 40121ac:	1007883a 	mov	r3,r2
 40121b0:	e0bfee17 	ldw	r2,-72(fp)
 40121b4:	10800904 	addi	r2,r2,36
 40121b8:	108004c4 	addi	r2,r2,19
 40121bc:	10800003 	ldbu	r2,0(r2)
 40121c0:	10803fcc 	andi	r2,r2,255
 40121c4:	1884b03a 	or	r2,r3,r2
 40121c8:	10bfffcc 	andi	r2,r2,65535
 40121cc:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 40121d0:	e0bff417 	ldw	r2,-48(fp)
 40121d4:	1004c03a 	cmpne	r2,r2,zero
 40121d8:	10001b1e 	bne	r2,zero,4012248 <chk_mounted+0x540>
 40121dc:	e0bfee17 	ldw	r2,-72(fp)
 40121e0:	10800904 	addi	r2,r2,36
 40121e4:	108008c4 	addi	r2,r2,35
 40121e8:	10800003 	ldbu	r2,0(r2)
 40121ec:	10803fcc 	andi	r2,r2,255
 40121f0:	1006963a 	slli	r3,r2,24
 40121f4:	e0bfee17 	ldw	r2,-72(fp)
 40121f8:	10800904 	addi	r2,r2,36
 40121fc:	10800884 	addi	r2,r2,34
 4012200:	10800003 	ldbu	r2,0(r2)
 4012204:	10803fcc 	andi	r2,r2,255
 4012208:	1004943a 	slli	r2,r2,16
 401220c:	1886b03a 	or	r3,r3,r2
 4012210:	e0bfee17 	ldw	r2,-72(fp)
 4012214:	10800904 	addi	r2,r2,36
 4012218:	10800844 	addi	r2,r2,33
 401221c:	10800003 	ldbu	r2,0(r2)
 4012220:	10803fcc 	andi	r2,r2,255
 4012224:	1004923a 	slli	r2,r2,8
 4012228:	1886b03a 	or	r3,r3,r2
 401222c:	e0bfee17 	ldw	r2,-72(fp)
 4012230:	10800904 	addi	r2,r2,36
 4012234:	10800804 	addi	r2,r2,32
 4012238:	10800003 	ldbu	r2,0(r2)
 401223c:	10803fcc 	andi	r2,r2,255
 4012240:	1884b03a 	or	r2,r3,r2
 4012244:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
 4012248:	e0bfee17 	ldw	r2,-72(fp)
 401224c:	10800904 	addi	r2,r2,36
 4012250:	108003c4 	addi	r2,r2,15
 4012254:	10800003 	ldbu	r2,0(r2)
 4012258:	10803fcc 	andi	r2,r2,255
 401225c:	1004923a 	slli	r2,r2,8
 4012260:	1007883a 	mov	r3,r2
 4012264:	e0bfee17 	ldw	r2,-72(fp)
 4012268:	10800904 	addi	r2,r2,36
 401226c:	10800384 	addi	r2,r2,14
 4012270:	10800003 	ldbu	r2,0(r2)
 4012274:	10803fcc 	andi	r2,r2,255
 4012278:	1884b03a 	or	r2,r3,r2
 401227c:	e0bff00d 	sth	r2,-64(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
 4012280:	e0bff00b 	ldhu	r2,-64(fp)
 4012284:	1004c03a 	cmpne	r2,r2,zero
 4012288:	1000031e 	bne	r2,zero,4012298 <chk_mounted+0x590>
 401228c:	00800344 	movi	r2,13
 4012290:	e0bfff15 	stw	r2,-4(fp)
 4012294:	00009f06 	br	4012514 <chk_mounted+0x80c>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
 4012298:	e0fff00b 	ldhu	r3,-64(fp)
 401229c:	e0bff517 	ldw	r2,-44(fp)
 40122a0:	1887883a 	add	r3,r3,r2
 40122a4:	e0bfee17 	ldw	r2,-72(fp)
 40122a8:	1080020b 	ldhu	r2,8(r2)
 40122ac:	10bfffcc 	andi	r2,r2,65535
 40122b0:	1004d13a 	srli	r2,r2,4
 40122b4:	10bfffcc 	andi	r2,r2,65535
 40122b8:	1885883a 	add	r2,r3,r2
 40122bc:	e0bff315 	stw	r2,-52(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
 40122c0:	e0fff417 	ldw	r3,-48(fp)
 40122c4:	e0bff317 	ldw	r2,-52(fp)
 40122c8:	1880032e 	bgeu	r3,r2,40122d8 <chk_mounted+0x5d0>
 40122cc:	00800344 	movi	r2,13
 40122d0:	e0bfff15 	stw	r2,-4(fp)
 40122d4:	00008f06 	br	4012514 <chk_mounted+0x80c>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
 40122d8:	e0fff417 	ldw	r3,-48(fp)
 40122dc:	e0bff317 	ldw	r2,-52(fp)
 40122e0:	1889c83a 	sub	r4,r3,r2
 40122e4:	e0bfee17 	ldw	r2,-72(fp)
 40122e8:	10800083 	ldbu	r2,2(r2)
 40122ec:	11403fcc 	andi	r5,r2,255
 40122f0:	4014ce40 	call	4014ce4 <__udivsi3>
 40122f4:	e0bff215 	stw	r2,-56(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
 40122f8:	e0bff217 	ldw	r2,-56(fp)
 40122fc:	1004c03a 	cmpne	r2,r2,zero
 4012300:	1000031e 	bne	r2,zero,4012310 <chk_mounted+0x608>
 4012304:	00800344 	movi	r2,13
 4012308:	e0bfff15 	stw	r2,-4(fp)
 401230c:	00008106 	br	4012514 <chk_mounted+0x80c>
   fmt = FS_FAT12;
 4012310:	00800044 	movi	r2,1
 4012314:	e0bffa85 	stb	r2,-22(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 4012318:	e0bff217 	ldw	r2,-56(fp)
 401231c:	1083fdb0 	cmpltui	r2,r2,4086
 4012320:	1000021e 	bne	r2,zero,401232c <chk_mounted+0x624>
 4012324:	00800084 	movi	r2,2
 4012328:	e0bffa85 	stb	r2,-22(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 401232c:	e0fff217 	ldw	r3,-56(fp)
 4012330:	00bffd54 	movui	r2,65525
 4012334:	10c0022e 	bgeu	r2,r3,4012340 <chk_mounted+0x638>
 4012338:	008000c4 	movi	r2,3
 401233c:	e0bffa85 	stb	r2,-22(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
 4012340:	e0bff217 	ldw	r2,-56(fp)
 4012344:	10c00084 	addi	r3,r2,2
 4012348:	e0bfee17 	ldw	r2,-72(fp)
 401234c:	10c00315 	stw	r3,12(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
 4012350:	e0fff617 	ldw	r3,-40(fp)
 4012354:	e0bff317 	ldw	r2,-52(fp)
 4012358:	1887883a 	add	r3,r3,r2
 401235c:	e0bfee17 	ldw	r2,-72(fp)
 4012360:	10c00715 	stw	r3,28(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
 4012364:	e0fff00b 	ldhu	r3,-64(fp)
 4012368:	e0bff617 	ldw	r2,-40(fp)
 401236c:	1887883a 	add	r3,r3,r2
 4012370:	e0bfee17 	ldw	r2,-72(fp)
 4012374:	10c00515 	stw	r3,20(r2)
   if (fmt == FS_FAT32) {
 4012378:	e0bffa83 	ldbu	r2,-22(fp)
 401237c:	108000d8 	cmpnei	r2,r2,3
 4012380:	10002a1e 	bne	r2,zero,401242c <chk_mounted+0x724>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
 4012384:	e0bfee17 	ldw	r2,-72(fp)
 4012388:	1080020b 	ldhu	r2,8(r2)
 401238c:	10bfffcc 	andi	r2,r2,65535
 4012390:	1005003a 	cmpeq	r2,r2,zero
 4012394:	1000031e 	bne	r2,zero,40123a4 <chk_mounted+0x69c>
 4012398:	00800344 	movi	r2,13
 401239c:	e0bfff15 	stw	r2,-4(fp)
 40123a0:	00005c06 	br	4012514 <chk_mounted+0x80c>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
 40123a4:	e0bfee17 	ldw	r2,-72(fp)
 40123a8:	10800904 	addi	r2,r2,36
 40123ac:	10800bc4 	addi	r2,r2,47
 40123b0:	10800003 	ldbu	r2,0(r2)
 40123b4:	10803fcc 	andi	r2,r2,255
 40123b8:	1006963a 	slli	r3,r2,24
 40123bc:	e0bfee17 	ldw	r2,-72(fp)
 40123c0:	10800904 	addi	r2,r2,36
 40123c4:	10800b84 	addi	r2,r2,46
 40123c8:	10800003 	ldbu	r2,0(r2)
 40123cc:	10803fcc 	andi	r2,r2,255
 40123d0:	1004943a 	slli	r2,r2,16
 40123d4:	1886b03a 	or	r3,r3,r2
 40123d8:	e0bfee17 	ldw	r2,-72(fp)
 40123dc:	10800904 	addi	r2,r2,36
 40123e0:	10800b44 	addi	r2,r2,45
 40123e4:	10800003 	ldbu	r2,0(r2)
 40123e8:	10803fcc 	andi	r2,r2,255
 40123ec:	1004923a 	slli	r2,r2,8
 40123f0:	1886b03a 	or	r3,r3,r2
 40123f4:	e0bfee17 	ldw	r2,-72(fp)
 40123f8:	10800904 	addi	r2,r2,36
 40123fc:	10800b04 	addi	r2,r2,44
 4012400:	10800003 	ldbu	r2,0(r2)
 4012404:	10803fcc 	andi	r2,r2,255
 4012408:	1886b03a 	or	r3,r3,r2
 401240c:	e0bfee17 	ldw	r2,-72(fp)
 4012410:	10c00615 	stw	r3,24(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
 4012414:	e0bfee17 	ldw	r2,-72(fp)
 4012418:	10800317 	ldw	r2,12(r2)
 401241c:	1085883a 	add	r2,r2,r2
 4012420:	1085883a 	add	r2,r2,r2
 4012424:	e0bff115 	stw	r2,-60(fp)
 4012428:	00002306 	br	40124b8 <chk_mounted+0x7b0>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
 401242c:	e0bfee17 	ldw	r2,-72(fp)
 4012430:	1080020b 	ldhu	r2,8(r2)
 4012434:	10bfffcc 	andi	r2,r2,65535
 4012438:	1004c03a 	cmpne	r2,r2,zero
 401243c:	1000031e 	bne	r2,zero,401244c <chk_mounted+0x744>
 4012440:	00800344 	movi	r2,13
 4012444:	e0bfff15 	stw	r2,-4(fp)
 4012448:	00003206 	br	4012514 <chk_mounted+0x80c>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
 401244c:	e0bfee17 	ldw	r2,-72(fp)
 4012450:	10c00517 	ldw	r3,20(r2)
 4012454:	e0bff517 	ldw	r2,-44(fp)
 4012458:	1887883a 	add	r3,r3,r2
 401245c:	e0bfee17 	ldw	r2,-72(fp)
 4012460:	10c00615 	stw	r3,24(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
 4012464:	e0bffa83 	ldbu	r2,-22(fp)
 4012468:	10800098 	cmpnei	r2,r2,2
 401246c:	1000051e 	bne	r2,zero,4012484 <chk_mounted+0x77c>
 4012470:	e0bfee17 	ldw	r2,-72(fp)
 4012474:	10800317 	ldw	r2,12(r2)
 4012478:	1085883a 	add	r2,r2,r2
 401247c:	e0bffe15 	stw	r2,-8(fp)
 4012480:	00000b06 	br	40124b0 <chk_mounted+0x7a8>
 4012484:	e0bfee17 	ldw	r2,-72(fp)
 4012488:	10c00317 	ldw	r3,12(r2)
 401248c:	1805883a 	mov	r2,r3
 4012490:	1085883a 	add	r2,r2,r2
 4012494:	10c5883a 	add	r2,r2,r3
 4012498:	1006d07a 	srli	r3,r2,1
 401249c:	e0bfee17 	ldw	r2,-72(fp)
 40124a0:	10800317 	ldw	r2,12(r2)
 40124a4:	1080004c 	andi	r2,r2,1
 40124a8:	1887883a 	add	r3,r3,r2
 40124ac:	e0fffe15 	stw	r3,-8(fp)
 40124b0:	e0bffe17 	ldw	r2,-8(fp)
 40124b4:	e0bff115 	stw	r2,-60(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
 40124b8:	e0bfee17 	ldw	r2,-72(fp)
 40124bc:	10c00417 	ldw	r3,16(r2)
 40124c0:	e0bff117 	ldw	r2,-60(fp)
 40124c4:	10807fc4 	addi	r2,r2,511
 40124c8:	1004d27a 	srli	r2,r2,9
 40124cc:	1880032e 	bgeu	r3,r2,40124dc <chk_mounted+0x7d4>
      return FR_NO_FILESYSTEM;
 40124d0:	00800344 	movi	r2,13
 40124d4:	e0bfff15 	stw	r2,-4(fp)
 40124d8:	00000e06 	br	4012514 <chk_mounted+0x80c>
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
 40124dc:	e0ffee17 	ldw	r3,-72(fp)
 40124e0:	e0bffa83 	ldbu	r2,-22(fp)
 40124e4:	18800005 	stb	r2,0(r3)
   fs->id = ++Fsid;     /* File system mount ID */
 40124e8:	d0a0db0b 	ldhu	r2,-31892(gp)
 40124ec:	10800044 	addi	r2,r2,1
 40124f0:	d0a0db0d 	sth	r2,-31892(gp)
 40124f4:	d0e0db0b 	ldhu	r3,-31892(gp)
 40124f8:	e0bfee17 	ldw	r2,-72(fp)
 40124fc:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
 4012500:	e0bfee17 	ldw	r2,-72(fp)
 4012504:	10000815 	stw	zero,32(r2)
   fs->wflag = 0;
 4012508:	e0bfee17 	ldw	r2,-72(fp)
 401250c:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
 4012510:	e03fff15 	stw	zero,-4(fp)
 4012514:	e0bfff17 	ldw	r2,-4(fp)
}
 4012518:	e037883a 	mov	sp,fp
 401251c:	dfc00117 	ldw	ra,4(sp)
 4012520:	df000017 	ldw	fp,0(sp)
 4012524:	dec00204 	addi	sp,sp,8
 4012528:	f800283a 	ret

0401252c <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   FFS_U16 id        /* Member id of the target object to be checked */
)
{
 401252c:	defffb04 	addi	sp,sp,-20
 4012530:	dfc00415 	stw	ra,16(sp)
 4012534:	df000315 	stw	fp,12(sp)
 4012538:	df000304 	addi	fp,sp,12
 401253c:	e13ffd15 	stw	r4,-12(fp)
 4012540:	e17ffe0d 	sth	r5,-8(fp)
   if (!fs || !fs->fs_type || fs->id != id)
 4012544:	e0bffd17 	ldw	r2,-12(fp)
 4012548:	1005003a 	cmpeq	r2,r2,zero
 401254c:	10000a1e 	bne	r2,zero,4012578 <validate+0x4c>
 4012550:	e0bffd17 	ldw	r2,-12(fp)
 4012554:	10800003 	ldbu	r2,0(r2)
 4012558:	10803fcc 	andi	r2,r2,255
 401255c:	1005003a 	cmpeq	r2,r2,zero
 4012560:	1000051e 	bne	r2,zero,4012578 <validate+0x4c>
 4012564:	e0bffd17 	ldw	r2,-12(fp)
 4012568:	1080018b 	ldhu	r2,6(r2)
 401256c:	10ffffcc 	andi	r3,r2,65535
 4012570:	e0bffe0b 	ldhu	r2,-8(fp)
 4012574:	18800326 	beq	r3,r2,4012584 <validate+0x58>
      return FR_INVALID_OBJECT;
 4012578:	00800244 	movi	r2,9
 401257c:	e0bfff15 	stw	r2,-4(fp)
 4012580:	00000d06 	br	40125b8 <validate+0x8c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
 4012584:	e0bffd17 	ldw	r2,-12(fp)
 4012588:	10800043 	ldbu	r2,1(r2)
 401258c:	11003fcc 	andi	r4,r2,255
 4012590:	4013fa40 	call	4013fa4 <ffs_DiskIOStatus>
 4012594:	10803fcc 	andi	r2,r2,255
 4012598:	1080004c 	andi	r2,r2,1
 401259c:	10803fcc 	andi	r2,r2,255
 40125a0:	1005003a 	cmpeq	r2,r2,zero
 40125a4:	1000031e 	bne	r2,zero,40125b4 <validate+0x88>
      return FR_NOT_READY;
 40125a8:	008000c4 	movi	r2,3
 40125ac:	e0bfff15 	stw	r2,-4(fp)
 40125b0:	00000106 	br	40125b8 <validate+0x8c>

   return FR_OK;
 40125b4:	e03fff15 	stw	zero,-4(fp)
 40125b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40125bc:	e037883a 	mov	sp,fp
 40125c0:	dfc00117 	ldw	ra,4(sp)
 40125c4:	df000017 	ldw	fp,0(sp)
 40125c8:	dec00204 	addi	sp,sp,8
 40125cc:	f800283a 	ret

040125d0 <f_mount>:

FRESULT f_mount (
   FFS_U8 vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
 40125d0:	defffb04 	addi	sp,sp,-20
 40125d4:	df000415 	stw	fp,16(sp)
 40125d8:	df000404 	addi	fp,sp,16
 40125dc:	e17ffe15 	stw	r5,-8(fp)
 40125e0:	e13ffd05 	stb	r4,-12(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
 40125e4:	e0bffd03 	ldbu	r2,-12(fp)
 40125e8:	1005003a 	cmpeq	r2,r2,zero
 40125ec:	1000031e 	bne	r2,zero,40125fc <f_mount+0x2c>
      return FR_INVALID_DRIVE;
 40125f0:	008002c4 	movi	r2,11
 40125f4:	e0bfff15 	stw	r2,-4(fp)
 40125f8:	00001906 	br	4012660 <f_mount+0x90>
   rfs = FatFs[vol];       /* Get current fs object */
 40125fc:	e0bffd03 	ldbu	r2,-12(fp)
 4012600:	1085883a 	add	r2,r2,r2
 4012604:	1087883a 	add	r3,r2,r2
 4012608:	d0a0da04 	addi	r2,gp,-31896
 401260c:	1885883a 	add	r2,r3,r2
 4012610:	10800017 	ldw	r2,0(r2)
 4012614:	e0bffc15 	stw	r2,-16(fp)

   if (rfs) {
 4012618:	e0bffc17 	ldw	r2,-16(fp)
 401261c:	1005003a 	cmpeq	r2,r2,zero
 4012620:	1000021e 	bne	r2,zero,401262c <f_mount+0x5c>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
 4012624:	e0bffc17 	ldw	r2,-16(fp)
 4012628:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
 401262c:	e0bffe17 	ldw	r2,-8(fp)
 4012630:	1005003a 	cmpeq	r2,r2,zero
 4012634:	1000021e 	bne	r2,zero,4012640 <f_mount+0x70>
      fs->fs_type = 0;     /* Clear new fs object */
 4012638:	e0bffe17 	ldw	r2,-8(fp)
 401263c:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
 4012640:	e0bffd03 	ldbu	r2,-12(fp)
 4012644:	1085883a 	add	r2,r2,r2
 4012648:	1087883a 	add	r3,r2,r2
 401264c:	d0a0da04 	addi	r2,gp,-31896
 4012650:	1887883a 	add	r3,r3,r2
 4012654:	e0bffe17 	ldw	r2,-8(fp)
 4012658:	18800015 	stw	r2,0(r3)

   return FR_OK;
 401265c:	e03fff15 	stw	zero,-4(fp)
 4012660:	e0bfff17 	ldw	r2,-4(fp)
}
 4012664:	e037883a 	mov	sp,fp
 4012668:	df000017 	ldw	fp,0(sp)
 401266c:	dec00104 	addi	sp,sp,4
 4012670:	f800283a 	ret

04012674 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   FFS_U8 mode         /* Access mode and file open mode flags */
)
{
 4012674:	deffef04 	addi	sp,sp,-68
 4012678:	dfc01015 	stw	ra,64(sp)
 401267c:	df000f15 	stw	fp,60(sp)
 4012680:	df000f04 	addi	fp,sp,60
 4012684:	e13ffd15 	stw	r4,-12(fp)
 4012688:	e17ffe15 	stw	r5,-8(fp)
 401268c:	e1bfff05 	stb	r6,-4(fp)
   DIR dj;
   FFS_U8 *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
 4012690:	e0bffd17 	ldw	r2,-12(fp)
 4012694:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   res = chk_mounted(&path, &dj.fs, (FFS_U8)(mode & ~FA_READ));
#else
   mode &= FA_READ;
 4012698:	e0bfff03 	ldbu	r2,-4(fp)
 401269c:	1080004c 	andi	r2,r2,1
 40126a0:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, 0);
 40126a4:	e13ffe04 	addi	r4,fp,-8
 40126a8:	e17ff304 	addi	r5,fp,-52
 40126ac:	000d883a 	mov	r6,zero
 40126b0:	4011d080 	call	4011d08 <chk_mounted>
 40126b4:	e0bff215 	stw	r2,-56(fp)
#endif
   INIT_BUF(dj);
 40126b8:	e0bffa04 	addi	r2,fp,-24
 40126bc:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
 40126c0:	e0bff217 	ldw	r2,-56(fp)
 40126c4:	1004c03a 	cmpne	r2,r2,zero
 40126c8:	1000041e 	bne	r2,zero,40126dc <f_open+0x68>
      res = follow_path(&dj, path); /* Follow the file path */
 40126cc:	e17ffe17 	ldw	r5,-8(fp)
 40126d0:	e13ff304 	addi	r4,fp,-52
 40126d4:	40119640 	call	4011964 <follow_path>
 40126d8:	e0bff215 	stw	r2,-56(fp)
   dir = dj.dir;
 40126dc:	e0bff817 	ldw	r2,-32(fp)
 40126e0:	e0bff115 	stw	r2,-60(fp)
      if (!fp->lockid) res = FR_INT_ERR;
#endif
   }

#else          /* R/O configuration */
   if (res == FR_OK) {              /* Follow succeeded */
 40126e4:	e0bff217 	ldw	r2,-56(fp)
 40126e8:	1004c03a 	cmpne	r2,r2,zero
 40126ec:	10000f1e 	bne	r2,zero,401272c <f_open+0xb8>
      if (!dir) {                /* Current dir itself */
 40126f0:	e0bff117 	ldw	r2,-60(fp)
 40126f4:	1004c03a 	cmpne	r2,r2,zero
 40126f8:	1000031e 	bne	r2,zero,4012708 <f_open+0x94>
         res = FR_INVALID_NAME;
 40126fc:	00800184 	movi	r2,6
 4012700:	e0bff215 	stw	r2,-56(fp)
 4012704:	00000906 	br	401272c <f_open+0xb8>
      } else {
         if (dir[DIR_Attr] & AM_DIR)   /* It is a directory */
 4012708:	e0bff117 	ldw	r2,-60(fp)
 401270c:	108002c4 	addi	r2,r2,11
 4012710:	10800003 	ldbu	r2,0(r2)
 4012714:	10803fcc 	andi	r2,r2,255
 4012718:	1080040c 	andi	r2,r2,16
 401271c:	1005003a 	cmpeq	r2,r2,zero
 4012720:	1000021e 	bne	r2,zero,401272c <f_open+0xb8>
            res = FR_NO_FILE;
 4012724:	00800104 	movi	r2,4
 4012728:	e0bff215 	stw	r2,-56(fp)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
 401272c:	e0bff217 	ldw	r2,-56(fp)
 4012730:	1004c03a 	cmpne	r2,r2,zero
 4012734:	1000421e 	bne	r2,zero,4012840 <f_open+0x1cc>
      fp->flag = mode;              /* File access mode */
 4012738:	e0fffd17 	ldw	r3,-12(fp)
 401273c:	e0bfff03 	ldbu	r2,-4(fp)
 4012740:	18800185 	stb	r2,6(r3)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
 4012744:	e0bff117 	ldw	r2,-60(fp)
 4012748:	10800544 	addi	r2,r2,21
 401274c:	10800003 	ldbu	r2,0(r2)
 4012750:	10803fcc 	andi	r2,r2,255
 4012754:	1004923a 	slli	r2,r2,8
 4012758:	1007883a 	mov	r3,r2
 401275c:	e0bff117 	ldw	r2,-60(fp)
 4012760:	10800504 	addi	r2,r2,20
 4012764:	10800003 	ldbu	r2,0(r2)
 4012768:	10803fcc 	andi	r2,r2,255
 401276c:	1884b03a 	or	r2,r3,r2
 4012770:	10bfffcc 	andi	r2,r2,65535
 4012774:	1008943a 	slli	r4,r2,16
 4012778:	e0bff117 	ldw	r2,-60(fp)
 401277c:	108006c4 	addi	r2,r2,27
 4012780:	10800003 	ldbu	r2,0(r2)
 4012784:	10803fcc 	andi	r2,r2,255
 4012788:	1004923a 	slli	r2,r2,8
 401278c:	1007883a 	mov	r3,r2
 4012790:	e0bff117 	ldw	r2,-60(fp)
 4012794:	10800684 	addi	r2,r2,26
 4012798:	10800003 	ldbu	r2,0(r2)
 401279c:	10803fcc 	andi	r2,r2,255
 40127a0:	1884b03a 	or	r2,r3,r2
 40127a4:	10bfffcc 	andi	r2,r2,65535
 40127a8:	2086b03a 	or	r3,r4,r2
 40127ac:	e0bffd17 	ldw	r2,-12(fp)
 40127b0:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
 40127b4:	e0bff117 	ldw	r2,-60(fp)
 40127b8:	108007c4 	addi	r2,r2,31
 40127bc:	10800003 	ldbu	r2,0(r2)
 40127c0:	10803fcc 	andi	r2,r2,255
 40127c4:	1006963a 	slli	r3,r2,24
 40127c8:	e0bff117 	ldw	r2,-60(fp)
 40127cc:	10800784 	addi	r2,r2,30
 40127d0:	10800003 	ldbu	r2,0(r2)
 40127d4:	10803fcc 	andi	r2,r2,255
 40127d8:	1004943a 	slli	r2,r2,16
 40127dc:	1886b03a 	or	r3,r3,r2
 40127e0:	e0bff117 	ldw	r2,-60(fp)
 40127e4:	10800744 	addi	r2,r2,29
 40127e8:	10800003 	ldbu	r2,0(r2)
 40127ec:	10803fcc 	andi	r2,r2,255
 40127f0:	1004923a 	slli	r2,r2,8
 40127f4:	1886b03a 	or	r3,r3,r2
 40127f8:	e0bff117 	ldw	r2,-60(fp)
 40127fc:	10800704 	addi	r2,r2,28
 4012800:	10800003 	ldbu	r2,0(r2)
 4012804:	10803fcc 	andi	r2,r2,255
 4012808:	1886b03a 	or	r3,r3,r2
 401280c:	e0bffd17 	ldw	r2,-12(fp)
 4012810:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
 4012814:	e0bffd17 	ldw	r2,-12(fp)
 4012818:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
 401281c:	e0bffd17 	ldw	r2,-12(fp)
 4012820:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
 4012824:	e0fff317 	ldw	r3,-52(fp)
 4012828:	e0bffd17 	ldw	r2,-12(fp)
 401282c:	10c00015 	stw	r3,0(r2)
 4012830:	e0bff317 	ldw	r2,-52(fp)
 4012834:	10c0018b 	ldhu	r3,6(r2)
 4012838:	e0bffd17 	ldw	r2,-12(fp)
 401283c:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
 4012840:	e0bff217 	ldw	r2,-56(fp)
}
 4012844:	e037883a 	mov	sp,fp
 4012848:	dfc00117 	ldw	ra,4(sp)
 401284c:	df000017 	ldw	fp,0(sp)
 4012850:	dec00204 	addi	sp,sp,8
 4012854:	f800283a 	ret

04012858 <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   FFS_U32 btr,      /* Number of bytes to read */
   FFS_U32 *br    /* Pointer to number of bytes read */
)
{
 4012858:	defff104 	addi	sp,sp,-60
 401285c:	dfc00e15 	stw	ra,56(sp)
 4012860:	df000d15 	stw	fp,52(sp)
 4012864:	df000d04 	addi	fp,sp,52
 4012868:	e13ffb15 	stw	r4,-20(fp)
 401286c:	e17ffc15 	stw	r5,-16(fp)
 4012870:	e1bffd15 	stw	r6,-12(fp)
 4012874:	e1fffe15 	stw	r7,-8(fp)
   FRESULT res;
   FFS_U32 clst, sect, remain;
   FFS_U32 rcnt, cc;
   FFS_U8 csect, *rbuff = buff;
 4012878:	e0bffc17 	ldw	r2,-16(fp)
 401287c:	e0bff315 	stw	r2,-52(fp)


   *br = 0; /* Initialize byte counter */
 4012880:	e0bffe17 	ldw	r2,-8(fp)
 4012884:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
 4012888:	e0bffb17 	ldw	r2,-20(fp)
 401288c:	11000017 	ldw	r4,0(r2)
 4012890:	e0bffb17 	ldw	r2,-20(fp)
 4012894:	1080010b 	ldhu	r2,4(r2)
 4012898:	117fffcc 	andi	r5,r2,65535
 401289c:	401252c0 	call	401252c <validate>
 40128a0:	e0bffa15 	stw	r2,-24(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
 40128a4:	e0bffa17 	ldw	r2,-24(fp)
 40128a8:	1005003a 	cmpeq	r2,r2,zero
 40128ac:	1000031e 	bne	r2,zero,40128bc <f_read+0x64>
 40128b0:	e0bffa17 	ldw	r2,-24(fp)
 40128b4:	e0bfff15 	stw	r2,-4(fp)
 40128b8:	0000e906 	br	4012c60 <f_read+0x408>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
 40128bc:	e0bffb17 	ldw	r2,-20(fp)
 40128c0:	10800183 	ldbu	r2,6(r2)
 40128c4:	10803fcc 	andi	r2,r2,255
 40128c8:	1080201c 	xori	r2,r2,128
 40128cc:	10bfe004 	addi	r2,r2,-128
 40128d0:	1004403a 	cmpge	r2,r2,zero
 40128d4:	1000031e 	bne	r2,zero,40128e4 <f_read+0x8c>
      LEAVE_FF(fp->fs, FR_INT_ERR);
 40128d8:	00800084 	movi	r2,2
 40128dc:	e0bfff15 	stw	r2,-4(fp)
 40128e0:	0000df06 	br	4012c60 <f_read+0x408>
   if (!(fp->flag & FA_READ))                /* Check access mode */
 40128e4:	e0bffb17 	ldw	r2,-20(fp)
 40128e8:	10800183 	ldbu	r2,6(r2)
 40128ec:	10803fcc 	andi	r2,r2,255
 40128f0:	1080004c 	andi	r2,r2,1
 40128f4:	1004c03a 	cmpne	r2,r2,zero
 40128f8:	1000031e 	bne	r2,zero,4012908 <f_read+0xb0>
      LEAVE_FF(fp->fs, FR_DENIED);
 40128fc:	008001c4 	movi	r2,7
 4012900:	e0bfff15 	stw	r2,-4(fp)
 4012904:	0000d606 	br	4012c60 <f_read+0x408>
   remain = fp->fsize - fp->fptr;
 4012908:	e0bffb17 	ldw	r2,-20(fp)
 401290c:	10c00317 	ldw	r3,12(r2)
 4012910:	e0bffb17 	ldw	r2,-20(fp)
 4012914:	10800217 	ldw	r2,8(r2)
 4012918:	1885c83a 	sub	r2,r3,r2
 401291c:	e0bff715 	stw	r2,-36(fp)
   if (btr > remain) btr = (FFS_U32)remain;     /* Truncate btr by remaining bytes */
 4012920:	e0fffd17 	ldw	r3,-12(fp)
 4012924:	e0bff717 	ldw	r2,-36(fp)
 4012928:	10c0c92e 	bgeu	r2,r3,4012c50 <f_read+0x3f8>
 401292c:	e0bff717 	ldw	r2,-36(fp)
 4012930:	e0bffd15 	stw	r2,-12(fp)

   for ( ;  btr;                       /* Repeat until all data read */
 4012934:	0000c606 	br	4012c50 <f_read+0x3f8>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
 4012938:	e0bffb17 	ldw	r2,-20(fp)
 401293c:	10800217 	ldw	r2,8(r2)
 4012940:	10807fcc 	andi	r2,r2,511
 4012944:	1004c03a 	cmpne	r2,r2,zero
 4012948:	1000991e 	bne	r2,zero,4012bb0 <f_read+0x358>
         csect = (FFS_U8)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
 401294c:	e0bffb17 	ldw	r2,-20(fp)
 4012950:	10800217 	ldw	r2,8(r2)
 4012954:	1004d27a 	srli	r2,r2,9
 4012958:	1007883a 	mov	r3,r2
 401295c:	e0bffb17 	ldw	r2,-20(fp)
 4012960:	10800017 	ldw	r2,0(r2)
 4012964:	10800083 	ldbu	r2,2(r2)
 4012968:	10bfffc4 	addi	r2,r2,-1
 401296c:	1884703a 	and	r2,r3,r2
 4012970:	e0bff405 	stb	r2,-48(fp)
         if (!csect) {                 /* On the cluster boundary? */
 4012974:	e0bff403 	ldbu	r2,-48(fp)
 4012978:	1004c03a 	cmpne	r2,r2,zero
 401297c:	10002b1e 	bne	r2,zero,4012a2c <f_read+0x1d4>
            if (fp->fptr == 0) {       /* On the top of the file? */
 4012980:	e0bffb17 	ldw	r2,-20(fp)
 4012984:	10800217 	ldw	r2,8(r2)
 4012988:	1004c03a 	cmpne	r2,r2,zero
 401298c:	1000041e 	bne	r2,zero,40129a0 <f_read+0x148>
               clst = fp->sclust;         /* Follow from the origin */
 4012990:	e0bffb17 	ldw	r2,-20(fp)
 4012994:	10800417 	ldw	r2,16(r2)
 4012998:	e0bff915 	stw	r2,-28(fp)
 401299c:	00000606 	br	40129b8 <f_read+0x160>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
 40129a0:	e0bffb17 	ldw	r2,-20(fp)
 40129a4:	11000017 	ldw	r4,0(r2)
 40129a8:	e0bffb17 	ldw	r2,-20(fp)
 40129ac:	11400517 	ldw	r5,20(r2)
 40129b0:	4010ba80 	call	4010ba8 <get_fat>
 40129b4:	e0bff915 	stw	r2,-28(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 40129b8:	e0bff917 	ldw	r2,-28(fp)
 40129bc:	108000a8 	cmpgeui	r2,r2,2
 40129c0:	10000a1e 	bne	r2,zero,40129ec <f_read+0x194>
 40129c4:	e0bffb17 	ldw	r2,-20(fp)
 40129c8:	10c00183 	ldbu	r3,6(r2)
 40129cc:	00bfe004 	movi	r2,-128
 40129d0:	1884b03a 	or	r2,r3,r2
 40129d4:	1007883a 	mov	r3,r2
 40129d8:	e0bffb17 	ldw	r2,-20(fp)
 40129dc:	10c00185 	stb	r3,6(r2)
 40129e0:	00800084 	movi	r2,2
 40129e4:	e0bfff15 	stw	r2,-4(fp)
 40129e8:	00009d06 	br	4012c60 <f_read+0x408>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 40129ec:	e0bff917 	ldw	r2,-28(fp)
 40129f0:	10bfffd8 	cmpnei	r2,r2,-1
 40129f4:	10000a1e 	bne	r2,zero,4012a20 <f_read+0x1c8>
 40129f8:	e0bffb17 	ldw	r2,-20(fp)
 40129fc:	10c00183 	ldbu	r3,6(r2)
 4012a00:	00bfe004 	movi	r2,-128
 4012a04:	1884b03a 	or	r2,r3,r2
 4012a08:	1007883a 	mov	r3,r2
 4012a0c:	e0bffb17 	ldw	r2,-20(fp)
 4012a10:	10c00185 	stb	r3,6(r2)
 4012a14:	00800044 	movi	r2,1
 4012a18:	e0bfff15 	stw	r2,-4(fp)
 4012a1c:	00009006 	br	4012c60 <f_read+0x408>
            fp->clust = clst;          /* Update current cluster */
 4012a20:	e0fffb17 	ldw	r3,-20(fp)
 4012a24:	e0bff917 	ldw	r2,-28(fp)
 4012a28:	18800515 	stw	r2,20(r3)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
 4012a2c:	e0bffb17 	ldw	r2,-20(fp)
 4012a30:	11000017 	ldw	r4,0(r2)
 4012a34:	e0bffb17 	ldw	r2,-20(fp)
 4012a38:	11400517 	ldw	r5,20(r2)
 4012a3c:	4010b280 	call	4010b28 <clust2sect>
 4012a40:	e0bff815 	stw	r2,-32(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4012a44:	e0bff817 	ldw	r2,-32(fp)
 4012a48:	1004c03a 	cmpne	r2,r2,zero
 4012a4c:	10000a1e 	bne	r2,zero,4012a78 <f_read+0x220>
 4012a50:	e0bffb17 	ldw	r2,-20(fp)
 4012a54:	10c00183 	ldbu	r3,6(r2)
 4012a58:	00bfe004 	movi	r2,-128
 4012a5c:	1884b03a 	or	r2,r3,r2
 4012a60:	1007883a 	mov	r3,r2
 4012a64:	e0bffb17 	ldw	r2,-20(fp)
 4012a68:	10c00185 	stb	r3,6(r2)
 4012a6c:	00800084 	movi	r2,2
 4012a70:	e0bfff15 	stw	r2,-4(fp)
 4012a74:	00007a06 	br	4012c60 <f_read+0x408>
         sect += csect;
 4012a78:	e0fff403 	ldbu	r3,-48(fp)
 4012a7c:	e0bff817 	ldw	r2,-32(fp)
 4012a80:	10c5883a 	add	r2,r2,r3
 4012a84:	e0bff815 	stw	r2,-32(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
 4012a88:	e0bffd17 	ldw	r2,-12(fp)
 4012a8c:	1004d27a 	srli	r2,r2,9
 4012a90:	e0bff515 	stw	r2,-44(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
 4012a94:	e0bff517 	ldw	r2,-44(fp)
 4012a98:	1005003a 	cmpeq	r2,r2,zero
 4012a9c:	1000281e 	bne	r2,zero,4012b40 <f_read+0x2e8>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
 4012aa0:	e0fff403 	ldbu	r3,-48(fp)
 4012aa4:	e0bff517 	ldw	r2,-44(fp)
 4012aa8:	1887883a 	add	r3,r3,r2
 4012aac:	e0bffb17 	ldw	r2,-20(fp)
 4012ab0:	10800017 	ldw	r2,0(r2)
 4012ab4:	10800083 	ldbu	r2,2(r2)
 4012ab8:	10803fcc 	andi	r2,r2,255
 4012abc:	10c0072e 	bgeu	r2,r3,4012adc <f_read+0x284>
               cc = fp->fs->csize - csect;
 4012ac0:	e0bffb17 	ldw	r2,-20(fp)
 4012ac4:	10800017 	ldw	r2,0(r2)
 4012ac8:	10800083 	ldbu	r2,2(r2)
 4012acc:	10c03fcc 	andi	r3,r2,255
 4012ad0:	e0bff403 	ldbu	r2,-48(fp)
 4012ad4:	1885c83a 	sub	r2,r3,r2
 4012ad8:	e0bff515 	stw	r2,-44(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (FFS_U8)cc) != RES_OK)
 4012adc:	e0bffb17 	ldw	r2,-20(fp)
 4012ae0:	10800017 	ldw	r2,0(r2)
 4012ae4:	10800043 	ldbu	r2,1(r2)
 4012ae8:	11003fcc 	andi	r4,r2,255
 4012aec:	e0bff517 	ldw	r2,-44(fp)
 4012af0:	11c03fcc 	andi	r7,r2,255
 4012af4:	e17ff317 	ldw	r5,-52(fp)
 4012af8:	e1bff817 	ldw	r6,-32(fp)
 4012afc:	4013fcc0 	call	4013fcc <ffs_DiskIORead>
 4012b00:	1005003a 	cmpeq	r2,r2,zero
 4012b04:	10000a1e 	bne	r2,zero,4012b30 <f_read+0x2d8>
               ABORT(fp->fs, FR_DISK_ERR);
 4012b08:	e0bffb17 	ldw	r2,-20(fp)
 4012b0c:	10c00183 	ldbu	r3,6(r2)
 4012b10:	00bfe004 	movi	r2,-128
 4012b14:	1884b03a 	or	r2,r3,r2
 4012b18:	1007883a 	mov	r3,r2
 4012b1c:	e0bffb17 	ldw	r2,-20(fp)
 4012b20:	10c00185 	stb	r3,6(r2)
 4012b24:	00800044 	movi	r2,1
 4012b28:	e0bfff15 	stw	r2,-4(fp)
 4012b2c:	00004c06 	br	4012c60 <f_read+0x408>
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
 4012b30:	e0bff517 	ldw	r2,-44(fp)
 4012b34:	1004927a 	slli	r2,r2,9
 4012b38:	e0bff615 	stw	r2,-40(fp)
            continue;
 4012b3c:	00003006 	br	4012c00 <f_read+0x3a8>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
 4012b40:	e0bffb17 	ldw	r2,-20(fp)
 4012b44:	10c00617 	ldw	r3,24(r2)
 4012b48:	e0bff817 	ldw	r2,-32(fp)
 4012b4c:	18801526 	beq	r3,r2,4012ba4 <f_read+0x34c>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
               fp->flag &= ~FA__DIRTY;
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
 4012b50:	e0bffb17 	ldw	r2,-20(fp)
 4012b54:	10800017 	ldw	r2,0(r2)
 4012b58:	10800043 	ldbu	r2,1(r2)
 4012b5c:	11003fcc 	andi	r4,r2,255
 4012b60:	e0bffb17 	ldw	r2,-20(fp)
 4012b64:	11400704 	addi	r5,r2,28
 4012b68:	e1bff817 	ldw	r6,-32(fp)
 4012b6c:	01c00044 	movi	r7,1
 4012b70:	4013fcc0 	call	4013fcc <ffs_DiskIORead>
 4012b74:	1005003a 	cmpeq	r2,r2,zero
 4012b78:	10000a1e 	bne	r2,zero,4012ba4 <f_read+0x34c>
               ABORT(fp->fs, FR_DISK_ERR);
 4012b7c:	e0bffb17 	ldw	r2,-20(fp)
 4012b80:	10c00183 	ldbu	r3,6(r2)
 4012b84:	00bfe004 	movi	r2,-128
 4012b88:	1884b03a 	or	r2,r3,r2
 4012b8c:	1007883a 	mov	r3,r2
 4012b90:	e0bffb17 	ldw	r2,-20(fp)
 4012b94:	10c00185 	stb	r3,6(r2)
 4012b98:	00800044 	movi	r2,1
 4012b9c:	e0bfff15 	stw	r2,-4(fp)
 4012ba0:	00002f06 	br	4012c60 <f_read+0x408>
         }
#endif
         fp->dsect = sect;
 4012ba4:	e0fffb17 	ldw	r3,-20(fp)
 4012ba8:	e0bff817 	ldw	r2,-32(fp)
 4012bac:	18800615 	stw	r2,24(r3)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
 4012bb0:	e0bffb17 	ldw	r2,-20(fp)
 4012bb4:	10800217 	ldw	r2,8(r2)
 4012bb8:	10c07fcc 	andi	r3,r2,511
 4012bbc:	00808004 	movi	r2,512
 4012bc0:	10c5c83a 	sub	r2,r2,r3
 4012bc4:	e0bff615 	stw	r2,-40(fp)
      if (rcnt > btr) rcnt = btr;
 4012bc8:	e0fff617 	ldw	r3,-40(fp)
 4012bcc:	e0bffd17 	ldw	r2,-12(fp)
 4012bd0:	10c0022e 	bgeu	r2,r3,4012bdc <f_read+0x384>
 4012bd4:	e0bffd17 	ldw	r2,-12(fp)
 4012bd8:	e0bff615 	stw	r2,-40(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
 4012bdc:	e0bffb17 	ldw	r2,-20(fp)
 4012be0:	10c00704 	addi	r3,r2,28
 4012be4:	e0bffb17 	ldw	r2,-20(fp)
 4012be8:	10800217 	ldw	r2,8(r2)
 4012bec:	10807fcc 	andi	r2,r2,511
 4012bf0:	188b883a 	add	r5,r3,r2
 4012bf4:	e13ff317 	ldw	r4,-52(fp)
 4012bf8:	e1bff617 	ldw	r6,-40(fp)
 4012bfc:	40108840 	call	4010884 <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (FFS_U32)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4012c00:	e0fff617 	ldw	r3,-40(fp)
 4012c04:	e0bff317 	ldw	r2,-52(fp)
 4012c08:	10c5883a 	add	r2,r2,r3
 4012c0c:	e0bff315 	stw	r2,-52(fp)
 4012c10:	e0bffb17 	ldw	r2,-20(fp)
 4012c14:	10c00217 	ldw	r3,8(r2)
 4012c18:	e0bff617 	ldw	r2,-40(fp)
 4012c1c:	1887883a 	add	r3,r3,r2
 4012c20:	e0bffb17 	ldw	r2,-20(fp)
 4012c24:	10c00215 	stw	r3,8(r2)
 4012c28:	e0bffe17 	ldw	r2,-8(fp)
 4012c2c:	10c00017 	ldw	r3,0(r2)
 4012c30:	e0bff617 	ldw	r2,-40(fp)
 4012c34:	1887883a 	add	r3,r3,r2
 4012c38:	e0bffe17 	ldw	r2,-8(fp)
 4012c3c:	10c00015 	stw	r3,0(r2)
 4012c40:	e0fffd17 	ldw	r3,-12(fp)
 4012c44:	e0bff617 	ldw	r2,-40(fp)
 4012c48:	1885c83a 	sub	r2,r3,r2
 4012c4c:	e0bffd15 	stw	r2,-12(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (FFS_U32)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
 4012c50:	e0bffd17 	ldw	r2,-12(fp)
 4012c54:	1004c03a 	cmpne	r2,r2,zero
 4012c58:	103f371e 	bne	r2,zero,4012938 <f_read+0xe0>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
 4012c5c:	e03fff15 	stw	zero,-4(fp)
 4012c60:	e0bfff17 	ldw	r2,-4(fp)
}
 4012c64:	e037883a 	mov	sp,fp
 4012c68:	dfc00117 	ldw	ra,4(sp)
 4012c6c:	df000017 	ldw	fp,0(sp)
 4012c70:	dec00204 	addi	sp,sp,8
 4012c74:	f800283a 	ret

04012c78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
 4012c78:	defffb04 	addi	sp,sp,-20
 4012c7c:	dfc00415 	stw	ra,16(sp)
 4012c80:	df000315 	stw	fp,12(sp)
 4012c84:	df000304 	addi	fp,sp,12
 4012c88:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;

#if _FS_READONLY
   FATFS *fs = fp->fs;
 4012c8c:	e0bfff17 	ldw	r2,-4(fp)
 4012c90:	10800017 	ldw	r2,0(r2)
 4012c94:	e0bffd15 	stw	r2,-12(fp)
   res = validate(fs, fp->id);
 4012c98:	e0bfff17 	ldw	r2,-4(fp)
 4012c9c:	1080010b 	ldhu	r2,4(r2)
 4012ca0:	117fffcc 	andi	r5,r2,65535
 4012ca4:	e13ffd17 	ldw	r4,-12(fp)
 4012ca8:	401252c0 	call	401252c <validate>
 4012cac:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
 4012cb0:	e0bffe17 	ldw	r2,-8(fp)
 4012cb4:	1004c03a 	cmpne	r2,r2,zero
 4012cb8:	1000021e 	bne	r2,zero,4012cc4 <f_close+0x4c>
 4012cbc:	e0bfff17 	ldw	r2,-4(fp)
 4012cc0:	10000015 	stw	zero,0(r2)
   LEAVE_FF(fs, res);
 4012cc4:	e0bffe17 	ldw	r2,-8(fp)
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   return res;
#endif
}
 4012cc8:	e037883a 	mov	sp,fp
 4012ccc:	dfc00117 	ldw	ra,4(sp)
 4012cd0:	df000017 	ldw	fp,0(sp)
 4012cd4:	dec00204 	addi	sp,sp,8
 4012cd8:	f800283a 	ret

04012cdc <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   FFS_U32 ofs      /* File pointer from top of file */
)
{
 4012cdc:	defff504 	addi	sp,sp,-44
 4012ce0:	dfc00a15 	stw	ra,40(sp)
 4012ce4:	df000915 	stw	fp,36(sp)
 4012ce8:	dc000815 	stw	r16,32(sp)
 4012cec:	df000804 	addi	fp,sp,32
 4012cf0:	e13ffd15 	stw	r4,-12(fp)
 4012cf4:	e17ffe15 	stw	r5,-8(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
 4012cf8:	e0bffd17 	ldw	r2,-12(fp)
 4012cfc:	11000017 	ldw	r4,0(r2)
 4012d00:	e0bffd17 	ldw	r2,-12(fp)
 4012d04:	1080010b 	ldhu	r2,4(r2)
 4012d08:	117fffcc 	andi	r5,r2,65535
 4012d0c:	401252c0 	call	401252c <validate>
 4012d10:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4012d14:	e0bffc17 	ldw	r2,-16(fp)
 4012d18:	1005003a 	cmpeq	r2,r2,zero
 4012d1c:	1000031e 	bne	r2,zero,4012d2c <f_lseek+0x50>
 4012d20:	e0bffc17 	ldw	r2,-16(fp)
 4012d24:	e0bfff15 	stw	r2,-4(fp)
 4012d28:	0000c006 	br	401302c <f_lseek+0x350>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
 4012d2c:	e0bffd17 	ldw	r2,-12(fp)
 4012d30:	10800183 	ldbu	r2,6(r2)
 4012d34:	10803fcc 	andi	r2,r2,255
 4012d38:	1080201c 	xori	r2,r2,128
 4012d3c:	10bfe004 	addi	r2,r2,-128
 4012d40:	1004403a 	cmpge	r2,r2,zero
 4012d44:	1000031e 	bne	r2,zero,4012d54 <f_lseek+0x78>
      LEAVE_FF(fp->fs, FR_INT_ERR);
 4012d48:	00800084 	movi	r2,2
 4012d4c:	e0bfff15 	stw	r2,-4(fp)
 4012d50:	0000b606 	br	401302c <f_lseek+0x350>

   /* Normal Seek */
   {
      FFS_U32 clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
 4012d54:	e0bffd17 	ldw	r2,-12(fp)
 4012d58:	10c00317 	ldw	r3,12(r2)
 4012d5c:	e0bffe17 	ldw	r2,-8(fp)
 4012d60:	1880032e 	bgeu	r3,r2,4012d70 <f_lseek+0x94>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
#endif
         ) ofs = fp->fsize;
 4012d64:	e0bffd17 	ldw	r2,-12(fp)
 4012d68:	10800317 	ldw	r2,12(r2)
 4012d6c:	e0bffe15 	stw	r2,-8(fp)

      ifptr = fp->fptr;
 4012d70:	e0bffd17 	ldw	r2,-12(fp)
 4012d74:	10800217 	ldw	r2,8(r2)
 4012d78:	e0bff815 	stw	r2,-32(fp)
      fp->fptr = nsect = 0;
 4012d7c:	e03ff915 	stw	zero,-28(fp)
 4012d80:	e0fffd17 	ldw	r3,-12(fp)
 4012d84:	e0bff917 	ldw	r2,-28(fp)
 4012d88:	18800215 	stw	r2,8(r3)
      if (ofs) {
 4012d8c:	e0bffe17 	ldw	r2,-8(fp)
 4012d90:	1005003a 	cmpeq	r2,r2,zero
 4012d94:	1000821e 	bne	r2,zero,4012fa0 <f_lseek+0x2c4>
         bcs = (FFS_U32)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
 4012d98:	e0bffd17 	ldw	r2,-12(fp)
 4012d9c:	10800017 	ldw	r2,0(r2)
 4012da0:	10800083 	ldbu	r2,2(r2)
 4012da4:	10803fcc 	andi	r2,r2,255
 4012da8:	1004927a 	slli	r2,r2,9
 4012dac:	e0bffa15 	stw	r2,-24(fp)
         if (ifptr > 0 &&
 4012db0:	e0bff817 	ldw	r2,-32(fp)
 4012db4:	1005003a 	cmpeq	r2,r2,zero
 4012db8:	10001a1e 	bne	r2,zero,4012e24 <f_lseek+0x148>
 4012dbc:	e0bffe17 	ldw	r2,-8(fp)
 4012dc0:	113fffc4 	addi	r4,r2,-1
 4012dc4:	e17ffa17 	ldw	r5,-24(fp)
 4012dc8:	4014ce40 	call	4014ce4 <__udivsi3>
 4012dcc:	1021883a 	mov	r16,r2
 4012dd0:	e0bff817 	ldw	r2,-32(fp)
 4012dd4:	113fffc4 	addi	r4,r2,-1
 4012dd8:	e17ffa17 	ldw	r5,-24(fp)
 4012ddc:	4014ce40 	call	4014ce4 <__udivsi3>
 4012de0:	80801036 	bltu	r16,r2,4012e24 <f_lseek+0x148>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
 4012de4:	e0bff817 	ldw	r2,-32(fp)
 4012de8:	10ffffc4 	addi	r3,r2,-1
 4012dec:	e0bffa17 	ldw	r2,-24(fp)
 4012df0:	0085c83a 	sub	r2,zero,r2
 4012df4:	1886703a 	and	r3,r3,r2
 4012df8:	e0bffd17 	ldw	r2,-12(fp)
 4012dfc:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
 4012e00:	e0bffd17 	ldw	r2,-12(fp)
 4012e04:	10c00217 	ldw	r3,8(r2)
 4012e08:	e0bffe17 	ldw	r2,-8(fp)
 4012e0c:	10c5c83a 	sub	r2,r2,r3
 4012e10:	e0bffe15 	stw	r2,-8(fp)
            clst = fp->clust;
 4012e14:	e0bffd17 	ldw	r2,-12(fp)
 4012e18:	10800517 	ldw	r2,20(r2)
 4012e1c:	e0bffb15 	stw	r2,-20(fp)

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (FFS_U32)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
 4012e20:	00000606 	br	4012e3c <f_lseek+0x160>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
            ofs -= fp->fptr;
            clst = fp->clust;
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
 4012e24:	e0bffd17 	ldw	r2,-12(fp)
 4012e28:	10800417 	ldw	r2,16(r2)
 4012e2c:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
               fp->sclust = clst;
            }
#endif
            fp->clust = clst;
 4012e30:	e0fffd17 	ldw	r3,-12(fp)
 4012e34:	e0bffb17 	ldw	r2,-20(fp)
 4012e38:	18800515 	stw	r2,20(r3)
         }
         if (clst != 0) {
 4012e3c:	e0bffb17 	ldw	r2,-20(fp)
 4012e40:	1005003a 	cmpeq	r2,r2,zero
 4012e44:	1000561e 	bne	r2,zero,4012fa0 <f_lseek+0x2c4>
            while (ofs > bcs) {                 /* Cluster following loop */
 4012e48:	00003106 	br	4012f10 <f_lseek+0x234>
                  if (clst == 0) {           /* When disk gets full, clip file size */
                     ofs = bcs; break;
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
 4012e4c:	e0bffd17 	ldw	r2,-12(fp)
 4012e50:	11000017 	ldw	r4,0(r2)
 4012e54:	e17ffb17 	ldw	r5,-20(fp)
 4012e58:	4010ba80 	call	4010ba8 <get_fat>
 4012e5c:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4012e60:	e0bffb17 	ldw	r2,-20(fp)
 4012e64:	10bfffd8 	cmpnei	r2,r2,-1
 4012e68:	10000a1e 	bne	r2,zero,4012e94 <f_lseek+0x1b8>
 4012e6c:	e0bffd17 	ldw	r2,-12(fp)
 4012e70:	10c00183 	ldbu	r3,6(r2)
 4012e74:	00bfe004 	movi	r2,-128
 4012e78:	1884b03a 	or	r2,r3,r2
 4012e7c:	1007883a 	mov	r3,r2
 4012e80:	e0bffd17 	ldw	r2,-12(fp)
 4012e84:	10c00185 	stb	r3,6(r2)
 4012e88:	00800044 	movi	r2,1
 4012e8c:	e0bfff15 	stw	r2,-4(fp)
 4012e90:	00006606 	br	401302c <f_lseek+0x350>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 4012e94:	e0bffb17 	ldw	r2,-20(fp)
 4012e98:	108000b0 	cmpltui	r2,r2,2
 4012e9c:	1000051e 	bne	r2,zero,4012eb4 <f_lseek+0x1d8>
 4012ea0:	e0bffd17 	ldw	r2,-12(fp)
 4012ea4:	10800017 	ldw	r2,0(r2)
 4012ea8:	10c00317 	ldw	r3,12(r2)
 4012eac:	e0bffb17 	ldw	r2,-20(fp)
 4012eb0:	10c00a36 	bltu	r2,r3,4012edc <f_lseek+0x200>
 4012eb4:	e0bffd17 	ldw	r2,-12(fp)
 4012eb8:	10c00183 	ldbu	r3,6(r2)
 4012ebc:	00bfe004 	movi	r2,-128
 4012ec0:	1884b03a 	or	r2,r3,r2
 4012ec4:	1007883a 	mov	r3,r2
 4012ec8:	e0bffd17 	ldw	r2,-12(fp)
 4012ecc:	10c00185 	stb	r3,6(r2)
 4012ed0:	00800084 	movi	r2,2
 4012ed4:	e0bfff15 	stw	r2,-4(fp)
 4012ed8:	00005406 	br	401302c <f_lseek+0x350>
               fp->clust = clst;
 4012edc:	e0fffd17 	ldw	r3,-12(fp)
 4012ee0:	e0bffb17 	ldw	r2,-20(fp)
 4012ee4:	18800515 	stw	r2,20(r3)
               fp->fptr += bcs;
 4012ee8:	e0bffd17 	ldw	r2,-12(fp)
 4012eec:	10c00217 	ldw	r3,8(r2)
 4012ef0:	e0bffa17 	ldw	r2,-24(fp)
 4012ef4:	1887883a 	add	r3,r3,r2
 4012ef8:	e0bffd17 	ldw	r2,-12(fp)
 4012efc:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
 4012f00:	e0fffe17 	ldw	r3,-8(fp)
 4012f04:	e0bffa17 	ldw	r2,-24(fp)
 4012f08:	1885c83a 	sub	r2,r3,r2
 4012f0c:	e0bffe15 	stw	r2,-8(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
 4012f10:	e0fffe17 	ldw	r3,-8(fp)
 4012f14:	e0bffa17 	ldw	r2,-24(fp)
 4012f18:	10ffcc36 	bltu	r2,r3,4012e4c <f_lseek+0x170>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
 4012f1c:	e0bffd17 	ldw	r2,-12(fp)
 4012f20:	10c00217 	ldw	r3,8(r2)
 4012f24:	e0bffe17 	ldw	r2,-8(fp)
 4012f28:	1887883a 	add	r3,r3,r2
 4012f2c:	e0bffd17 	ldw	r2,-12(fp)
 4012f30:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
 4012f34:	e0bffe17 	ldw	r2,-8(fp)
 4012f38:	10807fcc 	andi	r2,r2,511
 4012f3c:	1005003a 	cmpeq	r2,r2,zero
 4012f40:	1000171e 	bne	r2,zero,4012fa0 <f_lseek+0x2c4>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
 4012f44:	e0bffd17 	ldw	r2,-12(fp)
 4012f48:	11000017 	ldw	r4,0(r2)
 4012f4c:	e17ffb17 	ldw	r5,-20(fp)
 4012f50:	4010b280 	call	4010b28 <clust2sect>
 4012f54:	e0bff915 	stw	r2,-28(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 4012f58:	e0bff917 	ldw	r2,-28(fp)
 4012f5c:	1004c03a 	cmpne	r2,r2,zero
 4012f60:	10000a1e 	bne	r2,zero,4012f8c <f_lseek+0x2b0>
 4012f64:	e0bffd17 	ldw	r2,-12(fp)
 4012f68:	10c00183 	ldbu	r3,6(r2)
 4012f6c:	00bfe004 	movi	r2,-128
 4012f70:	1884b03a 	or	r2,r3,r2
 4012f74:	1007883a 	mov	r3,r2
 4012f78:	e0bffd17 	ldw	r2,-12(fp)
 4012f7c:	10c00185 	stb	r3,6(r2)
 4012f80:	00800084 	movi	r2,2
 4012f84:	e0bfff15 	stw	r2,-4(fp)
 4012f88:	00002806 	br	401302c <f_lseek+0x350>
               nsect += ofs / SS(fp->fs);
 4012f8c:	e0bffe17 	ldw	r2,-8(fp)
 4012f90:	1006d27a 	srli	r3,r2,9
 4012f94:	e0bff917 	ldw	r2,-28(fp)
 4012f98:	10c5883a 	add	r2,r2,r3
 4012f9c:	e0bff915 	stw	r2,-28(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
 4012fa0:	e0bffd17 	ldw	r2,-12(fp)
 4012fa4:	10800217 	ldw	r2,8(r2)
 4012fa8:	10807fcc 	andi	r2,r2,511
 4012fac:	1005003a 	cmpeq	r2,r2,zero
 4012fb0:	10001c1e 	bne	r2,zero,4013024 <f_lseek+0x348>
 4012fb4:	e0bffd17 	ldw	r2,-12(fp)
 4012fb8:	10c00617 	ldw	r3,24(r2)
 4012fbc:	e0bff917 	ldw	r2,-28(fp)
 4012fc0:	18801826 	beq	r3,r2,4013024 <f_lseek+0x348>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
               ABORT(fp->fs, FR_DISK_ERR);
            fp->flag &= ~FA__DIRTY;
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
 4012fc4:	e0bffd17 	ldw	r2,-12(fp)
 4012fc8:	10800017 	ldw	r2,0(r2)
 4012fcc:	10800043 	ldbu	r2,1(r2)
 4012fd0:	11003fcc 	andi	r4,r2,255
 4012fd4:	e0bffd17 	ldw	r2,-12(fp)
 4012fd8:	11400704 	addi	r5,r2,28
 4012fdc:	e1bff917 	ldw	r6,-28(fp)
 4012fe0:	01c00044 	movi	r7,1
 4012fe4:	4013fcc0 	call	4013fcc <ffs_DiskIORead>
 4012fe8:	1005003a 	cmpeq	r2,r2,zero
 4012fec:	10000a1e 	bne	r2,zero,4013018 <f_lseek+0x33c>
            ABORT(fp->fs, FR_DISK_ERR);
 4012ff0:	e0bffd17 	ldw	r2,-12(fp)
 4012ff4:	10c00183 	ldbu	r3,6(r2)
 4012ff8:	00bfe004 	movi	r2,-128
 4012ffc:	1884b03a 	or	r2,r3,r2
 4013000:	1007883a 	mov	r3,r2
 4013004:	e0bffd17 	ldw	r2,-12(fp)
 4013008:	10c00185 	stb	r3,6(r2)
 401300c:	00800044 	movi	r2,1
 4013010:	e0bfff15 	stw	r2,-4(fp)
 4013014:	00000506 	br	401302c <f_lseek+0x350>
#endif
         fp->dsect = nsect;
 4013018:	e0fffd17 	ldw	r3,-12(fp)
 401301c:	e0bff917 	ldw	r2,-28(fp)
 4013020:	18800615 	stw	r2,24(r3)
         fp->flag |= FA__WRITTEN;
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
 4013024:	e0bffc17 	ldw	r2,-16(fp)
 4013028:	e0bfff15 	stw	r2,-4(fp)
 401302c:	e0bfff17 	ldw	r2,-4(fp)
}
 4013030:	e037883a 	mov	sp,fp
 4013034:	dfc00217 	ldw	ra,8(sp)
 4013038:	df000117 	ldw	fp,4(sp)
 401303c:	dc000017 	ldw	r16,0(sp)
 4013040:	dec00304 	addi	sp,sp,12
 4013044:	f800283a 	ret

04013048 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
 4013048:	defff804 	addi	sp,sp,-32
 401304c:	dfc00715 	stw	ra,28(sp)
 4013050:	df000615 	stw	fp,24(sp)
 4013054:	df000604 	addi	fp,sp,24
 4013058:	e13ffe15 	stw	r4,-8(fp)
 401305c:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
 4013060:	e17ffe17 	ldw	r5,-8(fp)
 4013064:	e13fff04 	addi	r4,fp,-4
 4013068:	000d883a 	mov	r6,zero
 401306c:	4011d080 	call	4011d08 <chk_mounted>
 4013070:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
 4013074:	e0bffa17 	ldw	r2,-24(fp)
 4013078:	1004c03a 	cmpne	r2,r2,zero
 401307c:	10004a1e 	bne	r2,zero,40131a8 <f_opendir+0x160>
      INIT_BUF(*dj);
 4013080:	e0fffe17 	ldw	r3,-8(fp)
 4013084:	e0bffb04 	addi	r2,fp,-20
 4013088:	18800615 	stw	r2,24(r3)
      res = follow_path(dj, path);        /* Follow the path to the directory */
 401308c:	e17fff17 	ldw	r5,-4(fp)
 4013090:	e13ffe17 	ldw	r4,-8(fp)
 4013094:	40119640 	call	4011964 <follow_path>
 4013098:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
 401309c:	e0bffa17 	ldw	r2,-24(fp)
 40130a0:	1004c03a 	cmpne	r2,r2,zero
 40130a4:	10003b1e 	bne	r2,zero,4013194 <f_opendir+0x14c>
         if (dj->dir) {                /* It is not the root dir */
 40130a8:	e0bffe17 	ldw	r2,-8(fp)
 40130ac:	10800517 	ldw	r2,20(r2)
 40130b0:	1005003a 	cmpeq	r2,r2,zero
 40130b4:	10002b1e 	bne	r2,zero,4013164 <f_opendir+0x11c>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
 40130b8:	e0bffe17 	ldw	r2,-8(fp)
 40130bc:	10800517 	ldw	r2,20(r2)
 40130c0:	108002c4 	addi	r2,r2,11
 40130c4:	10800003 	ldbu	r2,0(r2)
 40130c8:	10803fcc 	andi	r2,r2,255
 40130cc:	1080040c 	andi	r2,r2,16
 40130d0:	1005003a 	cmpeq	r2,r2,zero
 40130d4:	1000211e 	bne	r2,zero,401315c <f_opendir+0x114>
               dj->sclust = LD_CLUST(dj->dir);
 40130d8:	e0bffe17 	ldw	r2,-8(fp)
 40130dc:	10800517 	ldw	r2,20(r2)
 40130e0:	10800544 	addi	r2,r2,21
 40130e4:	10800003 	ldbu	r2,0(r2)
 40130e8:	10803fcc 	andi	r2,r2,255
 40130ec:	1004923a 	slli	r2,r2,8
 40130f0:	1007883a 	mov	r3,r2
 40130f4:	e0bffe17 	ldw	r2,-8(fp)
 40130f8:	10800517 	ldw	r2,20(r2)
 40130fc:	10800504 	addi	r2,r2,20
 4013100:	10800003 	ldbu	r2,0(r2)
 4013104:	10803fcc 	andi	r2,r2,255
 4013108:	1884b03a 	or	r2,r3,r2
 401310c:	10bfffcc 	andi	r2,r2,65535
 4013110:	1008943a 	slli	r4,r2,16
 4013114:	e0bffe17 	ldw	r2,-8(fp)
 4013118:	10800517 	ldw	r2,20(r2)
 401311c:	108006c4 	addi	r2,r2,27
 4013120:	10800003 	ldbu	r2,0(r2)
 4013124:	10803fcc 	andi	r2,r2,255
 4013128:	1004923a 	slli	r2,r2,8
 401312c:	1007883a 	mov	r3,r2
 4013130:	e0bffe17 	ldw	r2,-8(fp)
 4013134:	10800517 	ldw	r2,20(r2)
 4013138:	10800684 	addi	r2,r2,26
 401313c:	10800003 	ldbu	r2,0(r2)
 4013140:	10803fcc 	andi	r2,r2,255
 4013144:	1884b03a 	or	r2,r3,r2
 4013148:	10bfffcc 	andi	r2,r2,65535
 401314c:	2086b03a 	or	r3,r4,r2
 4013150:	e0bffe17 	ldw	r2,-8(fp)
 4013154:	10c00215 	stw	r3,8(r2)
 4013158:	00000206 	br	4013164 <f_opendir+0x11c>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
 401315c:	00800144 	movi	r2,5
 4013160:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
 4013164:	e0bffa17 	ldw	r2,-24(fp)
 4013168:	1004c03a 	cmpne	r2,r2,zero
 401316c:	1000091e 	bne	r2,zero,4013194 <f_opendir+0x14c>
            dj->id = dj->fs->id;
 4013170:	e0bffe17 	ldw	r2,-8(fp)
 4013174:	10800017 	ldw	r2,0(r2)
 4013178:	10c0018b 	ldhu	r3,6(r2)
 401317c:	e0bffe17 	ldw	r2,-8(fp)
 4013180:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
 4013184:	e13ffe17 	ldw	r4,-8(fp)
 4013188:	000b883a 	mov	r5,zero
 401318c:	4010e5c0 	call	4010e5c <dir_sdi>
 4013190:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
 4013194:	e0bffa17 	ldw	r2,-24(fp)
 4013198:	10800118 	cmpnei	r2,r2,4
 401319c:	1000021e 	bne	r2,zero,40131a8 <f_opendir+0x160>
 40131a0:	00800144 	movi	r2,5
 40131a4:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
 40131a8:	e0bffa17 	ldw	r2,-24(fp)
}
 40131ac:	e037883a 	mov	sp,fp
 40131b0:	dfc00117 	ldw	ra,4(sp)
 40131b4:	df000017 	ldw	fp,0(sp)
 40131b8:	dec00204 	addi	sp,sp,8
 40131bc:	f800283a 	ret

040131c0 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
 40131c0:	defff804 	addi	sp,sp,-32
 40131c4:	dfc00715 	stw	ra,28(sp)
 40131c8:	df000615 	stw	fp,24(sp)
 40131cc:	df000604 	addi	fp,sp,24
 40131d0:	e13ffe15 	stw	r4,-8(fp)
 40131d4:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
 40131d8:	e0bffe17 	ldw	r2,-8(fp)
 40131dc:	11000017 	ldw	r4,0(r2)
 40131e0:	e0bffe17 	ldw	r2,-8(fp)
 40131e4:	1080010b 	ldhu	r2,4(r2)
 40131e8:	117fffcc 	andi	r5,r2,65535
 40131ec:	401252c0 	call	401252c <validate>
 40131f0:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
 40131f4:	e0bffa17 	ldw	r2,-24(fp)
 40131f8:	1004c03a 	cmpne	r2,r2,zero
 40131fc:	1000241e 	bne	r2,zero,4013290 <f_readdir+0xd0>
      if (!fno) {
 4013200:	e0bfff17 	ldw	r2,-4(fp)
 4013204:	1004c03a 	cmpne	r2,r2,zero
 4013208:	1000051e 	bne	r2,zero,4013220 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
 401320c:	e13ffe17 	ldw	r4,-8(fp)
 4013210:	000b883a 	mov	r5,zero
 4013214:	4010e5c0 	call	4010e5c <dir_sdi>
 4013218:	e0bffa15 	stw	r2,-24(fp)
 401321c:	00001c06 	br	4013290 <f_readdir+0xd0>
      } else {
         INIT_BUF(*dj);
 4013220:	e0fffe17 	ldw	r3,-8(fp)
 4013224:	e0bffb04 	addi	r2,fp,-20
 4013228:	18800615 	stw	r2,24(r3)
         res = dir_read(dj);           /* Read an directory item */
 401322c:	e13ffe17 	ldw	r4,-8(fp)
 4013230:	401130c0 	call	401130c <dir_read>
 4013234:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
 4013238:	e0bffa17 	ldw	r2,-24(fp)
 401323c:	10800118 	cmpnei	r2,r2,4
 4013240:	1000031e 	bne	r2,zero,4013250 <f_readdir+0x90>
            dj->sect = 0;
 4013244:	e0bffe17 	ldw	r2,-8(fp)
 4013248:	10000415 	stw	zero,16(r2)
            res = FR_OK;
 401324c:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
 4013250:	e0bffa17 	ldw	r2,-24(fp)
 4013254:	1004c03a 	cmpne	r2,r2,zero
 4013258:	10000d1e 	bne	r2,zero,4013290 <f_readdir+0xd0>
            get_fileinfo(dj, fno);     /* Get the object information */
 401325c:	e13ffe17 	ldw	r4,-8(fp)
 4013260:	e17fff17 	ldw	r5,-4(fp)
 4013264:	40117240 	call	4011724 <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
 4013268:	e13ffe17 	ldw	r4,-8(fp)
 401326c:	000b883a 	mov	r5,zero
 4013270:	40110580 	call	4011058 <dir_next>
 4013274:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
 4013278:	e0bffa17 	ldw	r2,-24(fp)
 401327c:	10800118 	cmpnei	r2,r2,4
 4013280:	1000031e 	bne	r2,zero,4013290 <f_readdir+0xd0>
               dj->sect = 0;
 4013284:	e0bffe17 	ldw	r2,-8(fp)
 4013288:	10000415 	stw	zero,16(r2)
               res = FR_OK;
 401328c:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
 4013290:	e0bffa17 	ldw	r2,-24(fp)
}
 4013294:	e037883a 	mov	sp,fp
 4013298:	dfc00117 	ldw	ra,4(sp)
 401329c:	df000017 	ldw	fp,0(sp)
 40132a0:	dec00204 	addi	sp,sp,8
 40132a4:	f800283a 	ret

040132a8 <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
 40132a8:	defff504 	addi	sp,sp,-44
 40132ac:	dfc00a15 	stw	ra,40(sp)
 40132b0:	df000915 	stw	fp,36(sp)
 40132b4:	df000904 	addi	fp,sp,36
 40132b8:	e13ffc15 	stw	r4,-16(fp)
 40132bc:	e17ffd15 	stw	r5,-12(fp)
 40132c0:	e1bffe15 	stw	r6,-8(fp)
   int n = 0;
 40132c4:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
 40132c8:	e0bffc17 	ldw	r2,-16(fp)
 40132cc:	e0bff715 	stw	r2,-36(fp)
   FFS_U8 s[2];
   FFS_U32 rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
 40132d0:	00001606 	br	401332c <f_gets+0x84>
      f_read(fil, s, 1, &rc);
 40132d4:	e17ffa04 	addi	r5,fp,-24
 40132d8:	e1fffb04 	addi	r7,fp,-20
 40132dc:	e13ffe17 	ldw	r4,-8(fp)
 40132e0:	01800044 	movi	r6,1
 40132e4:	40128580 	call	4012858 <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
 40132e8:	e0bffb17 	ldw	r2,-20(fp)
 40132ec:	10800058 	cmpnei	r2,r2,1
 40132f0:	1000121e 	bne	r2,zero,401333c <f_gets+0x94>
      c = s[0];
 40132f4:	e0bffa03 	ldbu	r2,-24(fp)
 40132f8:	e0bff805 	stb	r2,-32(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
 40132fc:	e0fff717 	ldw	r3,-36(fp)
 4013300:	e0bff803 	ldbu	r2,-32(fp)
 4013304:	18800005 	stb	r2,0(r3)
 4013308:	e0bff717 	ldw	r2,-36(fp)
 401330c:	10800044 	addi	r2,r2,1
 4013310:	e0bff715 	stw	r2,-36(fp)
      n++;
 4013314:	e0bff917 	ldw	r2,-28(fp)
 4013318:	10800044 	addi	r2,r2,1
 401331c:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
 4013320:	e0bff807 	ldb	r2,-32(fp)
 4013324:	108002a0 	cmpeqi	r2,r2,10
 4013328:	1000041e 	bne	r2,zero,401333c <f_gets+0x94>
   TCHAR c, *p = buff;
   FFS_U8 s[2];
   FFS_U32 rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
 401332c:	e0bffd17 	ldw	r2,-12(fp)
 4013330:	10ffffc4 	addi	r3,r2,-1
 4013334:	e0bff917 	ldw	r2,-28(fp)
 4013338:	10ffe616 	blt	r2,r3,40132d4 <f_gets+0x2c>
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
   }
   *p = 0;
 401333c:	e0bff717 	ldw	r2,-36(fp)
 4013340:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
 4013344:	e0bff917 	ldw	r2,-28(fp)
 4013348:	1005003a 	cmpeq	r2,r2,zero
 401334c:	1000031e 	bne	r2,zero,401335c <f_gets+0xb4>
 4013350:	e0bffc17 	ldw	r2,-16(fp)
 4013354:	e0bfff15 	stw	r2,-4(fp)
 4013358:	00000106 	br	4013360 <f_gets+0xb8>
 401335c:	e03fff15 	stw	zero,-4(fp)
 4013360:	e0bfff17 	ldw	r2,-4(fp)
}
 4013364:	e037883a 	mov	sp,fp
 4013368:	dfc00117 	ldw	ra,4(sp)
 401336c:	df000017 	ldw	fp,0(sp)
 4013370:	dec00204 	addi	sp,sp,8
 4013374:	f800283a 	ret

04013378 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
 4013378:	defffe04 	addi	sp,sp,-8
 401337c:	df000115 	stw	fp,4(sp)
 4013380:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
 4013384:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
 4013388:	e0bfff0f 	ldh	r2,-4(fp)
} /* ffs_Init */
 401338c:	e037883a 	mov	sp,fp
 4013390:	df000017 	ldw	fp,0(sp)
 4013394:	dec00104 	addi	sp,sp,4
 4013398:	f800283a 	ret

0401339c <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
 401339c:	deffff04 	addi	sp,sp,-4
 40133a0:	df000015 	stw	fp,0(sp)
 40133a4:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
 40133a8:	d0e0de0b 	ldhu	r3,-31880(gp)
 40133ac:	00803fc4 	movi	r2,255
 40133b0:	1884703a 	and	r2,r3,r2
 40133b4:	d0a0de0d 	sth	r2,-31880(gp)
   Control1 |= (249 << 8);
 40133b8:	d0e0de0b 	ldhu	r3,-31880(gp)
 40133bc:	00be4004 	movi	r2,-1792
 40133c0:	1884b03a 	or	r2,r3,r2
 40133c4:	d0a0de0d 	sth	r2,-31880(gp)
   SPI_CTRL  = Control1;
 40133c8:	00e100b4 	movhi	r3,33794
 40133cc:	18c42904 	addi	r3,r3,4260
 40133d0:	d0a0de0b 	ldhu	r2,-31880(gp)
 40133d4:	1880000d 	sth	r2,0(r3)
} /* SetLowSpeed */
 40133d8:	e037883a 	mov	sp,fp
 40133dc:	df000017 	ldw	fp,0(sp)
 40133e0:	dec00104 	addi	sp,sp,4
 40133e4:	f800283a 	ret

040133e8 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
 40133e8:	deffff04 	addi	sp,sp,-4
 40133ec:	df000015 	stw	fp,0(sp)
 40133f0:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
 40133f4:	d0e0de0b 	ldhu	r3,-31880(gp)
 40133f8:	00803fc4 	movi	r2,255
 40133fc:	1884703a 	and	r2,r3,r2
 4013400:	d0a0de0d 	sth	r2,-31880(gp)

   if (0 == (CardType & 0x01))
 4013404:	d0a0dc03 	ldbu	r2,-31888(gp)
 4013408:	10803fcc 	andi	r2,r2,255
 401340c:	1080004c 	andi	r2,r2,1
 4013410:	1004c03a 	cmpne	r2,r2,zero
 4013414:	1000041e 	bne	r2,zero,4013428 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
 4013418:	d0a0de0b 	ldhu	r2,-31880(gp)
 401341c:	10804014 	ori	r2,r2,256
 4013420:	d0a0de0d 	sth	r2,-31880(gp)
 4013424:	00000306 	br	4013434 <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
 4013428:	d0a0de0b 	ldhu	r2,-31880(gp)
 401342c:	10808014 	ori	r2,r2,512
 4013430:	d0a0de0d 	sth	r2,-31880(gp)
   }
   SPI_CTRL  = Control1;
 4013434:	00e100b4 	movhi	r3,33794
 4013438:	18c42904 	addi	r3,r3,4260
 401343c:	d0a0de0b 	ldhu	r2,-31880(gp)
 4013440:	1880000d 	sth	r2,0(r3)
} /* SetHighSpeed */
 4013444:	e037883a 	mov	sp,fp
 4013448:	df000017 	ldw	fp,0(sp)
 401344c:	dec00104 	addi	sp,sp,4
 4013450:	f800283a 	ret

04013454 <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
 4013454:	defffe04 	addi	sp,sp,-8
 4013458:	dfc00115 	stw	ra,4(sp)
 401345c:	df000015 	stw	fp,0(sp)
 4013460:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
 4013464:	d0a0de0b 	ldhu	r2,-31880(gp)
 4013468:	10800054 	ori	r2,r2,1
 401346c:	d0a0de0d 	sth	r2,-31880(gp)
 4013470:	00e100b4 	movhi	r3,33794
 4013474:	18c42904 	addi	r3,r3,4260
 4013478:	d0a0de0b 	ldhu	r2,-31880(gp)
 401347c:	1880000d 	sth	r2,0(r3)

   /* Slow during init */
   SetLowSpeed();
 4013480:	401339c0 	call	401339c <SetLowSpeed>
   
} /* InitDiskIOHardware */
 4013484:	e037883a 	mov	sp,fp
 4013488:	dfc00117 	ldw	ra,4(sp)
 401348c:	df000017 	ldw	fp,0(sp)
 4013490:	dec00204 	addi	sp,sp,8
 4013494:	f800283a 	ret

04013498 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
 4013498:	deffff04 	addi	sp,sp,-4
 401349c:	df000015 	stw	fp,0(sp)
 40134a0:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT16;
 40134a4:	d0e0de0b 	ldhu	r3,-31880(gp)
 40134a8:	00bfff44 	movi	r2,-3
 40134ac:	1884703a 	and	r2,r3,r2
 40134b0:	d0a0de0d 	sth	r2,-31880(gp)
   SPI_CTRL  = Control1;
 40134b4:	00e100b4 	movhi	r3,33794
 40134b8:	18c42904 	addi	r3,r3,4260
 40134bc:	d0a0de0b 	ldhu	r2,-31880(gp)
 40134c0:	1880000d 	sth	r2,0(r3)
} /* Set8BitTransfer */
 40134c4:	e037883a 	mov	sp,fp
 40134c8:	df000017 	ldw	fp,0(sp)
 40134cc:	dec00104 	addi	sp,sp,4
 40134d0:	f800283a 	ret

040134d4 <Set16BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set16BitTransfer(void)
{
 40134d4:	deffff04 	addi	sp,sp,-4
 40134d8:	df000015 	stw	fp,0(sp)
 40134dc:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT16;
 40134e0:	d0a0de0b 	ldhu	r2,-31880(gp)
 40134e4:	10800094 	ori	r2,r2,2
 40134e8:	d0a0de0d 	sth	r2,-31880(gp)
   SPI_CTRL  = Control1;
 40134ec:	00e100b4 	movhi	r3,33794
 40134f0:	18c42904 	addi	r3,r3,4260
 40134f4:	d0a0de0b 	ldhu	r2,-31880(gp)
 40134f8:	1880000d 	sth	r2,0(r3)
} /* Set16BitTransfer */
 40134fc:	e037883a 	mov	sp,fp
 4013500:	df000017 	ldw	fp,0(sp)
 4013504:	dec00104 	addi	sp,sp,4
 4013508:	f800283a 	ret

0401350c <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
 401350c:	deffff04 	addi	sp,sp,-4
 4013510:	df000015 	stw	fp,0(sp)
 4013514:	d839883a 	mov	fp,sp
   SPI_TXR = (FFS_U16) 0xff;
 4013518:	00e100b4 	movhi	r3,33794
 401351c:	18c42804 	addi	r3,r3,4256
 4013520:	00803fc4 	movi	r2,255
 4013524:	1880000d 	sth	r2,0(r3)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
 4013528:	00a100b4 	movhi	r2,33794
 401352c:	10842984 	addi	r2,r2,4262
 4013530:	1080000b 	ldhu	r2,0(r2)
 4013534:	10bfffcc 	andi	r2,r2,65535
 4013538:	1080004c 	andi	r2,r2,1
 401353c:	1005003a 	cmpeq	r2,r2,zero
 4013540:	103ff91e 	bne	r2,zero,4013528 <ReceiveU8+0x1c>

   return(SPI_RXR);
 4013544:	00a100b4 	movhi	r2,33794
 4013548:	10842884 	addi	r2,r2,4258
 401354c:	1080000b 	ldhu	r2,0(r2)
 4013550:	10803fcc 	andi	r2,r2,255
} /* ReceiveU8 */
 4013554:	e037883a 	mov	sp,fp
 4013558:	df000017 	ldw	fp,0(sp)
 401355c:	dec00104 	addi	sp,sp,4
 4013560:	f800283a 	ret

04013564 <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, FFS_U32 btr)
{
 4013564:	defffa04 	addi	sp,sp,-24
 4013568:	dfc00515 	stw	ra,20(sp)
 401356c:	df000415 	stw	fp,16(sp)
 4013570:	df000404 	addi	fp,sp,16
 4013574:	e13ffd15 	stw	r4,-12(fp)
 4013578:	e17ffe15 	stw	r5,-8(fp)
   FFS_U8 token;
   volatile FFS_U16 value;

   Timer1 = 10;
 401357c:	00800284 	movi	r2,10
 4013580:	d0a0dc8d 	sth	r2,-31886(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
 4013584:	401350c0 	call	401350c <ReceiveU8>
 4013588:	e0bffc05 	stb	r2,-16(fp)
   }
   while ((token == 0xFF) && Timer1);
 401358c:	e0bffc03 	ldbu	r2,-16(fp)
 4013590:	10803fd8 	cmpnei	r2,r2,255
 4013594:	1000041e 	bne	r2,zero,40135a8 <ReceiveDatablock+0x44>
 4013598:	d0a0dc8b 	ldhu	r2,-31886(gp)
 401359c:	10bfffcc 	andi	r2,r2,65535
 40135a0:	1004c03a 	cmpne	r2,r2,zero
 40135a4:	103ff71e 	bne	r2,zero,4013584 <ReceiveDatablock+0x20>

   if (token != 0xFE)
 40135a8:	e0bffc03 	ldbu	r2,-16(fp)
 40135ac:	10803fa0 	cmpeqi	r2,r2,254
 40135b0:	1000021e 	bne	r2,zero,40135bc <ReceiveDatablock+0x58>
      return(FFS_FALSE);  /* If not valid data token, return with error */
 40135b4:	e03fff15 	stw	zero,-4(fp)
 40135b8:	00005606 	br	4013714 <ReceiveDatablock+0x1b0>
      
   /* Receive the data block into buffer */
   Set16BitTransfer();
 40135bc:	40134d40 	call	40134d4 <Set16BitTransfer>

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(value, buff);
 40135c0:	00e100b4 	movhi	r3,33794
 40135c4:	18c42804 	addi	r3,r3,4256
 40135c8:	00bfffc4 	movi	r2,-1
 40135cc:	1880000d 	sth	r2,0(r3)
 40135d0:	00a100b4 	movhi	r2,33794
 40135d4:	10842984 	addi	r2,r2,4262
 40135d8:	1080000b 	ldhu	r2,0(r2)
 40135dc:	10bfffcc 	andi	r2,r2,65535
 40135e0:	1080004c 	andi	r2,r2,1
 40135e4:	1005003a 	cmpeq	r2,r2,zero
 40135e8:	103ff91e 	bne	r2,zero,40135d0 <ReceiveDatablock+0x6c>
 40135ec:	00a100b4 	movhi	r2,33794
 40135f0:	10842884 	addi	r2,r2,4258
 40135f4:	1080000b 	ldhu	r2,0(r2)
 40135f8:	e0bffc8d 	sth	r2,-14(fp)
 40135fc:	e0bffc8b 	ldhu	r2,-14(fp)
 4013600:	10bfffcc 	andi	r2,r2,65535
 4013604:	1004d23a 	srli	r2,r2,8
 4013608:	1007883a 	mov	r3,r2
 401360c:	00bfffc4 	movi	r2,-1
 4013610:	1884703a 	and	r2,r3,r2
 4013614:	1007883a 	mov	r3,r2
 4013618:	e0bffd17 	ldw	r2,-12(fp)
 401361c:	10c00005 	stb	r3,0(r2)
 4013620:	e0bffd17 	ldw	r2,-12(fp)
 4013624:	10800044 	addi	r2,r2,1
 4013628:	e0bffd15 	stw	r2,-12(fp)
 401362c:	e0bffc8b 	ldhu	r2,-14(fp)
 4013630:	1007883a 	mov	r3,r2
 4013634:	00bfffc4 	movi	r2,-1
 4013638:	1884703a 	and	r2,r3,r2
 401363c:	1007883a 	mov	r3,r2
 4013640:	e0bffd17 	ldw	r2,-12(fp)
 4013644:	10c00005 	stb	r3,0(r2)
 4013648:	e0bffd17 	ldw	r2,-12(fp)
 401364c:	10800044 	addi	r2,r2,1
 4013650:	e0bffd15 	stw	r2,-12(fp)
      RECEIVE_FAST(value, buff);
 4013654:	00e100b4 	movhi	r3,33794
 4013658:	18c42804 	addi	r3,r3,4256
 401365c:	00bfffc4 	movi	r2,-1
 4013660:	1880000d 	sth	r2,0(r3)
 4013664:	00a100b4 	movhi	r2,33794
 4013668:	10842984 	addi	r2,r2,4262
 401366c:	1080000b 	ldhu	r2,0(r2)
 4013670:	10bfffcc 	andi	r2,r2,65535
 4013674:	1080004c 	andi	r2,r2,1
 4013678:	1005003a 	cmpeq	r2,r2,zero
 401367c:	103ff91e 	bne	r2,zero,4013664 <ReceiveDatablock+0x100>
 4013680:	00a100b4 	movhi	r2,33794
 4013684:	10842884 	addi	r2,r2,4258
 4013688:	1080000b 	ldhu	r2,0(r2)
 401368c:	e0bffc8d 	sth	r2,-14(fp)
 4013690:	e0bffc8b 	ldhu	r2,-14(fp)
 4013694:	10bfffcc 	andi	r2,r2,65535
 4013698:	1004d23a 	srli	r2,r2,8
 401369c:	1007883a 	mov	r3,r2
 40136a0:	00bfffc4 	movi	r2,-1
 40136a4:	1884703a 	and	r2,r3,r2
 40136a8:	1007883a 	mov	r3,r2
 40136ac:	e0bffd17 	ldw	r2,-12(fp)
 40136b0:	10c00005 	stb	r3,0(r2)
 40136b4:	e0bffd17 	ldw	r2,-12(fp)
 40136b8:	10800044 	addi	r2,r2,1
 40136bc:	e0bffd15 	stw	r2,-12(fp)
 40136c0:	e0bffc8b 	ldhu	r2,-14(fp)
 40136c4:	1007883a 	mov	r3,r2
 40136c8:	00bfffc4 	movi	r2,-1
 40136cc:	1884703a 	and	r2,r3,r2
 40136d0:	1007883a 	mov	r3,r2
 40136d4:	e0bffd17 	ldw	r2,-12(fp)
 40136d8:	10c00005 	stb	r3,0(r2)
 40136dc:	e0bffd17 	ldw	r2,-12(fp)
 40136e0:	10800044 	addi	r2,r2,1
 40136e4:	e0bffd15 	stw	r2,-12(fp)
   }
   while (btr -= 4);
 40136e8:	e0bffe17 	ldw	r2,-8(fp)
 40136ec:	10bfff04 	addi	r2,r2,-4
 40136f0:	e0bffe15 	stw	r2,-8(fp)
 40136f4:	e0bffe17 	ldw	r2,-8(fp)
 40136f8:	1004c03a 	cmpne	r2,r2,zero
 40136fc:	103fb01e 	bne	r2,zero,40135c0 <ReceiveDatablock+0x5c>
   
   Set8BitTransfer();   
 4013700:	40134980 	call	4013498 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
 4013704:	401350c0 	call	401350c <ReceiveU8>
   ReceiveU8();
 4013708:	401350c0 	call	401350c <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
 401370c:	00800044 	movi	r2,1
 4013710:	e0bfff15 	stw	r2,-4(fp)
 4013714:	e0bfff17 	ldw	r2,-4(fp)
} /* ReceiveDatablock */
 4013718:	e037883a 	mov	sp,fp
 401371c:	dfc00117 	ldw	ra,4(sp)
 4013720:	df000017 	ldw	fp,0(sp)
 4013724:	dec00204 	addi	sp,sp,8
 4013728:	f800283a 	ret

0401372c <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
 401372c:	defffa04 	addi	sp,sp,-24
 4013730:	dfc00515 	stw	ra,20(sp)
 4013734:	df000415 	stw	fp,16(sp)
 4013738:	df000404 	addi	fp,sp,16
 401373c:	e13ffd15 	stw	r4,-12(fp)
 4013740:	e17ffe05 	stb	r5,-8(fp)
   FFS_U8 resp, wc = 0;
 4013744:	e03ffc05 	stb	zero,-16(fp)

   if (WaitReady() != 0xFF)
 4013748:	40138a40 	call	40138a4 <WaitReady>
 401374c:	10803fcc 	andi	r2,r2,255
 4013750:	10803fe0 	cmpeqi	r2,r2,255
 4013754:	1000021e 	bne	r2,zero,4013760 <TransmitDatablock+0x34>
      return(FFS_FALSE);
 4013758:	e03fff15 	stw	zero,-4(fp)
 401375c:	00004206 	br	4013868 <TransmitDatablock+0x13c>

   TRANSMIT_U8(token);  /* Xmit data token */
 4013760:	00e100b4 	movhi	r3,33794
 4013764:	18c42804 	addi	r3,r3,4256
 4013768:	e0bffe03 	ldbu	r2,-8(fp)
 401376c:	1880000d 	sth	r2,0(r3)
 4013770:	00a100b4 	movhi	r2,33794
 4013774:	10842984 	addi	r2,r2,4262
 4013778:	1080000b 	ldhu	r2,0(r2)
 401377c:	10bfffcc 	andi	r2,r2,65535
 4013780:	1080004c 	andi	r2,r2,1
 4013784:	1005003a 	cmpeq	r2,r2,zero
 4013788:	103ff91e 	bne	r2,zero,4013770 <TransmitDatablock+0x44>
   if (token != 0xFD)   /* Is data token */
 401378c:	e0bffe03 	ldbu	r2,-8(fp)
 4013790:	10803f60 	cmpeqi	r2,r2,253
 4013794:	1000321e 	bne	r2,zero,4013860 <TransmitDatablock+0x134>
   {
   
      /* Send the 512 byte data block */
      Set16BitTransfer();
 4013798:	40134d40 	call	40134d4 <Set16BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST((*buff << 8) | *(buff + 1));
 401379c:	012100b4 	movhi	r4,33794
 40137a0:	21042804 	addi	r4,r4,4256
 40137a4:	e0bffd17 	ldw	r2,-12(fp)
 40137a8:	10800003 	ldbu	r2,0(r2)
 40137ac:	10803fcc 	andi	r2,r2,255
 40137b0:	1004923a 	slli	r2,r2,8
 40137b4:	1007883a 	mov	r3,r2
 40137b8:	e0bffd17 	ldw	r2,-12(fp)
 40137bc:	10800044 	addi	r2,r2,1
 40137c0:	10800003 	ldbu	r2,0(r2)
 40137c4:	10803fcc 	andi	r2,r2,255
 40137c8:	1884b03a 	or	r2,r3,r2
 40137cc:	2080000d 	sth	r2,0(r4)
 40137d0:	00a100b4 	movhi	r2,33794
 40137d4:	10842984 	addi	r2,r2,4262
 40137d8:	1080000b 	ldhu	r2,0(r2)
 40137dc:	10bfffcc 	andi	r2,r2,65535
 40137e0:	1080004c 	andi	r2,r2,1
 40137e4:	1005003a 	cmpeq	r2,r2,zero
 40137e8:	103ff91e 	bne	r2,zero,40137d0 <TransmitDatablock+0xa4>
         buff += 2;
 40137ec:	e0bffd17 	ldw	r2,-12(fp)
 40137f0:	10800084 	addi	r2,r2,2
 40137f4:	e0bffd15 	stw	r2,-12(fp)
      }
      while (--wc);
 40137f8:	e0bffc03 	ldbu	r2,-16(fp)
 40137fc:	10bfffc4 	addi	r2,r2,-1
 4013800:	e0bffc05 	stb	r2,-16(fp)
 4013804:	e0bffc03 	ldbu	r2,-16(fp)
 4013808:	1004c03a 	cmpne	r2,r2,zero
 401380c:	103fe31e 	bne	r2,zero,401379c <TransmitDatablock+0x70>

      TRANSMIT_FAST(0xFFFF);  /* CRC (Dummy) */
 4013810:	00e100b4 	movhi	r3,33794
 4013814:	18c42804 	addi	r3,r3,4256
 4013818:	00bfffc4 	movi	r2,-1
 401381c:	1880000d 	sth	r2,0(r3)
 4013820:	00a100b4 	movhi	r2,33794
 4013824:	10842984 	addi	r2,r2,4262
 4013828:	1080000b 	ldhu	r2,0(r2)
 401382c:	10bfffcc 	andi	r2,r2,65535
 4013830:	1080004c 	andi	r2,r2,1
 4013834:	1005003a 	cmpeq	r2,r2,zero
 4013838:	103ff91e 	bne	r2,zero,4013820 <TransmitDatablock+0xf4>
      
      Set8BitTransfer();
 401383c:	40134980 	call	4013498 <Set8BitTransfer>

      resp = ReceiveU8();  /* Reveive data response */
 4013840:	401350c0 	call	401350c <ReceiveU8>
 4013844:	e0bffc45 	stb	r2,-15(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
 4013848:	e0bffc43 	ldbu	r2,-15(fp)
 401384c:	108007cc 	andi	r2,r2,31
 4013850:	10800160 	cmpeqi	r2,r2,5
 4013854:	1000021e 	bne	r2,zero,4013860 <TransmitDatablock+0x134>
      {
         return(FFS_FALSE);
 4013858:	e03fff15 	stw	zero,-4(fp)
 401385c:	00000206 	br	4013868 <TransmitDatablock+0x13c>
      }
   }

   return(FFS_TRUE);  /* Return with success */
 4013860:	00800044 	movi	r2,1
 4013864:	e0bfff15 	stw	r2,-4(fp)
 4013868:	e0bfff17 	ldw	r2,-4(fp)
} /* TransmitDatablock */
 401386c:	e037883a 	mov	sp,fp
 4013870:	dfc00117 	ldw	ra,4(sp)
 4013874:	df000017 	ldw	fp,0(sp)
 4013878:	dec00204 	addi	sp,sp,8
 401387c:	f800283a 	ret

04013880 <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
 4013880:	defffe04 	addi	sp,sp,-8
 4013884:	df000115 	stw	fp,4(sp)
 4013888:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
 401388c:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
 4013890:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
 4013894:	e037883a 	mov	sp,fp
 4013898:	df000017 	ldw	fp,0(sp)
 401389c:	dec00104 	addi	sp,sp,4
 40138a0:	f800283a 	ret

040138a4 <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
 40138a4:	defffd04 	addi	sp,sp,-12
 40138a8:	dfc00215 	stw	ra,8(sp)
 40138ac:	df000115 	stw	fp,4(sp)
 40138b0:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
 40138b4:	00800c84 	movi	r2,50
 40138b8:	d0a0dd0d 	sth	r2,-31884(gp)
   ReceiveU8();
 40138bc:	401350c0 	call	401350c <ReceiveU8>
   do
   {
      res = ReceiveU8();
 40138c0:	401350c0 	call	401350c <ReceiveU8>
 40138c4:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
 40138c8:	e0bfff03 	ldbu	r2,-4(fp)
 40138cc:	10803fe0 	cmpeqi	r2,r2,255
 40138d0:	1000041e 	bne	r2,zero,40138e4 <WaitReady+0x40>
 40138d4:	d0a0dd0b 	ldhu	r2,-31884(gp)
 40138d8:	10bfffcc 	andi	r2,r2,65535
 40138dc:	1004c03a 	cmpne	r2,r2,zero
 40138e0:	103ff71e 	bne	r2,zero,40138c0 <WaitReady+0x1c>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
 40138e4:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
 40138e8:	e037883a 	mov	sp,fp
 40138ec:	dfc00117 	ldw	ra,4(sp)
 40138f0:	df000017 	ldw	fp,0(sp)
 40138f4:	dec00204 	addi	sp,sp,8
 40138f8:	f800283a 	ret

040138fc <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
 40138fc:	defffe04 	addi	sp,sp,-8
 4013900:	dfc00115 	stw	ra,4(sp)
 4013904:	df000015 	stw	fp,0(sp)
 4013908:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
 401390c:	d0a0de0b 	ldhu	r2,-31880(gp)
 4013910:	10800054 	ori	r2,r2,1
 4013914:	d0a0de0d 	sth	r2,-31880(gp)
 4013918:	00e100b4 	movhi	r3,33794
 401391c:	18c42904 	addi	r3,r3,4260
 4013920:	d0a0de0b 	ldhu	r2,-31880(gp)
 4013924:	1880000d 	sth	r2,0(r3)
   ReceiveU8();
 4013928:	401350c0 	call	401350c <ReceiveU8>
} /* ReleaseBus */
 401392c:	e037883a 	mov	sp,fp
 4013930:	dfc00117 	ldw	ra,4(sp)
 4013934:	df000017 	ldw	fp,0(sp)
 4013938:	dec00204 	addi	sp,sp,8
 401393c:	f800283a 	ret

04013940 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
 4013940:	defffa04 	addi	sp,sp,-24
 4013944:	dfc00515 	stw	ra,20(sp)
 4013948:	df000415 	stw	fp,16(sp)
 401394c:	df000404 	addi	fp,sp,16
 4013950:	e17ffe15 	stw	r5,-8(fp)
 4013954:	e13ffd05 	stb	r4,-12(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
 4013958:	e0bffd03 	ldbu	r2,-12(fp)
 401395c:	10803fcc 	andi	r2,r2,255
 4013960:	1080201c 	xori	r2,r2,128
 4013964:	10bfe004 	addi	r2,r2,-128
 4013968:	1004403a 	cmpge	r2,r2,zero
 401396c:	10000d1e 	bne	r2,zero,40139a4 <SendCMD+0x64>
   {
      cmd &= 0x7F;
 4013970:	e0bffd03 	ldbu	r2,-12(fp)
 4013974:	10801fcc 	andi	r2,r2,127
 4013978:	e0bffd05 	stb	r2,-12(fp)
      res = SendCMD(CMD55, 0);
 401397c:	01001dc4 	movi	r4,119
 4013980:	000b883a 	mov	r5,zero
 4013984:	40139400 	call	4013940 <SendCMD>
 4013988:	e0bffc05 	stb	r2,-16(fp)
      if (res > 1)
 401398c:	e0bffc03 	ldbu	r2,-16(fp)
 4013990:	108000b0 	cmpltui	r2,r2,2
 4013994:	1000031e 	bne	r2,zero,40139a4 <SendCMD+0x64>
         return res;
 4013998:	e0bffc03 	ldbu	r2,-16(fp)
 401399c:	e0bfff15 	stw	r2,-4(fp)
 40139a0:	00008106 	br	4013ba8 <SendCMD+0x268>
   }

   /* Select the card and wait for ready */
   DESELECT();
 40139a4:	d0a0de0b 	ldhu	r2,-31880(gp)
 40139a8:	10800054 	ori	r2,r2,1
 40139ac:	d0a0de0d 	sth	r2,-31880(gp)
 40139b0:	00e100b4 	movhi	r3,33794
 40139b4:	18c42904 	addi	r3,r3,4260
 40139b8:	d0a0de0b 	ldhu	r2,-31880(gp)
 40139bc:	1880000d 	sth	r2,0(r3)
   SELECT();
 40139c0:	d0e0de0b 	ldhu	r3,-31880(gp)
 40139c4:	00bfff84 	movi	r2,-2
 40139c8:	1884703a 	and	r2,r3,r2
 40139cc:	d0a0de0d 	sth	r2,-31880(gp)
 40139d0:	00e100b4 	movhi	r3,33794
 40139d4:	18c42904 	addi	r3,r3,4260
 40139d8:	d0a0de0b 	ldhu	r2,-31880(gp)
 40139dc:	1880000d 	sth	r2,0(r3)

   if (WaitReady() != 0xFF)
 40139e0:	40138a40 	call	40138a4 <WaitReady>
 40139e4:	10803fcc 	andi	r2,r2,255
 40139e8:	10803fe0 	cmpeqi	r2,r2,255
 40139ec:	1000031e 	bne	r2,zero,40139fc <SendCMD+0xbc>
      return 0xFF;
 40139f0:	00803fc4 	movi	r2,255
 40139f4:	e0bfff15 	stw	r2,-4(fp)
 40139f8:	00006b06 	br	4013ba8 <SendCMD+0x268>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
 40139fc:	00e100b4 	movhi	r3,33794
 4013a00:	18c42804 	addi	r3,r3,4256
 4013a04:	e0bffd03 	ldbu	r2,-12(fp)
 4013a08:	1880000d 	sth	r2,0(r3)
 4013a0c:	00a100b4 	movhi	r2,33794
 4013a10:	10842984 	addi	r2,r2,4262
 4013a14:	1080000b 	ldhu	r2,0(r2)
 4013a18:	10bfffcc 	andi	r2,r2,65535
 4013a1c:	1080004c 	andi	r2,r2,1
 4013a20:	1005003a 	cmpeq	r2,r2,zero
 4013a24:	103ff91e 	bne	r2,zero,4013a0c <SendCMD+0xcc>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
 4013a28:	00e100b4 	movhi	r3,33794
 4013a2c:	18c42804 	addi	r3,r3,4256
 4013a30:	e0bffe17 	ldw	r2,-8(fp)
 4013a34:	1004d63a 	srli	r2,r2,24
 4013a38:	10803fcc 	andi	r2,r2,255
 4013a3c:	1880000d 	sth	r2,0(r3)
 4013a40:	00a100b4 	movhi	r2,33794
 4013a44:	10842984 	addi	r2,r2,4262
 4013a48:	1080000b 	ldhu	r2,0(r2)
 4013a4c:	10bfffcc 	andi	r2,r2,65535
 4013a50:	1080004c 	andi	r2,r2,1
 4013a54:	1005003a 	cmpeq	r2,r2,zero
 4013a58:	103ff91e 	bne	r2,zero,4013a40 <SendCMD+0x100>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
 4013a5c:	00e100b4 	movhi	r3,33794
 4013a60:	18c42804 	addi	r3,r3,4256
 4013a64:	e0bffe17 	ldw	r2,-8(fp)
 4013a68:	1004d43a 	srli	r2,r2,16
 4013a6c:	10803fcc 	andi	r2,r2,255
 4013a70:	1880000d 	sth	r2,0(r3)
 4013a74:	00a100b4 	movhi	r2,33794
 4013a78:	10842984 	addi	r2,r2,4262
 4013a7c:	1080000b 	ldhu	r2,0(r2)
 4013a80:	10bfffcc 	andi	r2,r2,65535
 4013a84:	1080004c 	andi	r2,r2,1
 4013a88:	1005003a 	cmpeq	r2,r2,zero
 4013a8c:	103ff91e 	bne	r2,zero,4013a74 <SendCMD+0x134>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
 4013a90:	00e100b4 	movhi	r3,33794
 4013a94:	18c42804 	addi	r3,r3,4256
 4013a98:	e0bffe17 	ldw	r2,-8(fp)
 4013a9c:	1004d23a 	srli	r2,r2,8
 4013aa0:	10803fcc 	andi	r2,r2,255
 4013aa4:	1880000d 	sth	r2,0(r3)
 4013aa8:	00a100b4 	movhi	r2,33794
 4013aac:	10842984 	addi	r2,r2,4262
 4013ab0:	1080000b 	ldhu	r2,0(r2)
 4013ab4:	10bfffcc 	andi	r2,r2,65535
 4013ab8:	1080004c 	andi	r2,r2,1
 4013abc:	1005003a 	cmpeq	r2,r2,zero
 4013ac0:	103ff91e 	bne	r2,zero,4013aa8 <SendCMD+0x168>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
 4013ac4:	00e100b4 	movhi	r3,33794
 4013ac8:	18c42804 	addi	r3,r3,4256
 4013acc:	e0bffe17 	ldw	r2,-8(fp)
 4013ad0:	10803fcc 	andi	r2,r2,255
 4013ad4:	1880000d 	sth	r2,0(r3)
 4013ad8:	00a100b4 	movhi	r2,33794
 4013adc:	10842984 	addi	r2,r2,4262
 4013ae0:	1080000b 	ldhu	r2,0(r2)
 4013ae4:	10bfffcc 	andi	r2,r2,65535
 4013ae8:	1080004c 	andi	r2,r2,1
 4013aec:	1005003a 	cmpeq	r2,r2,zero
 4013af0:	103ff91e 	bne	r2,zero,4013ad8 <SendCMD+0x198>

   n = 0x01;   /* Dummy CRC + Stop */
 4013af4:	00800044 	movi	r2,1
 4013af8:	e0bffc45 	stb	r2,-15(fp)
   if (cmd == CMD0)
 4013afc:	e0bffd03 	ldbu	r2,-12(fp)
 4013b00:	10801018 	cmpnei	r2,r2,64
 4013b04:	1000021e 	bne	r2,zero,4013b10 <SendCMD+0x1d0>
      n = 0x95;   /* Valid CRC for CMD0(0) */
 4013b08:	00bfe544 	movi	r2,-107
 4013b0c:	e0bffc45 	stb	r2,-15(fp)
   if (cmd == CMD8)
 4013b10:	e0bffd03 	ldbu	r2,-12(fp)
 4013b14:	10801218 	cmpnei	r2,r2,72
 4013b18:	1000021e 	bne	r2,zero,4013b24 <SendCMD+0x1e4>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
 4013b1c:	00bfe1c4 	movi	r2,-121
 4013b20:	e0bffc45 	stb	r2,-15(fp)
   TRANSMIT_U8(n);
 4013b24:	00e100b4 	movhi	r3,33794
 4013b28:	18c42804 	addi	r3,r3,4256
 4013b2c:	e0bffc43 	ldbu	r2,-15(fp)
 4013b30:	1880000d 	sth	r2,0(r3)
 4013b34:	00a100b4 	movhi	r2,33794
 4013b38:	10842984 	addi	r2,r2,4262
 4013b3c:	1080000b 	ldhu	r2,0(r2)
 4013b40:	10bfffcc 	andi	r2,r2,65535
 4013b44:	1080004c 	andi	r2,r2,1
 4013b48:	1005003a 	cmpeq	r2,r2,zero
 4013b4c:	103ff91e 	bne	r2,zero,4013b34 <SendCMD+0x1f4>

   /* Receive command response */
   if (cmd == CMD12)
 4013b50:	e0bffd03 	ldbu	r2,-12(fp)
 4013b54:	10801318 	cmpnei	r2,r2,76
 4013b58:	1000011e 	bne	r2,zero,4013b60 <SendCMD+0x220>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
 4013b5c:	401350c0 	call	401350c <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
 4013b60:	00800284 	movi	r2,10
 4013b64:	e0bffc45 	stb	r2,-15(fp)
   do
   {
      res = ReceiveU8();
 4013b68:	401350c0 	call	401350c <ReceiveU8>
 4013b6c:	e0bffc05 	stb	r2,-16(fp)
   }
   while ((res & 0x80) && --n);
 4013b70:	e0bffc03 	ldbu	r2,-16(fp)
 4013b74:	10803fcc 	andi	r2,r2,255
 4013b78:	1080201c 	xori	r2,r2,128
 4013b7c:	10bfe004 	addi	r2,r2,-128
 4013b80:	1004403a 	cmpge	r2,r2,zero
 4013b84:	1000061e 	bne	r2,zero,4013ba0 <SendCMD+0x260>
 4013b88:	e0bffc43 	ldbu	r2,-15(fp)
 4013b8c:	10bfffc4 	addi	r2,r2,-1
 4013b90:	e0bffc45 	stb	r2,-15(fp)
 4013b94:	e0bffc43 	ldbu	r2,-15(fp)
 4013b98:	1004c03a 	cmpne	r2,r2,zero
 4013b9c:	103ff21e 	bne	r2,zero,4013b68 <SendCMD+0x228>

   return(res); /* Return with the response value */
 4013ba0:	e0bffc03 	ldbu	r2,-16(fp)
 4013ba4:	e0bfff15 	stw	r2,-4(fp)
 4013ba8:	e0bfff17 	ldw	r2,-4(fp)
} /* SendCMD */
 4013bac:	e037883a 	mov	sp,fp
 4013bb0:	dfc00117 	ldw	ra,4(sp)
 4013bb4:	df000017 	ldw	fp,0(sp)
 4013bb8:	dec00204 	addi	sp,sp,8
 4013bbc:	f800283a 	ret

04013bc0 <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
 4013bc0:	defffe04 	addi	sp,sp,-8
 4013bc4:	dfc00115 	stw	ra,4(sp)
 4013bc8:	df000015 	stw	fp,0(sp)
 4013bcc:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
 4013bd0:	40134540 	call	4013454 <InitDiskIOHardware>

   return(FFS_OK);
 4013bd4:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
 4013bd8:	e037883a 	mov	sp,fp
 4013bdc:	dfc00117 	ldw	ra,4(sp)
 4013be0:	df000017 	ldw	fp,0(sp)
 4013be4:	dec00204 	addi	sp,sp,8
 4013be8:	f800283a 	ret

04013bec <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
 4013bec:	defffc04 	addi	sp,sp,-16
 4013bf0:	dfc00315 	stw	ra,12(sp)
 4013bf4:	df000215 	stw	fp,8(sp)
 4013bf8:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
 4013bfc:	d0a0dc8b 	ldhu	r2,-31886(gp)
 4013c00:	10bfffcc 	andi	r2,r2,65535
 4013c04:	e0bfff15 	stw	r2,-4(fp)
   if (n)
 4013c08:	e0bfff17 	ldw	r2,-4(fp)
 4013c0c:	1005003a 	cmpeq	r2,r2,zero
 4013c10:	1000051e 	bne	r2,zero,4013c28 <ffs_DiskIOTimerproc+0x3c>
      Timer1 = (FFS_U16)-- n;
 4013c14:	e0bfff17 	ldw	r2,-4(fp)
 4013c18:	10bfffc4 	addi	r2,r2,-1
 4013c1c:	e0bfff15 	stw	r2,-4(fp)
 4013c20:	e0bfff17 	ldw	r2,-4(fp)
 4013c24:	d0a0dc8d 	sth	r2,-31886(gp)
   n = Timer2;
 4013c28:	d0a0dd0b 	ldhu	r2,-31884(gp)
 4013c2c:	10bfffcc 	andi	r2,r2,65535
 4013c30:	e0bfff15 	stw	r2,-4(fp)
   if (n)
 4013c34:	e0bfff17 	ldw	r2,-4(fp)
 4013c38:	1005003a 	cmpeq	r2,r2,zero
 4013c3c:	1000051e 	bne	r2,zero,4013c54 <ffs_DiskIOTimerproc+0x68>
      Timer2 = (FFS_U16)-- n;
 4013c40:	e0bfff17 	ldw	r2,-4(fp)
 4013c44:	10bfffc4 	addi	r2,r2,-1
 4013c48:	e0bfff15 	stw	r2,-4(fp)
 4013c4c:	e0bfff17 	ldw	r2,-4(fp)
 4013c50:	d0a0dd0d 	sth	r2,-31884(gp)

   n = pvm;
 4013c54:	d0a0df17 	ldw	r2,-31876(gp)
 4013c58:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
 4013c5c:	40138800 	call	4013880 <GetCDWP>
 4013c60:	d0a0df15 	stw	r2,-31876(gp)

   /* Have contacts stabled? */
   if (n == pvm)
 4013c64:	d0e0df17 	ldw	r3,-31876(gp)
 4013c68:	e0bfff17 	ldw	r2,-4(fp)
 4013c6c:	10c0211e 	bne	r2,r3,4013cf4 <ffs_DiskIOTimerproc+0x108>
   {
      s = Stat;
 4013c70:	d0a00203 	ldbu	r2,-32760(gp)
 4013c74:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
 4013c78:	d0a0df17 	ldw	r2,-31876(gp)
 4013c7c:	1080008c 	andi	r2,r2,2
 4013c80:	1005003a 	cmpeq	r2,r2,zero
 4013c84:	1000041e 	bne	r2,zero,4013c98 <ffs_DiskIOTimerproc+0xac>
         s |= STA_PROTECT;
 4013c88:	e0bffe03 	ldbu	r2,-8(fp)
 4013c8c:	10800114 	ori	r2,r2,4
 4013c90:	e0bffe05 	stb	r2,-8(fp)
 4013c94:	00000406 	br	4013ca8 <ffs_DiskIOTimerproc+0xbc>
      else
         s &= ~STA_PROTECT;
 4013c98:	e0bffe03 	ldbu	r2,-8(fp)
 4013c9c:	00fffec4 	movi	r3,-5
 4013ca0:	10c4703a 	and	r2,r2,r3
 4013ca4:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
 4013ca8:	d0a0df17 	ldw	r2,-31876(gp)
 4013cac:	1080004c 	andi	r2,r2,1
 4013cb0:	10803fcc 	andi	r2,r2,255
 4013cb4:	1005003a 	cmpeq	r2,r2,zero
 4013cb8:	1000041e 	bne	r2,zero,4013ccc <ffs_DiskIOTimerproc+0xe0>
         s |= (STA_NODISK | STA_NOINIT);
 4013cbc:	e0bffe03 	ldbu	r2,-8(fp)
 4013cc0:	108000d4 	ori	r2,r2,3
 4013cc4:	e0bffe05 	stb	r2,-8(fp)
 4013cc8:	00000406 	br	4013cdc <ffs_DiskIOTimerproc+0xf0>
      else
         s &= ~STA_NODISK;
 4013ccc:	e0bffe03 	ldbu	r2,-8(fp)
 4013cd0:	00ffff44 	movi	r3,-3
 4013cd4:	10c4703a 	and	r2,r2,r3
 4013cd8:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
 4013cdc:	e0fffe03 	ldbu	r3,-8(fp)
 4013ce0:	00bffec4 	movi	r2,-5
 4013ce4:	1884703a 	and	r2,r3,r2
 4013ce8:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
 4013cec:	e0bffe03 	ldbu	r2,-8(fp)
 4013cf0:	d0a00205 	stb	r2,-32760(gp)
   }
} /* ffs_DiskIOTimerproc */
 4013cf4:	e037883a 	mov	sp,fp
 4013cf8:	dfc00117 	ldw	ra,4(sp)
 4013cfc:	df000017 	ldw	fp,0(sp)
 4013d00:	dec00204 	addi	sp,sp,8
 4013d04:	f800283a 	ret

04013d08 <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
 4013d08:	defff904 	addi	sp,sp,-28
 4013d0c:	dfc00615 	stw	ra,24(sp)
 4013d10:	df000515 	stw	fp,20(sp)
 4013d14:	dc000415 	stw	r16,16(sp)
 4013d18:	df000404 	addi	fp,sp,16
 4013d1c:	e13ffe05 	stb	r4,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
 4013d20:	d0a00203 	ldbu	r2,-32760(gp)
 4013d24:	10803fcc 	andi	r2,r2,255
 4013d28:	1080008c 	andi	r2,r2,2
 4013d2c:	1005003a 	cmpeq	r2,r2,zero
 4013d30:	1000041e 	bne	r2,zero,4013d44 <ffs_DiskIOInitialize+0x3c>
      return Stat;
 4013d34:	d0a00203 	ldbu	r2,-32760(gp)
 4013d38:	10803fcc 	andi	r2,r2,255
 4013d3c:	e0bfff15 	stw	r2,-4(fp)
 4013d40:	00009106 	br	4013f88 <ffs_DiskIOInitialize+0x280>

   /* low speed during init */
   SetLowSpeed();
 4013d44:	401339c0 	call	401339c <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
 4013d48:	00800284 	movi	r2,10
 4013d4c:	e0bffc85 	stb	r2,-14(fp)
 4013d50:	00000406 	br	4013d64 <ffs_DiskIOInitialize+0x5c>
      ReceiveU8();   /* 80 dummy clocks */
 4013d54:	401350c0 	call	401350c <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
 4013d58:	e0bffc83 	ldbu	r2,-14(fp)
 4013d5c:	10bfffc4 	addi	r2,r2,-1
 4013d60:	e0bffc85 	stb	r2,-14(fp)
 4013d64:	e0bffc83 	ldbu	r2,-14(fp)
 4013d68:	1004c03a 	cmpne	r2,r2,zero
 4013d6c:	103ff91e 	bne	r2,zero,4013d54 <ffs_DiskIOInitialize+0x4c>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
 4013d70:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
 4013d74:	01001004 	movi	r4,64
 4013d78:	000b883a 	mov	r5,zero
 4013d7c:	40139400 	call	4013940 <SendCMD>
 4013d80:	10803fcc 	andi	r2,r2,255
 4013d84:	10800058 	cmpnei	r2,r2,1
 4013d88:	1000711e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
 4013d8c:	00801904 	movi	r2,100
 4013d90:	d0a0dc8d 	sth	r2,-31886(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
 4013d94:	01001204 	movi	r4,72
 4013d98:	01406a84 	movi	r5,426
 4013d9c:	40139400 	call	4013940 <SendCMD>
 4013da0:	10803fcc 	andi	r2,r2,255
 4013da4:	10800058 	cmpnei	r2,r2,1
 4013da8:	1000451e 	bne	r2,zero,4013ec0 <ffs_DiskIOInitialize+0x1b8>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
 4013dac:	e03ffc85 	stb	zero,-14(fp)
 4013db0:	00000906 	br	4013dd8 <ffs_DiskIOInitialize+0xd0>
            ocr[n] = ReceiveU8();
 4013db4:	e43ffc83 	ldbu	r16,-14(fp)
 4013db8:	401350c0 	call	401350c <ReceiveU8>
 4013dbc:	1007883a 	mov	r3,r2
 4013dc0:	e0bffcc4 	addi	r2,fp,-13
 4013dc4:	1405883a 	add	r2,r2,r16
 4013dc8:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
 4013dcc:	e0bffc83 	ldbu	r2,-14(fp)
 4013dd0:	10800044 	addi	r2,r2,1
 4013dd4:	e0bffc85 	stb	r2,-14(fp)
 4013dd8:	e0bffc83 	ldbu	r2,-14(fp)
 4013ddc:	10800130 	cmpltui	r2,r2,4
 4013de0:	103ff41e 	bne	r2,zero,4013db4 <ffs_DiskIOInitialize+0xac>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 4013de4:	e0bffd43 	ldbu	r2,-11(fp)
 4013de8:	10803fcc 	andi	r2,r2,255
 4013dec:	10800058 	cmpnei	r2,r2,1
 4013df0:	1000571e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
 4013df4:	e0bffd83 	ldbu	r2,-10(fp)
 4013df8:	10803fcc 	andi	r2,r2,255
 4013dfc:	10802a98 	cmpnei	r2,r2,170
 4013e00:	1000531e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
 4013e04:	d0a0dc8b 	ldhu	r2,-31886(gp)
 4013e08:	10bfffcc 	andi	r2,r2,65535
 4013e0c:	1005003a 	cmpeq	r2,r2,zero
 4013e10:	1000061e 	bne	r2,zero,4013e2c <ffs_DiskIOInitialize+0x124>
 4013e14:	01003a44 	movi	r4,233
 4013e18:	01500034 	movhi	r5,16384
 4013e1c:	40139400 	call	4013940 <SendCMD>
 4013e20:	10803fcc 	andi	r2,r2,255
 4013e24:	1004c03a 	cmpne	r2,r2,zero
 4013e28:	103ff61e 	bne	r2,zero,4013e04 <ffs_DiskIOInitialize+0xfc>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
 4013e2c:	d0a0dc8b 	ldhu	r2,-31886(gp)
 4013e30:	10bfffcc 	andi	r2,r2,65535
 4013e34:	1005003a 	cmpeq	r2,r2,zero
 4013e38:	1000451e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
 4013e3c:	01001e84 	movi	r4,122
 4013e40:	000b883a 	mov	r5,zero
 4013e44:	40139400 	call	4013940 <SendCMD>
 4013e48:	10803fcc 	andi	r2,r2,255
 4013e4c:	1004c03a 	cmpne	r2,r2,zero
 4013e50:	10003f1e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
 4013e54:	e03ffc85 	stb	zero,-14(fp)
 4013e58:	00000906 	br	4013e80 <ffs_DiskIOInitialize+0x178>
                  ocr[n] = ReceiveU8();
 4013e5c:	e43ffc83 	ldbu	r16,-14(fp)
 4013e60:	401350c0 	call	401350c <ReceiveU8>
 4013e64:	1007883a 	mov	r3,r2
 4013e68:	e0bffcc4 	addi	r2,fp,-13
 4013e6c:	1405883a 	add	r2,r2,r16
 4013e70:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
 4013e74:	e0bffc83 	ldbu	r2,-14(fp)
 4013e78:	10800044 	addi	r2,r2,1
 4013e7c:	e0bffc85 	stb	r2,-14(fp)
 4013e80:	e0bffc83 	ldbu	r2,-14(fp)
 4013e84:	10800130 	cmpltui	r2,r2,4
 4013e88:	103ff41e 	bne	r2,zero,4013e5c <ffs_DiskIOInitialize+0x154>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 4013e8c:	e0bffcc3 	ldbu	r2,-13(fp)
 4013e90:	10803fcc 	andi	r2,r2,255
 4013e94:	1080100c 	andi	r2,r2,64
 4013e98:	1005003a 	cmpeq	r2,r2,zero
 4013e9c:	1000031e 	bne	r2,zero,4013eac <ffs_DiskIOInitialize+0x1a4>
 4013ea0:	00800304 	movi	r2,12
 4013ea4:	e0bffe45 	stb	r2,-7(fp)
 4013ea8:	00000206 	br	4013eb4 <ffs_DiskIOInitialize+0x1ac>
 4013eac:	00800104 	movi	r2,4
 4013eb0:	e0bffe45 	stb	r2,-7(fp)
 4013eb4:	e0bffe43 	ldbu	r2,-7(fp)
 4013eb8:	e0bffc45 	stb	r2,-15(fp)
 4013ebc:	00002406 	br	4013f50 <ffs_DiskIOInitialize+0x248>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
 4013ec0:	01003a44 	movi	r4,233
 4013ec4:	000b883a 	mov	r5,zero
 4013ec8:	40139400 	call	4013940 <SendCMD>
 4013ecc:	10803fcc 	andi	r2,r2,255
 4013ed0:	108000a8 	cmpgeui	r2,r2,2
 4013ed4:	1000051e 	bne	r2,zero,4013eec <ffs_DiskIOInitialize+0x1e4>
         {
            ty  = CT_SD1;
 4013ed8:	00800084 	movi	r2,2
 4013edc:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
 4013ee0:	00bffa44 	movi	r2,-23
 4013ee4:	e0bffc05 	stb	r2,-16(fp)
 4013ee8:	00000406 	br	4013efc <ffs_DiskIOInitialize+0x1f4>
         }
         else
         {
            ty  = CT_MMC;
 4013eec:	00800044 	movi	r2,1
 4013ef0:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
 4013ef4:	00801044 	movi	r2,65
 4013ef8:	e0bffc05 	stb	r2,-16(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
 4013efc:	d0a0dc8b 	ldhu	r2,-31886(gp)
 4013f00:	10bfffcc 	andi	r2,r2,65535
 4013f04:	1005003a 	cmpeq	r2,r2,zero
 4013f08:	1000061e 	bne	r2,zero,4013f24 <ffs_DiskIOInitialize+0x21c>
 4013f0c:	e13ffc03 	ldbu	r4,-16(fp)
 4013f10:	000b883a 	mov	r5,zero
 4013f14:	40139400 	call	4013940 <SendCMD>
 4013f18:	10803fcc 	andi	r2,r2,255
 4013f1c:	1004c03a 	cmpne	r2,r2,zero
 4013f20:	103ff61e 	bne	r2,zero,4013efc <ffs_DiskIOInitialize+0x1f4>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
 4013f24:	d0a0dc8b 	ldhu	r2,-31886(gp)
 4013f28:	10bfffcc 	andi	r2,r2,65535
 4013f2c:	1005003a 	cmpeq	r2,r2,zero
 4013f30:	1000061e 	bne	r2,zero,4013f4c <ffs_DiskIOInitialize+0x244>
 4013f34:	01001404 	movi	r4,80
 4013f38:	01408004 	movi	r5,512
 4013f3c:	40139400 	call	4013940 <SendCMD>
 4013f40:	10803fcc 	andi	r2,r2,255
 4013f44:	1005003a 	cmpeq	r2,r2,zero
 4013f48:	1000011e 	bne	r2,zero,4013f50 <ffs_DiskIOInitialize+0x248>
            ty = 0;
 4013f4c:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
 4013f50:	e0bffc43 	ldbu	r2,-15(fp)
 4013f54:	d0a0dc05 	stb	r2,-31888(gp)
   ReleaseBus();
 4013f58:	40138fc0 	call	40138fc <ReleaseBus>

   if (ty)
 4013f5c:	e0bffc43 	ldbu	r2,-15(fp)
 4013f60:	1005003a 	cmpeq	r2,r2,zero
 4013f64:	1000051e 	bne	r2,zero,4013f7c <ffs_DiskIOInitialize+0x274>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 4013f68:	d0e00203 	ldbu	r3,-32760(gp)
 4013f6c:	00bfff84 	movi	r2,-2
 4013f70:	1884703a 	and	r2,r3,r2
 4013f74:	d0a00205 	stb	r2,-32760(gp)

      SetHighSpeed();
 4013f78:	40133e80 	call	40133e8 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
 4013f7c:	d0a00203 	ldbu	r2,-32760(gp)
 4013f80:	10803fcc 	andi	r2,r2,255
 4013f84:	e0bfff15 	stw	r2,-4(fp)
 4013f88:	e0bfff17 	ldw	r2,-4(fp)
} /* ffs_DiskIOInitialize */
 4013f8c:	e037883a 	mov	sp,fp
 4013f90:	dfc00217 	ldw	ra,8(sp)
 4013f94:	df000117 	ldw	fp,4(sp)
 4013f98:	dc000017 	ldw	r16,0(sp)
 4013f9c:	dec00304 	addi	sp,sp,12
 4013fa0:	f800283a 	ret

04013fa4 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
 4013fa4:	defffe04 	addi	sp,sp,-8
 4013fa8:	df000115 	stw	fp,4(sp)
 4013fac:	df000104 	addi	fp,sp,4
 4013fb0:	e13fff05 	stb	r4,-4(fp)
   (void)drv;

   return(Stat);
 4013fb4:	d0a00203 	ldbu	r2,-32760(gp)
 4013fb8:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOStatus */
 4013fbc:	e037883a 	mov	sp,fp
 4013fc0:	df000017 	ldw	fp,0(sp)
 4013fc4:	dec00104 	addi	sp,sp,4
 4013fc8:	f800283a 	ret

04013fcc <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
 4013fcc:	defff904 	addi	sp,sp,-28
 4013fd0:	dfc00615 	stw	ra,24(sp)
 4013fd4:	df000515 	stw	fp,20(sp)
 4013fd8:	df000504 	addi	fp,sp,20
 4013fdc:	e17ffc15 	stw	r5,-16(fp)
 4013fe0:	e1bffd15 	stw	r6,-12(fp)
 4013fe4:	e13ffb05 	stb	r4,-20(fp)
 4013fe8:	e1fffe05 	stb	r7,-8(fp)
   (void)drv;

   if (!count)
 4013fec:	e0bffe03 	ldbu	r2,-8(fp)
 4013ff0:	1004c03a 	cmpne	r2,r2,zero
 4013ff4:	1000031e 	bne	r2,zero,4014004 <ffs_DiskIORead+0x38>
      return RES_PARERR;
 4013ff8:	00800104 	movi	r2,4
 4013ffc:	e0bfff15 	stw	r2,-4(fp)
 4014000:	00003c06 	br	40140f4 <ffs_DiskIORead+0x128>
   if (Stat & STA_NOINIT)
 4014004:	d0a00203 	ldbu	r2,-32760(gp)
 4014008:	10803fcc 	andi	r2,r2,255
 401400c:	1080004c 	andi	r2,r2,1
 4014010:	10803fcc 	andi	r2,r2,255
 4014014:	1005003a 	cmpeq	r2,r2,zero
 4014018:	1000031e 	bne	r2,zero,4014028 <ffs_DiskIORead+0x5c>
      return RES_NOTRDY;
 401401c:	008000c4 	movi	r2,3
 4014020:	e0bfff15 	stw	r2,-4(fp)
 4014024:	00003306 	br	40140f4 <ffs_DiskIORead+0x128>

   if (!(CardType & CT_BLOCK))
 4014028:	d0a0dc03 	ldbu	r2,-31888(gp)
 401402c:	10803fcc 	andi	r2,r2,255
 4014030:	1080020c 	andi	r2,r2,8
 4014034:	1004c03a 	cmpne	r2,r2,zero
 4014038:	1000031e 	bne	r2,zero,4014048 <ffs_DiskIORead+0x7c>
      sector *= 512; /* Convert LBA to byte address if needed */
 401403c:	e0bffd17 	ldw	r2,-12(fp)
 4014040:	1004927a 	slli	r2,r2,9
 4014044:	e0bffd15 	stw	r2,-12(fp)

   if (count == 1)
 4014048:	e0bffe03 	ldbu	r2,-8(fp)
 401404c:	10800058 	cmpnei	r2,r2,1
 4014050:	10000d1e 	bne	r2,zero,4014088 <ffs_DiskIORead+0xbc>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
 4014054:	01001444 	movi	r4,81
 4014058:	e17ffd17 	ldw	r5,-12(fp)
 401405c:	40139400 	call	4013940 <SendCMD>
 4014060:	10803fcc 	andi	r2,r2,255
 4014064:	1004c03a 	cmpne	r2,r2,zero
 4014068:	10001e1e 	bne	r2,zero,40140e4 <ffs_DiskIORead+0x118>
 401406c:	e13ffc17 	ldw	r4,-16(fp)
 4014070:	01408004 	movi	r5,512
 4014074:	40135640 	call	4013564 <ReceiveDatablock>
 4014078:	1005003a 	cmpeq	r2,r2,zero
 401407c:	1000191e 	bne	r2,zero,40140e4 <ffs_DiskIORead+0x118>
          && ReceiveDatablock(buff, 512))
         count = 0;
 4014080:	e03ffe05 	stb	zero,-8(fp)
 4014084:	00001706 	br	40140e4 <ffs_DiskIORead+0x118>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
 4014088:	01001484 	movi	r4,82
 401408c:	e17ffd17 	ldw	r5,-12(fp)
 4014090:	40139400 	call	4013940 <SendCMD>
 4014094:	10803fcc 	andi	r2,r2,255
 4014098:	1004c03a 	cmpne	r2,r2,zero
 401409c:	1000111e 	bne	r2,zero,40140e4 <ffs_DiskIORead+0x118>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
 40140a0:	e13ffc17 	ldw	r4,-16(fp)
 40140a4:	01408004 	movi	r5,512
 40140a8:	40135640 	call	4013564 <ReceiveDatablock>
 40140ac:	1005003a 	cmpeq	r2,r2,zero
 40140b0:	1000091e 	bne	r2,zero,40140d8 <ffs_DiskIORead+0x10c>
               break;
            buff += 512;
 40140b4:	e0bffc17 	ldw	r2,-16(fp)
 40140b8:	10808004 	addi	r2,r2,512
 40140bc:	e0bffc15 	stw	r2,-16(fp)
         }
         while (--count);
 40140c0:	e0bffe03 	ldbu	r2,-8(fp)
 40140c4:	10bfffc4 	addi	r2,r2,-1
 40140c8:	e0bffe05 	stb	r2,-8(fp)
 40140cc:	e0bffe03 	ldbu	r2,-8(fp)
 40140d0:	1004c03a 	cmpne	r2,r2,zero
 40140d4:	103ff21e 	bne	r2,zero,40140a0 <ffs_DiskIORead+0xd4>
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
 40140d8:	01001304 	movi	r4,76
 40140dc:	000b883a 	mov	r5,zero
 40140e0:	40139400 	call	4013940 <SendCMD>
      }
   }
   ReleaseBus();
 40140e4:	40138fc0 	call	40138fc <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
 40140e8:	e0bffe03 	ldbu	r2,-8(fp)
 40140ec:	1004c03a 	cmpne	r2,r2,zero
 40140f0:	e0bfff15 	stw	r2,-4(fp)
 40140f4:	e0bfff17 	ldw	r2,-4(fp)
} /* ffs_DiskIORead */
 40140f8:	e037883a 	mov	sp,fp
 40140fc:	dfc00117 	ldw	ra,4(sp)
 4014100:	df000017 	ldw	fp,0(sp)
 4014104:	dec00204 	addi	sp,sp,8
 4014108:	f800283a 	ret

0401410c <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
 401410c:	defff904 	addi	sp,sp,-28
 4014110:	dfc00615 	stw	ra,24(sp)
 4014114:	df000515 	stw	fp,20(sp)
 4014118:	df000504 	addi	fp,sp,20
 401411c:	e17ffc15 	stw	r5,-16(fp)
 4014120:	e1bffd15 	stw	r6,-12(fp)
 4014124:	e13ffb05 	stb	r4,-20(fp)
 4014128:	e1fffe05 	stb	r7,-8(fp)
   (void)drv;

   if (!count)
 401412c:	e0bffe03 	ldbu	r2,-8(fp)
 4014130:	1004c03a 	cmpne	r2,r2,zero
 4014134:	1000031e 	bne	r2,zero,4014144 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
 4014138:	00800104 	movi	r2,4
 401413c:	e0bfff15 	stw	r2,-4(fp)
 4014140:	00005306 	br	4014290 <ffs_DiskIOWrite+0x184>
   if (Stat & STA_NOINIT)
 4014144:	d0a00203 	ldbu	r2,-32760(gp)
 4014148:	10803fcc 	andi	r2,r2,255
 401414c:	1080004c 	andi	r2,r2,1
 4014150:	10803fcc 	andi	r2,r2,255
 4014154:	1005003a 	cmpeq	r2,r2,zero
 4014158:	1000031e 	bne	r2,zero,4014168 <ffs_DiskIOWrite+0x5c>
      return RES_NOTRDY;
 401415c:	008000c4 	movi	r2,3
 4014160:	e0bfff15 	stw	r2,-4(fp)
 4014164:	00004a06 	br	4014290 <ffs_DiskIOWrite+0x184>
   if (Stat & STA_PROTECT)
 4014168:	d0a00203 	ldbu	r2,-32760(gp)
 401416c:	10803fcc 	andi	r2,r2,255
 4014170:	1080010c 	andi	r2,r2,4
 4014174:	1005003a 	cmpeq	r2,r2,zero
 4014178:	1000031e 	bne	r2,zero,4014188 <ffs_DiskIOWrite+0x7c>
      return RES_WRPRT;
 401417c:	00800084 	movi	r2,2
 4014180:	e0bfff15 	stw	r2,-4(fp)
 4014184:	00004206 	br	4014290 <ffs_DiskIOWrite+0x184>

   if (!(CardType & CT_BLOCK))
 4014188:	d0a0dc03 	ldbu	r2,-31888(gp)
 401418c:	10803fcc 	andi	r2,r2,255
 4014190:	1080020c 	andi	r2,r2,8
 4014194:	1004c03a 	cmpne	r2,r2,zero
 4014198:	1000031e 	bne	r2,zero,40141a8 <ffs_DiskIOWrite+0x9c>
      sector *= 512; /* Convert LBA to byte address if needed */
 401419c:	e0bffd17 	ldw	r2,-12(fp)
 40141a0:	1004927a 	slli	r2,r2,9
 40141a4:	e0bffd15 	stw	r2,-12(fp)

   if (count == 1)
 40141a8:	e0bffe03 	ldbu	r2,-8(fp)
 40141ac:	10800058 	cmpnei	r2,r2,1
 40141b0:	10000d1e 	bne	r2,zero,40141e8 <ffs_DiskIOWrite+0xdc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
 40141b4:	01001604 	movi	r4,88
 40141b8:	e17ffd17 	ldw	r5,-12(fp)
 40141bc:	40139400 	call	4013940 <SendCMD>
 40141c0:	10803fcc 	andi	r2,r2,255
 40141c4:	1004c03a 	cmpne	r2,r2,zero
 40141c8:	10002d1e 	bne	r2,zero,4014280 <ffs_DiskIOWrite+0x174>
 40141cc:	e13ffc17 	ldw	r4,-16(fp)
 40141d0:	01403f84 	movi	r5,254
 40141d4:	401372c0 	call	401372c <TransmitDatablock>
 40141d8:	1005003a 	cmpeq	r2,r2,zero
 40141dc:	1000281e 	bne	r2,zero,4014280 <ffs_DiskIOWrite+0x174>
          && TransmitDatablock(buff, 0xFE))
         count = 0;
 40141e0:	e03ffe05 	stb	zero,-8(fp)
 40141e4:	00002606 	br	4014280 <ffs_DiskIOWrite+0x174>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
 40141e8:	d0a0dc03 	ldbu	r2,-31888(gp)
 40141ec:	10803fcc 	andi	r2,r2,255
 40141f0:	1080018c 	andi	r2,r2,6
 40141f4:	1005003a 	cmpeq	r2,r2,zero
 40141f8:	1000061e 	bne	r2,zero,4014214 <ffs_DiskIOWrite+0x108>
      {
         SendCMD(CMD55, 0);
 40141fc:	01001dc4 	movi	r4,119
 4014200:	000b883a 	mov	r5,zero
 4014204:	40139400 	call	4013940 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
 4014208:	e17ffe03 	ldbu	r5,-8(fp)
 401420c:	010015c4 	movi	r4,87
 4014210:	40139400 	call	4013940 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
 4014214:	01001644 	movi	r4,89
 4014218:	e17ffd17 	ldw	r5,-12(fp)
 401421c:	40139400 	call	4013940 <SendCMD>
 4014220:	10803fcc 	andi	r2,r2,255
 4014224:	1004c03a 	cmpne	r2,r2,zero
 4014228:	1000151e 	bne	r2,zero,4014280 <ffs_DiskIOWrite+0x174>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
 401422c:	e13ffc17 	ldw	r4,-16(fp)
 4014230:	01403f04 	movi	r5,252
 4014234:	401372c0 	call	401372c <TransmitDatablock>
 4014238:	1005003a 	cmpeq	r2,r2,zero
 401423c:	1000091e 	bne	r2,zero,4014264 <ffs_DiskIOWrite+0x158>
               break;
            buff += 512;
 4014240:	e0bffc17 	ldw	r2,-16(fp)
 4014244:	10808004 	addi	r2,r2,512
 4014248:	e0bffc15 	stw	r2,-16(fp)
         }
         while (--count);
 401424c:	e0bffe03 	ldbu	r2,-8(fp)
 4014250:	10bfffc4 	addi	r2,r2,-1
 4014254:	e0bffe05 	stb	r2,-8(fp)
 4014258:	e0bffe03 	ldbu	r2,-8(fp)
 401425c:	1004c03a 	cmpne	r2,r2,zero
 4014260:	103ff21e 	bne	r2,zero,401422c <ffs_DiskIOWrite+0x120>
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
 4014264:	0009883a 	mov	r4,zero
 4014268:	01403f44 	movi	r5,253
 401426c:	401372c0 	call	401372c <TransmitDatablock>
 4014270:	1004c03a 	cmpne	r2,r2,zero
 4014274:	1000021e 	bne	r2,zero,4014280 <ffs_DiskIOWrite+0x174>
            count = 1;
 4014278:	00800044 	movi	r2,1
 401427c:	e0bffe05 	stb	r2,-8(fp)
      }
   }
   ReleaseBus();
 4014280:	40138fc0 	call	40138fc <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
 4014284:	e0bffe03 	ldbu	r2,-8(fp)
 4014288:	1004c03a 	cmpne	r2,r2,zero
 401428c:	e0bfff15 	stw	r2,-4(fp)
 4014290:	e0bfff17 	ldw	r2,-4(fp)
} /* ffs_DiskIOWrite */
 4014294:	e037883a 	mov	sp,fp
 4014298:	dfc00117 	ldw	ra,4(sp)
 401429c:	df000017 	ldw	fp,0(sp)
 40142a0:	dec00204 	addi	sp,sp,8
 40142a4:	f800283a 	ret

040142a8 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
 40142a8:	defff004 	addi	sp,sp,-64
 40142ac:	dfc00f15 	stw	ra,60(sp)
 40142b0:	df000e15 	stw	fp,56(sp)
 40142b4:	dc000d15 	stw	r16,52(sp)
 40142b8:	df000d04 	addi	fp,sp,52
 40142bc:	e1bffd15 	stw	r6,-12(fp)
 40142c0:	e13ffb05 	stb	r4,-20(fp)
 40142c4:	e17ffc05 	stb	r5,-16(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
 40142c8:	e0bffd17 	ldw	r2,-12(fp)
 40142cc:	e0bff415 	stw	r2,-48(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
 40142d0:	d0a00203 	ldbu	r2,-32760(gp)
 40142d4:	10803fcc 	andi	r2,r2,255
 40142d8:	1080004c 	andi	r2,r2,1
 40142dc:	10803fcc 	andi	r2,r2,255
 40142e0:	1005003a 	cmpeq	r2,r2,zero
 40142e4:	1000031e 	bne	r2,zero,40142f4 <ffs_DiskIOIoctl+0x4c>
      return RES_NOTRDY;
 40142e8:	008000c4 	movi	r2,3
 40142ec:	e0bfff15 	stw	r2,-4(fp)
 40142f0:	00011f06 	br	4014770 <ffs_DiskIOIoctl+0x4c8>

   res = RES_ERROR;
 40142f4:	00800044 	movi	r2,1
 40142f8:	e0bff615 	stw	r2,-40(fp)
   switch (ctrl)
 40142fc:	e0fffc03 	ldbu	r3,-16(fp)
 4014300:	e0fffe15 	stw	r3,-8(fp)
 4014304:	e13ffe17 	ldw	r4,-8(fp)
 4014308:	208003e8 	cmpgeui	r2,r4,15
 401430c:	1001131e 	bne	r2,zero,401475c <ffs_DiskIOIoctl+0x4b4>
 4014310:	e0fffe17 	ldw	r3,-8(fp)
 4014314:	e0fffe17 	ldw	r3,-8(fp)
 4014318:	18c5883a 	add	r2,r3,r3
 401431c:	1087883a 	add	r3,r2,r2
 4014320:	00810074 	movhi	r2,1025
 4014324:	1090cd04 	addi	r2,r2,17204
 4014328:	1885883a 	add	r2,r3,r2
 401432c:	10800017 	ldw	r2,0(r2)
 4014330:	1000683a 	jmp	r2
 4014334:	04014370 	cmpltui	r16,zero,1293
 4014338:	040143a8 	cmpgeui	r16,zero,1294
 401433c:	040144c0 	call	40144c <__alt_mem_sdram-0x1bfebb4>
 4014340:	040144d4 	movui	r16,1299
 4014344:	0401475c 	xori	r16,zero,1309
 4014348:	0401475c 	xori	r16,zero,1309
 401434c:	0401475c 	xori	r16,zero,1309
 4014350:	0401475c 	xori	r16,zero,1309
 4014354:	0401475c 	xori	r16,zero,1309
 4014358:	0401475c 	xori	r16,zero,1309
 401435c:	0401464c 	andi	r16,zero,1305
 4014360:	04014660 	cmpeqi	r16,zero,1305
 4014364:	04014694 	movui	r16,1306
 4014368:	040146c8 	cmpgei	r16,zero,1307
 401436c:	04014724 	muli	r16,zero,1308
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
 4014370:	d0e0de0b 	ldhu	r3,-31880(gp)
 4014374:	00bfff84 	movi	r2,-2
 4014378:	1884703a 	and	r2,r3,r2
 401437c:	d0a0de0d 	sth	r2,-31880(gp)
 4014380:	00e100b4 	movhi	r3,33794
 4014384:	18c42904 	addi	r3,r3,4260
 4014388:	d0a0de0b 	ldhu	r2,-31880(gp)
 401438c:	1880000d 	sth	r2,0(r3)
         if (WaitReady() == 0xFF)
 4014390:	40138a40 	call	40138a4 <WaitReady>
 4014394:	10803fcc 	andi	r2,r2,255
 4014398:	10803fd8 	cmpnei	r2,r2,255
 401439c:	1000f11e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
            res = RES_OK;
 40143a0:	e03ff615 	stw	zero,-40(fp)
         break;
 40143a4:	0000ef06 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
 40143a8:	01001244 	movi	r4,73
 40143ac:	000b883a 	mov	r5,zero
 40143b0:	40139400 	call	4013940 <SendCMD>
 40143b4:	10803fcc 	andi	r2,r2,255
 40143b8:	1004c03a 	cmpne	r2,r2,zero
 40143bc:	1000e91e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
 40143c0:	e13ff704 	addi	r4,fp,-36
 40143c4:	01400404 	movi	r5,16
 40143c8:	40135640 	call	4013564 <ReceiveDatablock>
 40143cc:	1005003a 	cmpeq	r2,r2,zero
 40143d0:	1000e41e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
         {
            if ((csd[0] >> 6) == 1)
 40143d4:	e0bff703 	ldbu	r2,-36(fp)
 40143d8:	10803fcc 	andi	r2,r2,255
 40143dc:	1004d1ba 	srli	r2,r2,6
 40143e0:	10803fcc 	andi	r2,r2,255
 40143e4:	10800058 	cmpnei	r2,r2,1
 40143e8:	10000d1e 	bne	r2,zero,4014420 <ffs_DiskIOIoctl+0x178>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
 40143ec:	e0bff943 	ldbu	r2,-27(fp)
 40143f0:	10c03fcc 	andi	r3,r2,255
 40143f4:	e0bff903 	ldbu	r2,-28(fp)
 40143f8:	10803fcc 	andi	r2,r2,255
 40143fc:	1004923a 	slli	r2,r2,8
 4014400:	1884b03a 	or	r2,r3,r2
 4014404:	10800044 	addi	r2,r2,1
 4014408:	e0bff30d 	sth	r2,-52(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
 401440c:	e0fffd17 	ldw	r3,-12(fp)
 4014410:	e0bff30b 	ldhu	r2,-52(fp)
 4014414:	100492ba 	slli	r2,r2,10
 4014418:	18800015 	stw	r2,0(r3)
 401441c:	00002606 	br	40144b8 <ffs_DiskIOIoctl+0x210>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 4014420:	e0bff843 	ldbu	r2,-31(fp)
 4014424:	108003cc 	andi	r2,r2,15
 4014428:	1007883a 	mov	r3,r2
 401442c:	e0bff983 	ldbu	r2,-26(fp)
 4014430:	10803fcc 	andi	r2,r2,255
 4014434:	1080200c 	andi	r2,r2,128
 4014438:	1005d1fa 	srai	r2,r2,7
 401443c:	1885883a 	add	r2,r3,r2
 4014440:	1007883a 	mov	r3,r2
 4014444:	e0bff943 	ldbu	r2,-27(fp)
 4014448:	108000cc 	andi	r2,r2,3
 401444c:	1085883a 	add	r2,r2,r2
 4014450:	1885883a 	add	r2,r3,r2
 4014454:	10800084 	addi	r2,r2,2
 4014458:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
 401445c:	e0bff903 	ldbu	r2,-28(fp)
 4014460:	10803fcc 	andi	r2,r2,255
 4014464:	1004d1ba 	srli	r2,r2,6
 4014468:	10c03fcc 	andi	r3,r2,255
 401446c:	e0bff8c3 	ldbu	r2,-29(fp)
 4014470:	10803fcc 	andi	r2,r2,255
 4014474:	1085883a 	add	r2,r2,r2
 4014478:	1085883a 	add	r2,r2,r2
 401447c:	1885883a 	add	r2,r3,r2
 4014480:	1007883a 	mov	r3,r2
 4014484:	e0bff883 	ldbu	r2,-30(fp)
 4014488:	10803fcc 	andi	r2,r2,255
 401448c:	108000cc 	andi	r2,r2,3
 4014490:	100492ba 	slli	r2,r2,10
 4014494:	1885883a 	add	r2,r3,r2
 4014498:	10800044 	addi	r2,r2,1
 401449c:	e0bff30d 	sth	r2,-52(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
 40144a0:	e13ffd17 	ldw	r4,-12(fp)
 40144a4:	e0fff30b 	ldhu	r3,-52(fp)
 40144a8:	e0bff503 	ldbu	r2,-44(fp)
 40144ac:	10bffdc4 	addi	r2,r2,-9
 40144b0:	1884983a 	sll	r2,r3,r2
 40144b4:	20800015 	stw	r2,0(r4)
            }
            res = RES_OK;
 40144b8:	e03ff615 	stw	zero,-40(fp)
         }
         break;
 40144bc:	0000a906 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
 40144c0:	e0fffd17 	ldw	r3,-12(fp)
 40144c4:	00808004 	movi	r2,512
 40144c8:	1880000d 	sth	r2,0(r3)
         res = RES_OK;
 40144cc:	e03ff615 	stw	zero,-40(fp)
         break;
 40144d0:	0000a406 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
 40144d4:	d0a0dc03 	ldbu	r2,-31888(gp)
 40144d8:	10803fcc 	andi	r2,r2,255
 40144dc:	1080010c 	andi	r2,r2,4
 40144e0:	1005003a 	cmpeq	r2,r2,zero
 40144e4:	1000201e 	bne	r2,zero,4014568 <ffs_DiskIOIoctl+0x2c0>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
 40144e8:	01003344 	movi	r4,205
 40144ec:	000b883a 	mov	r5,zero
 40144f0:	40139400 	call	4013940 <SendCMD>
 40144f4:	10803fcc 	andi	r2,r2,255
 40144f8:	1004c03a 	cmpne	r2,r2,zero
 40144fc:	1000991e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
            {  /* Read SD status */
               ReceiveU8();
 4014500:	401350c0 	call	401350c <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
 4014504:	e13ff704 	addi	r4,fp,-36
 4014508:	01400404 	movi	r5,16
 401450c:	40135640 	call	4013564 <ReceiveDatablock>
 4014510:	1005003a 	cmpeq	r2,r2,zero
 4014514:	1000931e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
 4014518:	00800c04 	movi	r2,48
 401451c:	e0bff505 	stb	r2,-44(fp)
 4014520:	00000406 	br	4014534 <ffs_DiskIOIoctl+0x28c>
                     ReceiveU8();   /* Purge trailing data */
 4014524:	401350c0 	call	401350c <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
 4014528:	e0bff503 	ldbu	r2,-44(fp)
 401452c:	10bfffc4 	addi	r2,r2,-1
 4014530:	e0bff505 	stb	r2,-44(fp)
 4014534:	e0bff503 	ldbu	r2,-44(fp)
 4014538:	1004c03a 	cmpne	r2,r2,zero
 401453c:	103ff91e 	bne	r2,zero,4014524 <ffs_DiskIOIoctl+0x27c>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
 4014540:	e13ffd17 	ldw	r4,-12(fp)
 4014544:	e0bff983 	ldbu	r2,-26(fp)
 4014548:	10803fcc 	andi	r2,r2,255
 401454c:	1004d13a 	srli	r2,r2,4
 4014550:	10c03fcc 	andi	r3,r2,255
 4014554:	00800404 	movi	r2,16
 4014558:	10c4983a 	sll	r2,r2,r3
 401455c:	20800015 	stw	r2,0(r4)
                  res = RES_OK;
 4014560:	e03ff615 	stw	zero,-40(fp)
 4014564:	00007f06 	br	4014764 <ffs_DiskIOIoctl+0x4bc>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
 4014568:	01001244 	movi	r4,73
 401456c:	000b883a 	mov	r5,zero
 4014570:	40139400 	call	4013940 <SendCMD>
 4014574:	10803fcc 	andi	r2,r2,255
 4014578:	1004c03a 	cmpne	r2,r2,zero
 401457c:	1000791e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
 4014580:	e13ff704 	addi	r4,fp,-36
 4014584:	01400404 	movi	r5,16
 4014588:	40135640 	call	4013564 <ReceiveDatablock>
 401458c:	1005003a 	cmpeq	r2,r2,zero
 4014590:	1000741e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
            {  /* Read CSD */
               if (CardType & CT_SD1)
 4014594:	d0a0dc03 	ldbu	r2,-31888(gp)
 4014598:	10803fcc 	andi	r2,r2,255
 401459c:	1080008c 	andi	r2,r2,2
 40145a0:	1005003a 	cmpeq	r2,r2,zero
 40145a4:	1000141e 	bne	r2,zero,40145f8 <ffs_DiskIOIoctl+0x350>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 40145a8:	e13ffd17 	ldw	r4,-12(fp)
 40145ac:	e0bff983 	ldbu	r2,-26(fp)
 40145b0:	10803fcc 	andi	r2,r2,255
 40145b4:	10800fcc 	andi	r2,r2,63
 40145b8:	1085883a 	add	r2,r2,r2
 40145bc:	1007883a 	mov	r3,r2
 40145c0:	e0bff9c3 	ldbu	r2,-25(fp)
 40145c4:	10803fcc 	andi	r2,r2,255
 40145c8:	1080200c 	andi	r2,r2,128
 40145cc:	1005d1fa 	srai	r2,r2,7
 40145d0:	1885883a 	add	r2,r3,r2
 40145d4:	10c00044 	addi	r3,r2,1
 40145d8:	e0bffa43 	ldbu	r2,-23(fp)
 40145dc:	10803fcc 	andi	r2,r2,255
 40145e0:	1004d1ba 	srli	r2,r2,6
 40145e4:	10803fcc 	andi	r2,r2,255
 40145e8:	10bfffc4 	addi	r2,r2,-1
 40145ec:	1884983a 	sll	r2,r3,r2
 40145f0:	20800015 	stw	r2,0(r4)
 40145f4:	00001306 	br	4014644 <ffs_DiskIOIoctl+0x39c>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 40145f8:	e43ffd17 	ldw	r16,-12(fp)
 40145fc:	e0bff983 	ldbu	r2,-26(fp)
 4014600:	10803fcc 	andi	r2,r2,255
 4014604:	10801f0c 	andi	r2,r2,124
 4014608:	1005d0ba 	srai	r2,r2,2
 401460c:	10bfffcc 	andi	r2,r2,65535
 4014610:	11000044 	addi	r4,r2,1
 4014614:	e0bff9c3 	ldbu	r2,-25(fp)
 4014618:	10803fcc 	andi	r2,r2,255
 401461c:	108000cc 	andi	r2,r2,3
 4014620:	100690fa 	slli	r3,r2,3
 4014624:	e0bff9c3 	ldbu	r2,-25(fp)
 4014628:	10803fcc 	andi	r2,r2,255
 401462c:	1080380c 	andi	r2,r2,224
 4014630:	1005d17a 	srai	r2,r2,5
 4014634:	1885883a 	add	r2,r3,r2
 4014638:	11400044 	addi	r5,r2,1
 401463c:	4014cf40 	call	4014cf4 <__mulsi3>
 4014640:	80800015 	stw	r2,0(r16)
               }
               res = RES_OK;
 4014644:	e03ff615 	stw	zero,-40(fp)
            }
         }
         break;
 4014648:	00004606 	br	4014764 <ffs_DiskIOIoctl+0x4bc>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
 401464c:	d0e0dc03 	ldbu	r3,-31888(gp)
 4014650:	e0bff417 	ldw	r2,-48(fp)
 4014654:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
 4014658:	e03ff615 	stw	zero,-40(fp)
         break;
 401465c:	00004106 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
 4014660:	01001244 	movi	r4,73
 4014664:	000b883a 	mov	r5,zero
 4014668:	40139400 	call	4013940 <SendCMD>
 401466c:	10803fcc 	andi	r2,r2,255
 4014670:	1004c03a 	cmpne	r2,r2,zero
 4014674:	10003b1e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
 4014678:	e13ff417 	ldw	r4,-48(fp)
 401467c:	01400404 	movi	r5,16
 4014680:	40135640 	call	4013564 <ReceiveDatablock>
 4014684:	1005003a 	cmpeq	r2,r2,zero
 4014688:	1000361e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
 401468c:	e03ff615 	stw	zero,-40(fp)
         break;
 4014690:	00003406 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
 4014694:	01001284 	movi	r4,74
 4014698:	000b883a 	mov	r5,zero
 401469c:	40139400 	call	4013940 <SendCMD>
 40146a0:	10803fcc 	andi	r2,r2,255
 40146a4:	1004c03a 	cmpne	r2,r2,zero
 40146a8:	10002e1e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
 40146ac:	e13ff417 	ldw	r4,-48(fp)
 40146b0:	01400404 	movi	r5,16
 40146b4:	40135640 	call	4013564 <ReceiveDatablock>
 40146b8:	1005003a 	cmpeq	r2,r2,zero
 40146bc:	1000291e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
 40146c0:	e03ff615 	stw	zero,-40(fp)
         break;
 40146c4:	00002706 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
 40146c8:	01001e84 	movi	r4,122
 40146cc:	000b883a 	mov	r5,zero
 40146d0:	40139400 	call	4013940 <SendCMD>
 40146d4:	10803fcc 	andi	r2,r2,255
 40146d8:	1004c03a 	cmpne	r2,r2,zero
 40146dc:	1000211e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
 40146e0:	e03ff505 	stb	zero,-44(fp)
 40146e4:	00000a06 	br	4014710 <ffs_DiskIOIoctl+0x468>
               *ptr++ = ReceiveU8();
 40146e8:	401350c0 	call	401350c <ReceiveU8>
 40146ec:	1007883a 	mov	r3,r2
 40146f0:	e0bff417 	ldw	r2,-48(fp)
 40146f4:	10c00005 	stb	r3,0(r2)
 40146f8:	e0bff417 	ldw	r2,-48(fp)
 40146fc:	10800044 	addi	r2,r2,1
 4014700:	e0bff415 	stw	r2,-48(fp)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
 4014704:	e0bff503 	ldbu	r2,-44(fp)
 4014708:	10800044 	addi	r2,r2,1
 401470c:	e0bff505 	stb	r2,-44(fp)
 4014710:	e0bff503 	ldbu	r2,-44(fp)
 4014714:	10800130 	cmpltui	r2,r2,4
 4014718:	103ff31e 	bne	r2,zero,40146e8 <ffs_DiskIOIoctl+0x440>
               *ptr++ = ReceiveU8();
            res = RES_OK;
 401471c:	e03ff615 	stw	zero,-40(fp)
         }
         break;
 4014720:	00001006 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
 4014724:	01003344 	movi	r4,205
 4014728:	000b883a 	mov	r5,zero
 401472c:	40139400 	call	4013940 <SendCMD>
 4014730:	10803fcc 	andi	r2,r2,255
 4014734:	1004c03a 	cmpne	r2,r2,zero
 4014738:	10000a1e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
         {  /* SD_STATUS */
            ReceiveU8();
 401473c:	401350c0 	call	401350c <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
 4014740:	e13ff417 	ldw	r4,-48(fp)
 4014744:	01401004 	movi	r5,64
 4014748:	40135640 	call	4013564 <ReceiveDatablock>
 401474c:	1005003a 	cmpeq	r2,r2,zero
 4014750:	1000041e 	bne	r2,zero,4014764 <ffs_DiskIOIoctl+0x4bc>
               res = RES_OK;
 4014754:	e03ff615 	stw	zero,-40(fp)
         }
         break;
 4014758:	00000206 	br	4014764 <ffs_DiskIOIoctl+0x4bc>

      default:
         res = RES_PARERR;
 401475c:	00800104 	movi	r2,4
 4014760:	e0bff615 	stw	r2,-40(fp)
   }

   ReleaseBus();
 4014764:	40138fc0 	call	40138fc <ReleaseBus>

   return(res);
 4014768:	e13ff617 	ldw	r4,-40(fp)
 401476c:	e13fff15 	stw	r4,-4(fp)
 4014770:	e0bfff17 	ldw	r2,-4(fp)
} /* ffs_DiskIOIoctl */
 4014774:	e037883a 	mov	sp,fp
 4014778:	dfc00217 	ldw	ra,8(sp)
 401477c:	df000117 	ldw	fp,4(sp)
 4014780:	dc000017 	ldw	r16,0(sp)
 4014784:	dec00304 	addi	sp,sp,12
 4014788:	f800283a 	ret

0401478c <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
 401478c:	defffe04 	addi	sp,sp,-8
 4014790:	df000115 	stw	fp,4(sp)
 4014794:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
 4014798:	008e57f4 	movhi	r2,14687
 401479c:	10a87844 	addi	r2,r2,-24095
 40147a0:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
 40147a4:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
 40147a8:	e037883a 	mov	sp,fp
 40147ac:	df000017 	ldw	fp,0(sp)
 40147b0:	dec00104 	addi	sp,sp,4
 40147b4:	f800283a 	ret

040147b8 <TimerFunction>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static alt_u32 TimerFunction (void *context)
{
 40147b8:	defffd04 	addi	sp,sp,-12
 40147bc:	dfc00215 	stw	ra,8(sp)
 40147c0:	df000115 	stw	fp,4(sp)
 40147c4:	df000104 	addi	fp,sp,4
 40147c8:	e13fff15 	stw	r4,-4(fp)
   static unsigned short wTimer10ms = 0;

   (void)context;

   Systick++;
 40147cc:	d0a0e017 	ldw	r2,-31872(gp)
 40147d0:	10800044 	addi	r2,r2,1
 40147d4:	d0a0e015 	stw	r2,-31872(gp)
   wTimer10ms++;
 40147d8:	d0a0e10b 	ldhu	r2,-31868(gp)
 40147dc:	10800044 	addi	r2,r2,1
 40147e0:	d0a0e10d 	sth	r2,-31868(gp)
   Timer++; /* Performance counter for this module */
 40147e4:	d0a0e18b 	ldhu	r2,-31866(gp)
 40147e8:	10800044 	addi	r2,r2,1
 40147ec:	d0a0e18d 	sth	r2,-31866(gp)

   if (wTimer10ms == 10)
 40147f0:	d0a0e10b 	ldhu	r2,-31868(gp)
 40147f4:	10bfffcc 	andi	r2,r2,65535
 40147f8:	10800298 	cmpnei	r2,r2,10
 40147fc:	1000021e 	bne	r2,zero,4014808 <TimerFunction+0x50>
   {
      wTimer10ms = 0;
 4014800:	d020e10d 	sth	zero,-31868(gp)
      ffs_DiskIOTimerproc();  /* Drive timer procedure of low level disk I/O module */
 4014804:	4013bec0 	call	4013bec <ffs_DiskIOTimerproc>
   }

   return(1);
 4014808:	00800044 	movi	r2,1
} /* TimerFunction */
 401480c:	e037883a 	mov	sp,fp
 4014810:	dfc00117 	ldw	ra,4(sp)
 4014814:	df000017 	ldw	fp,0(sp)
 4014818:	dec00204 	addi	sp,sp,8
 401481c:	f800283a 	ret

04014820 <IoInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void IoInit(void)
{
 4014820:	defffe04 	addi	sp,sp,-8
 4014824:	dfc00115 	stw	ra,4(sp)
 4014828:	df000015 	stw	fp,0(sp)
 401482c:	d839883a 	mov	fp,sp
   //uart0_init(115200);

   /* Init diskio interface */
   ffs_DiskIOInit();
 4014830:	4013bc00 	call	4013bc0 <ffs_DiskIOInit>

   /* Init timer system */
   alt_alarm_start(&alarm, 1, &TimerFunction, NULL);
 4014834:	010100b4 	movhi	r4,1026
 4014838:	2122b604 	addi	r4,r4,-29992
 401483c:	01400044 	movi	r5,1
 4014840:	01810074 	movhi	r6,1025
 4014844:	3191ee04 	addi	r6,r6,18360
 4014848:	000f883a 	mov	r7,zero
 401484c:	401571c0 	call	401571c <alt_alarm_start>

} /* IoInit */
 4014850:	e037883a 	mov	sp,fp
 4014854:	dfc00117 	ldw	ra,4(sp)
 4014858:	df000017 	ldw	fp,0(sp)
 401485c:	dec00204 	addi	sp,sp,8
 4014860:	f800283a 	ret

04014864 <die>:

void die (		/* Stop with dying message */
	FRESULT rc	/* FatFs return value */
)
{
 4014864:	defffd04 	addi	sp,sp,-12
 4014868:	dfc00215 	stw	ra,8(sp)
 401486c:	df000115 	stw	fp,4(sp)
 4014870:	df000104 	addi	fp,sp,4
 4014874:	e13fff15 	stw	r4,-4(fp)
	printf("Failed with rc=%u.\n", rc);
 4014878:	010100b4 	movhi	r4,1026
 401487c:	2120c904 	addi	r4,r4,-31964
 4014880:	e17fff17 	ldw	r5,-4(fp)
 4014884:	4014d4c0 	call	4014d4c <printf>
	for (;;) ;
 4014888:	003fff06 	br	4014888 <die+0x24>

0401488c <main>:
}

int main (void)
{
 401488c:	deffeb04 	addi	sp,sp,-84
 4014890:	dfc01415 	stw	ra,80(sp)
 4014894:	df001315 	stw	fp,76(sp)
 4014898:	df001304 	addi	fp,sp,76
	DIR dir;				/* Directory object */
	FILINFO fno;			/* File information object */
	unsigned long br, i;
	alt_u32* active_buff;

 	printf("System started\r\n");
 401489c:	010100b4 	movhi	r4,1026
 40148a0:	2120ce04 	addi	r4,r4,-31944
 40148a4:	4014e740 	call	4014e74 <puts>
 	lcd_off();
 40148a8:	008100b4 	movhi	r2,1026
 40148ac:	10843004 	addi	r2,r2,4288
 40148b0:	10c00037 	ldwio	r3,0(r2)
 40148b4:	00bfcfc4 	movi	r2,-193
 40148b8:	1886703a 	and	r3,r3,r2
 40148bc:	008100b4 	movhi	r2,1026
 40148c0:	10843004 	addi	r2,r2,4288
 40148c4:	10c00035 	stwio	r3,0(r2)
    for(i=0;i<5000000;i++){}
 40148c8:	e03fef15 	stw	zero,-68(fp)
 40148cc:	00000306 	br	40148dc <main+0x50>
 40148d0:	e0bfef17 	ldw	r2,-68(fp)
 40148d4:	10800044 	addi	r2,r2,1
 40148d8:	e0bfef15 	stw	r2,-68(fp)
 40148dc:	e0ffef17 	ldw	r3,-68(fp)
 40148e0:	00801334 	movhi	r2,76
 40148e4:	1092cfc4 	addi	r2,r2,19263
 40148e8:	10fff92e 	bgeu	r2,r3,40148d0 <main+0x44>

    alt_sgdma_dev *dma = alt_avalon_sgdma_open("/dev/sgdma");
 40148ec:	010100b4 	movhi	r4,1026
 40148f0:	2120d204 	addi	r4,r4,-31928
 40148f4:	40166880 	call	4016688 <alt_avalon_sgdma_open>
 40148f8:	e0bfed15 	stw	r2,-76(fp)
    printf("open dma returned %ld\n", (alt_u32)dma);
 40148fc:	e0bfed17 	ldw	r2,-76(fp)
 4014900:	100b883a 	mov	r5,r2
 4014904:	010100b4 	movhi	r4,1026
 4014908:	2120d504 	addi	r4,r4,-31916
 401490c:	4014d4c0 	call	4014d4c <printf>
    printf("framebuffer 1 at %lx\n", (alt_u32)frameBufferA);
 4014910:	008100b4 	movhi	r2,1026
 4014914:	10a1cc04 	addi	r2,r2,-30928
 4014918:	10800017 	ldw	r2,0(r2)
 401491c:	100b883a 	mov	r5,r2
 4014920:	010100b4 	movhi	r4,1026
 4014924:	2120db04 	addi	r4,r4,-31892
 4014928:	4014d4c0 	call	4014d4c <printf>
    printf("framebuffer 2 at %lx\n", (alt_u32)frameBufferB);
 401492c:	008100b4 	movhi	r2,1026
 4014930:	10a1cd04 	addi	r2,r2,-30924
 4014934:	10800017 	ldw	r2,0(r2)
 4014938:	100b883a 	mov	r5,r2
 401493c:	010100b4 	movhi	r4,1026
 4014940:	2120e104 	addi	r4,r4,-31868
 4014944:	4014d4c0 	call	4014d4c <printf>

    active_buff = frameBufferA;
 4014948:	008100b4 	movhi	r2,1026
 401494c:	10a1cc04 	addi	r2,r2,-30928
 4014950:	10800017 	ldw	r2,0(r2)
 4014954:	e0bfee15 	stw	r2,-72(fp)
    //printf("framebuffer 1 at %lx\n", (alt_u32)active_buff);

    printf("Turning LCD on \r\n");
 4014958:	010100b4 	movhi	r4,1026
 401495c:	2120e704 	addi	r4,r4,-31844
 4014960:	4014e740 	call	4014e74 <puts>
    lcd_on();
 4014964:	008100b4 	movhi	r2,1026
 4014968:	10843004 	addi	r2,r2,4288
 401496c:	10800037 	ldwio	r2,0(r2)
 4014970:	10c03014 	ori	r3,r2,192
 4014974:	008100b4 	movhi	r2,1026
 4014978:	10843004 	addi	r2,r2,4288
 401497c:	10c00035 	stwio	r3,0(r2)
    printf("Starting DMA\r\n");
 4014980:	010100b4 	movhi	r4,1026
 4014984:	2120ec04 	addi	r4,r4,-31824
 4014988:	4014e740 	call	4014e74 <puts>
    init_and_start_framebuffer(dma);
 401498c:	e13fed17 	ldw	r4,-76(fp)
 4014990:	401065c0 	call	401065c <init_and_start_framebuffer>

	IoInit();
 4014994:	40148200 	call	4014820 <IoInit>

    Color col2;
    col2.color32 = 0x00ff0000;
 4014998:	00803ff4 	movhi	r2,255
 401499c:	e0bfff15 	stw	r2,-4(fp)

    memset(frameBufferA, col2.color32,  522240/4);
 40149a0:	008100b4 	movhi	r2,1026
 40149a4:	10a1cc04 	addi	r2,r2,-30928
 40149a8:	11000017 	ldw	r4,0(r2)
 40149ac:	e0bfff17 	ldw	r2,-4(fp)
 40149b0:	100b883a 	mov	r5,r2
 40149b4:	018000b4 	movhi	r6,2
 40149b8:	31bf8004 	addi	r6,r6,-512
 40149bc:	4014d2c0 	call	4014d2c <memset>

	f_mount(0, &Fatfs);		/* Register volume work area (never fails) */
 40149c0:	0009883a 	mov	r4,zero
 40149c4:	014100b4 	movhi	r5,1026
 40149c8:	29634c04 	addi	r5,r5,-29392
 40149cc:	40125d00 	call	40125d0 <f_mount>
 40149d0:	00000006 	br	40149d4 <main+0x148>

	for (;;) {
	printf("\nOpen root directory.\n");
 40149d4:	010100b4 	movhi	r4,1026
 40149d8:	2120f004 	addi	r4,r4,-31808
 40149dc:	4014e740 	call	4014e74 <puts>
	rc = f_opendir(&dir, "");
 40149e0:	e13ff104 	addi	r4,fp,-60
 40149e4:	014100b4 	movhi	r5,1026
 40149e8:	2960f604 	addi	r5,r5,-31784
 40149ec:	40130480 	call	4013048 <f_opendir>
 40149f0:	e0bff015 	stw	r2,-64(fp)
	if (rc) die(rc);
 40149f4:	e0bff017 	ldw	r2,-64(fp)
 40149f8:	1005003a 	cmpeq	r2,r2,zero
 40149fc:	1000021e 	bne	r2,zero,4014a08 <main+0x17c>
 4014a00:	e13ff017 	ldw	r4,-64(fp)
 4014a04:	40148640 	call	4014864 <die>

	printf("\nDirectory listing...\n");
 4014a08:	010100b4 	movhi	r4,1026
 4014a0c:	2120f704 	addi	r4,r4,-31780
 4014a10:	4014e740 	call	4014e74 <puts>
 4014a14:	00000006 	br	4014a18 <main+0x18c>
	for (;;) {
		rc = f_readdir(&dir, &fno);		/* Read a directory item */
 4014a18:	e13ff104 	addi	r4,fp,-60
 4014a1c:	e17ff804 	addi	r5,fp,-32
 4014a20:	40131c00 	call	40131c0 <f_readdir>
 4014a24:	e0bff015 	stw	r2,-64(fp)
		if (rc || !fno.fname[0]) break;	/* Error or end of dir */
 4014a28:	e0bff017 	ldw	r2,-64(fp)
 4014a2c:	1004c03a 	cmpne	r2,r2,zero
 4014a30:	1000571e 	bne	r2,zero,4014b90 <main+0x304>
 4014a34:	e0bffa43 	ldbu	r2,-23(fp)
 4014a38:	10803fcc 	andi	r2,r2,255
 4014a3c:	1080201c 	xori	r2,r2,128
 4014a40:	10bfe004 	addi	r2,r2,-128
 4014a44:	1005003a 	cmpeq	r2,r2,zero
 4014a48:	1000511e 	bne	r2,zero,4014b90 <main+0x304>
		if (fno.fattrib & AM_DIR)
 4014a4c:	e0bffa03 	ldbu	r2,-24(fp)
 4014a50:	10803fcc 	andi	r2,r2,255
 4014a54:	1080040c 	andi	r2,r2,16
 4014a58:	1005003a 	cmpeq	r2,r2,zero
 4014a5c:	1000061e 	bne	r2,zero,4014a78 <main+0x1ec>
			printf("   <dir>  %s\n", fno.fname);
 4014a60:	e0bff804 	addi	r2,fp,-32
 4014a64:	11400244 	addi	r5,r2,9
 4014a68:	010100b4 	movhi	r4,1026
 4014a6c:	2120fd04 	addi	r4,r4,-31756
 4014a70:	4014d4c0 	call	4014d4c <printf>
 4014a74:	003fe806 	br	4014a18 <main+0x18c>
		else {
			printf("%8lu  %s\n", fno.fsize, fno.fname);
 4014a78:	e17ff817 	ldw	r5,-32(fp)
 4014a7c:	e0bff804 	addi	r2,fp,-32
 4014a80:	11800244 	addi	r6,r2,9
 4014a84:	010100b4 	movhi	r4,1026
 4014a88:	21210104 	addi	r4,r4,-31740
 4014a8c:	4014d4c0 	call	4014d4c <printf>
		//printf("\nOpen an existing file.\n");
		rc = f_open(&Fil, fno.fname, FA_READ);
 4014a90:	e0bff804 	addi	r2,fp,-32
 4014a94:	11400244 	addi	r5,r2,9
 4014a98:	010100b4 	movhi	r4,1026
 4014a9c:	2123d804 	addi	r4,r4,-28832
 4014aa0:	01800044 	movi	r6,1
 4014aa4:	40126740 	call	4012674 <f_open>
 4014aa8:	e0bff015 	stw	r2,-64(fp)
		if (rc) die(rc);
 4014aac:	e0bff017 	ldw	r2,-64(fp)
 4014ab0:	1005003a 	cmpeq	r2,r2,zero
 4014ab4:	1000021e 	bne	r2,zero,4014ac0 <main+0x234>
 4014ab8:	e13ff017 	ldw	r4,-64(fp)
 4014abc:	40148640 	call	4014864 <die>

		if (active_buffer == 0) {
 4014ac0:	008100b4 	movhi	r2,1026
 4014ac4:	10a2a504 	addi	r2,r2,-30060
 4014ac8:	10800017 	ldw	r2,0(r2)
 4014acc:	1004c03a 	cmpne	r2,r2,zero
 4014ad0:	1000091e 	bne	r2,zero,4014af8 <main+0x26c>
			active_buffer = 1;
 4014ad4:	00c100b4 	movhi	r3,1026
 4014ad8:	18e2a504 	addi	r3,r3,-30060
 4014adc:	00800044 	movi	r2,1
 4014ae0:	18800015 	stw	r2,0(r3)
			active_buff = frameBufferA;
 4014ae4:	008100b4 	movhi	r2,1026
 4014ae8:	10a1cc04 	addi	r2,r2,-30928
 4014aec:	10800017 	ldw	r2,0(r2)
 4014af0:	e0bfee15 	stw	r2,-72(fp)
 4014af4:	00000706 	br	4014b14 <main+0x288>
		} else {
			active_buff = frameBufferB;
 4014af8:	008100b4 	movhi	r2,1026
 4014afc:	10a1cd04 	addi	r2,r2,-30924
 4014b00:	10800017 	ldw	r2,0(r2)
 4014b04:	e0bfee15 	stw	r2,-72(fp)
			active_buffer = 0;
 4014b08:	008100b4 	movhi	r2,1026
 4014b0c:	10a2a504 	addi	r2,r2,-30060
 4014b10:	10000015 	stw	zero,0(r2)
		}

		for (;;) {
			rc = f_read(&Fil, (alt_u32*)active_buff, f_size(&Fil), &br);	/* Read a chunk of file */
 4014b14:	008100b4 	movhi	r2,1026
 4014b18:	10a3d804 	addi	r2,r2,-28832
 4014b1c:	11800317 	ldw	r6,12(r2)
 4014b20:	e1fffe04 	addi	r7,fp,-8
 4014b24:	010100b4 	movhi	r4,1026
 4014b28:	2123d804 	addi	r4,r4,-28832
 4014b2c:	e17fee17 	ldw	r5,-72(fp)
 4014b30:	40128580 	call	4012858 <f_read>
 4014b34:	e0bff015 	stw	r2,-64(fp)
			if (rc || !br)
 4014b38:	e0bff017 	ldw	r2,-64(fp)
 4014b3c:	1004c03a 	cmpne	r2,r2,zero
 4014b40:	1000041e 	bne	r2,zero,4014b54 <main+0x2c8>
 4014b44:	e0bffe17 	ldw	r2,-8(fp)
 4014b48:	1005003a 	cmpeq	r2,r2,zero
 4014b4c:	1000011e 	bne	r2,zero,4014b54 <main+0x2c8>
				break;			/* Error or end of file */
		}
 4014b50:	003ff006 	br	4014b14 <main+0x288>
		if (rc) die(rc);
 4014b54:	e0bff017 	ldw	r2,-64(fp)
 4014b58:	1005003a 	cmpeq	r2,r2,zero
 4014b5c:	1000021e 	bne	r2,zero,4014b68 <main+0x2dc>
 4014b60:	e13ff017 	ldw	r4,-64(fp)
 4014b64:	40148640 	call	4014864 <die>
		rc = f_close(&Fil);
 4014b68:	010100b4 	movhi	r4,1026
 4014b6c:	2123d804 	addi	r4,r4,-28832
 4014b70:	4012c780 	call	4012c78 <f_close>
 4014b74:	e0bff015 	stw	r2,-64(fp)
		if (rc) die(rc);
 4014b78:	e0bff017 	ldw	r2,-64(fp)
 4014b7c:	1005003a 	cmpeq	r2,r2,zero
 4014b80:	103fa51e 	bne	r2,zero,4014a18 <main+0x18c>
 4014b84:	e13ff017 	ldw	r4,-64(fp)
 4014b88:	40148640 	call	4014864 <die>
		}

	}
 4014b8c:	003fa206 	br	4014a18 <main+0x18c>
	if (rc) die(rc);
 4014b90:	e0bff017 	ldw	r2,-64(fp)
 4014b94:	1005003a 	cmpeq	r2,r2,zero
 4014b98:	103f8e1e 	bne	r2,zero,40149d4 <main+0x148>
 4014b9c:	e13ff017 	ldw	r4,-64(fp)
 4014ba0:	40148640 	call	4014864 <die>
	}
 4014ba4:	003f8b06 	br	40149d4 <main+0x148>

04014ba8 <udivmodsi4>:
 4014ba8:	29001b2e 	bgeu	r5,r4,4014c18 <udivmodsi4+0x70>
 4014bac:	28001a16 	blt	r5,zero,4014c18 <udivmodsi4+0x70>
 4014bb0:	00800044 	movi	r2,1
 4014bb4:	0007883a 	mov	r3,zero
 4014bb8:	01c007c4 	movi	r7,31
 4014bbc:	00000306 	br	4014bcc <udivmodsi4+0x24>
 4014bc0:	19c01326 	beq	r3,r7,4014c10 <udivmodsi4+0x68>
 4014bc4:	18c00044 	addi	r3,r3,1
 4014bc8:	28000416 	blt	r5,zero,4014bdc <udivmodsi4+0x34>
 4014bcc:	294b883a 	add	r5,r5,r5
 4014bd0:	1085883a 	add	r2,r2,r2
 4014bd4:	293ffa36 	bltu	r5,r4,4014bc0 <udivmodsi4+0x18>
 4014bd8:	10000d26 	beq	r2,zero,4014c10 <udivmodsi4+0x68>
 4014bdc:	0007883a 	mov	r3,zero
 4014be0:	21400236 	bltu	r4,r5,4014bec <udivmodsi4+0x44>
 4014be4:	2149c83a 	sub	r4,r4,r5
 4014be8:	1886b03a 	or	r3,r3,r2
 4014bec:	1004d07a 	srli	r2,r2,1
 4014bf0:	280ad07a 	srli	r5,r5,1
 4014bf4:	103ffa1e 	bne	r2,zero,4014be0 <udivmodsi4+0x38>
 4014bf8:	30000226 	beq	r6,zero,4014c04 <udivmodsi4+0x5c>
 4014bfc:	2005883a 	mov	r2,r4
 4014c00:	f800283a 	ret
 4014c04:	1809883a 	mov	r4,r3
 4014c08:	2005883a 	mov	r2,r4
 4014c0c:	f800283a 	ret
 4014c10:	0007883a 	mov	r3,zero
 4014c14:	003ff806 	br	4014bf8 <udivmodsi4+0x50>
 4014c18:	00800044 	movi	r2,1
 4014c1c:	0007883a 	mov	r3,zero
 4014c20:	003fef06 	br	4014be0 <udivmodsi4+0x38>

04014c24 <__divsi3>:
 4014c24:	defffe04 	addi	sp,sp,-8
 4014c28:	dc000015 	stw	r16,0(sp)
 4014c2c:	dfc00115 	stw	ra,4(sp)
 4014c30:	0021883a 	mov	r16,zero
 4014c34:	20000c16 	blt	r4,zero,4014c68 <__divsi3+0x44>
 4014c38:	000d883a 	mov	r6,zero
 4014c3c:	28000e16 	blt	r5,zero,4014c78 <__divsi3+0x54>
 4014c40:	4014ba80 	call	4014ba8 <udivmodsi4>
 4014c44:	1007883a 	mov	r3,r2
 4014c48:	8005003a 	cmpeq	r2,r16,zero
 4014c4c:	1000011e 	bne	r2,zero,4014c54 <__divsi3+0x30>
 4014c50:	00c7c83a 	sub	r3,zero,r3
 4014c54:	1805883a 	mov	r2,r3
 4014c58:	dfc00117 	ldw	ra,4(sp)
 4014c5c:	dc000017 	ldw	r16,0(sp)
 4014c60:	dec00204 	addi	sp,sp,8
 4014c64:	f800283a 	ret
 4014c68:	0109c83a 	sub	r4,zero,r4
 4014c6c:	04000044 	movi	r16,1
 4014c70:	000d883a 	mov	r6,zero
 4014c74:	283ff20e 	bge	r5,zero,4014c40 <__divsi3+0x1c>
 4014c78:	014bc83a 	sub	r5,zero,r5
 4014c7c:	8021003a 	cmpeq	r16,r16,zero
 4014c80:	003fef06 	br	4014c40 <__divsi3+0x1c>

04014c84 <__modsi3>:
 4014c84:	deffff04 	addi	sp,sp,-4
 4014c88:	dfc00015 	stw	ra,0(sp)
 4014c8c:	01800044 	movi	r6,1
 4014c90:	2807883a 	mov	r3,r5
 4014c94:	20000416 	blt	r4,zero,4014ca8 <__modsi3+0x24>
 4014c98:	28000c16 	blt	r5,zero,4014ccc <__modsi3+0x48>
 4014c9c:	dfc00017 	ldw	ra,0(sp)
 4014ca0:	dec00104 	addi	sp,sp,4
 4014ca4:	4014ba81 	jmpi	4014ba8 <udivmodsi4>
 4014ca8:	0109c83a 	sub	r4,zero,r4
 4014cac:	28000b16 	blt	r5,zero,4014cdc <__modsi3+0x58>
 4014cb0:	180b883a 	mov	r5,r3
 4014cb4:	01800044 	movi	r6,1
 4014cb8:	4014ba80 	call	4014ba8 <udivmodsi4>
 4014cbc:	0085c83a 	sub	r2,zero,r2
 4014cc0:	dfc00017 	ldw	ra,0(sp)
 4014cc4:	dec00104 	addi	sp,sp,4
 4014cc8:	f800283a 	ret
 4014ccc:	014bc83a 	sub	r5,zero,r5
 4014cd0:	dfc00017 	ldw	ra,0(sp)
 4014cd4:	dec00104 	addi	sp,sp,4
 4014cd8:	4014ba81 	jmpi	4014ba8 <udivmodsi4>
 4014cdc:	0147c83a 	sub	r3,zero,r5
 4014ce0:	003ff306 	br	4014cb0 <__modsi3+0x2c>

04014ce4 <__udivsi3>:
 4014ce4:	000d883a 	mov	r6,zero
 4014ce8:	4014ba81 	jmpi	4014ba8 <udivmodsi4>

04014cec <__umodsi3>:
 4014cec:	01800044 	movi	r6,1
 4014cf0:	4014ba81 	jmpi	4014ba8 <udivmodsi4>

04014cf4 <__mulsi3>:
 4014cf4:	20000a26 	beq	r4,zero,4014d20 <__mulsi3+0x2c>
 4014cf8:	0007883a 	mov	r3,zero
 4014cfc:	2080004c 	andi	r2,r4,1
 4014d00:	1005003a 	cmpeq	r2,r2,zero
 4014d04:	2008d07a 	srli	r4,r4,1
 4014d08:	1000011e 	bne	r2,zero,4014d10 <__mulsi3+0x1c>
 4014d0c:	1947883a 	add	r3,r3,r5
 4014d10:	294b883a 	add	r5,r5,r5
 4014d14:	203ff91e 	bne	r4,zero,4014cfc <__mulsi3+0x8>
 4014d18:	1805883a 	mov	r2,r3
 4014d1c:	f800283a 	ret
 4014d20:	0007883a 	mov	r3,zero
 4014d24:	1805883a 	mov	r2,r3
 4014d28:	f800283a 	ret

04014d2c <memset>:
 4014d2c:	30000526 	beq	r6,zero,4014d44 <memset+0x18>
 4014d30:	310d883a 	add	r6,r6,r4
 4014d34:	2005883a 	mov	r2,r4
 4014d38:	11400005 	stb	r5,0(r2)
 4014d3c:	10800044 	addi	r2,r2,1
 4014d40:	11bffd1e 	bne	r2,r6,4014d38 <memset+0xc>
 4014d44:	2005883a 	mov	r2,r4
 4014d48:	f800283a 	ret

04014d4c <printf>:
 4014d4c:	defffb04 	addi	sp,sp,-20
 4014d50:	dfc00115 	stw	ra,4(sp)
 4014d54:	d9400215 	stw	r5,8(sp)
 4014d58:	d9800315 	stw	r6,12(sp)
 4014d5c:	d9c00415 	stw	r7,16(sp)
 4014d60:	008100b4 	movhi	r2,1026
 4014d64:	10a1cf04 	addi	r2,r2,-30916
 4014d68:	11400017 	ldw	r5,0(r2)
 4014d6c:	d8800204 	addi	r2,sp,8
 4014d70:	d8800015 	stw	r2,0(sp)
 4014d74:	29c00217 	ldw	r7,8(r5)
 4014d78:	100d883a 	mov	r6,r2
 4014d7c:	00810074 	movhi	r2,1025
 4014d80:	10957a04 	addi	r2,r2,21992
 4014d84:	200b883a 	mov	r5,r4
 4014d88:	38800115 	stw	r2,4(r7)
 4014d8c:	3809883a 	mov	r4,r7
 4014d90:	40155c40 	call	40155c4 <__vfprintf_internal>
 4014d94:	dfc00117 	ldw	ra,4(sp)
 4014d98:	dec00504 	addi	sp,sp,20
 4014d9c:	f800283a 	ret

04014da0 <_printf_r>:
 4014da0:	defffc04 	addi	sp,sp,-16
 4014da4:	dfc00115 	stw	ra,4(sp)
 4014da8:	d9800215 	stw	r6,8(sp)
 4014dac:	d9c00315 	stw	r7,12(sp)
 4014db0:	22000217 	ldw	r8,8(r4)
 4014db4:	d8800204 	addi	r2,sp,8
 4014db8:	d8800015 	stw	r2,0(sp)
 4014dbc:	100f883a 	mov	r7,r2
 4014dc0:	00810074 	movhi	r2,1025
 4014dc4:	10957a04 	addi	r2,r2,21992
 4014dc8:	280d883a 	mov	r6,r5
 4014dcc:	40800115 	stw	r2,4(r8)
 4014dd0:	400b883a 	mov	r5,r8
 4014dd4:	4014f280 	call	4014f28 <___vfprintf_internal_r>
 4014dd8:	dfc00117 	ldw	ra,4(sp)
 4014ddc:	dec00404 	addi	sp,sp,16
 4014de0:	f800283a 	ret

04014de4 <_puts_r>:
 4014de4:	defffd04 	addi	sp,sp,-12
 4014de8:	dc000015 	stw	r16,0(sp)
 4014dec:	2021883a 	mov	r16,r4
 4014df0:	2809883a 	mov	r4,r5
 4014df4:	dfc00215 	stw	ra,8(sp)
 4014df8:	dc400115 	stw	r17,4(sp)
 4014dfc:	2823883a 	mov	r17,r5
 4014e00:	4014e880 	call	4014e88 <strlen>
 4014e04:	80c00217 	ldw	r3,8(r16)
 4014e08:	02010074 	movhi	r8,1025
 4014e0c:	42157a04 	addi	r8,r8,21992
 4014e10:	880d883a 	mov	r6,r17
 4014e14:	100f883a 	mov	r7,r2
 4014e18:	8009883a 	mov	r4,r16
 4014e1c:	180b883a 	mov	r5,r3
 4014e20:	1a000115 	stw	r8,4(r3)
 4014e24:	403ee83a 	callr	r8
 4014e28:	047fffc4 	movi	r17,-1
 4014e2c:	8009883a 	mov	r4,r16
 4014e30:	018100b4 	movhi	r6,1026
 4014e34:	31a10404 	addi	r6,r6,-31728
 4014e38:	01c00044 	movi	r7,1
 4014e3c:	1440071e 	bne	r2,r17,4014e5c <_puts_r+0x78>
 4014e40:	00ffffc4 	movi	r3,-1
 4014e44:	1805883a 	mov	r2,r3
 4014e48:	dfc00217 	ldw	ra,8(sp)
 4014e4c:	dc400117 	ldw	r17,4(sp)
 4014e50:	dc000017 	ldw	r16,0(sp)
 4014e54:	dec00304 	addi	sp,sp,12
 4014e58:	f800283a 	ret
 4014e5c:	81400217 	ldw	r5,8(r16)
 4014e60:	28c00117 	ldw	r3,4(r5)
 4014e64:	183ee83a 	callr	r3
 4014e68:	0007883a 	mov	r3,zero
 4014e6c:	147ff51e 	bne	r2,r17,4014e44 <_puts_r+0x60>
 4014e70:	003ff306 	br	4014e40 <_puts_r+0x5c>

04014e74 <puts>:
 4014e74:	008100b4 	movhi	r2,1026
 4014e78:	10a1cf04 	addi	r2,r2,-30916
 4014e7c:	200b883a 	mov	r5,r4
 4014e80:	11000017 	ldw	r4,0(r2)
 4014e84:	4014de41 	jmpi	4014de4 <_puts_r>

04014e88 <strlen>:
 4014e88:	20800007 	ldb	r2,0(r4)
 4014e8c:	10000526 	beq	r2,zero,4014ea4 <strlen+0x1c>
 4014e90:	2007883a 	mov	r3,r4
 4014e94:	18c00044 	addi	r3,r3,1
 4014e98:	18800007 	ldb	r2,0(r3)
 4014e9c:	103ffd1e 	bne	r2,zero,4014e94 <strlen+0xc>
 4014ea0:	1905c83a 	sub	r2,r3,r4
 4014ea4:	f800283a 	ret

04014ea8 <print_repeat>:
 4014ea8:	defffb04 	addi	sp,sp,-20
 4014eac:	dc800315 	stw	r18,12(sp)
 4014eb0:	dc400215 	stw	r17,8(sp)
 4014eb4:	dc000115 	stw	r16,4(sp)
 4014eb8:	dfc00415 	stw	ra,16(sp)
 4014ebc:	2025883a 	mov	r18,r4
 4014ec0:	2823883a 	mov	r17,r5
 4014ec4:	3821883a 	mov	r16,r7
 4014ec8:	d9800005 	stb	r6,0(sp)
 4014ecc:	9009883a 	mov	r4,r18
 4014ed0:	880b883a 	mov	r5,r17
 4014ed4:	d80d883a 	mov	r6,sp
 4014ed8:	01c00044 	movi	r7,1
 4014edc:	04000b0e 	bge	zero,r16,4014f0c <print_repeat+0x64>
 4014ee0:	88c00117 	ldw	r3,4(r17)
 4014ee4:	843fffc4 	addi	r16,r16,-1
 4014ee8:	183ee83a 	callr	r3
 4014eec:	103ff726 	beq	r2,zero,4014ecc <print_repeat+0x24>
 4014ef0:	00bfffc4 	movi	r2,-1
 4014ef4:	dfc00417 	ldw	ra,16(sp)
 4014ef8:	dc800317 	ldw	r18,12(sp)
 4014efc:	dc400217 	ldw	r17,8(sp)
 4014f00:	dc000117 	ldw	r16,4(sp)
 4014f04:	dec00504 	addi	sp,sp,20
 4014f08:	f800283a 	ret
 4014f0c:	0005883a 	mov	r2,zero
 4014f10:	dfc00417 	ldw	ra,16(sp)
 4014f14:	dc800317 	ldw	r18,12(sp)
 4014f18:	dc400217 	ldw	r17,8(sp)
 4014f1c:	dc000117 	ldw	r16,4(sp)
 4014f20:	dec00504 	addi	sp,sp,20
 4014f24:	f800283a 	ret

04014f28 <___vfprintf_internal_r>:
 4014f28:	deffe304 	addi	sp,sp,-116
 4014f2c:	df001b15 	stw	fp,108(sp)
 4014f30:	ddc01a15 	stw	r23,104(sp)
 4014f34:	dd001715 	stw	r20,92(sp)
 4014f38:	dc801515 	stw	r18,84(sp)
 4014f3c:	dc001315 	stw	r16,76(sp)
 4014f40:	dfc01c15 	stw	ra,112(sp)
 4014f44:	dd801915 	stw	r22,100(sp)
 4014f48:	dd401815 	stw	r21,96(sp)
 4014f4c:	dcc01615 	stw	r19,88(sp)
 4014f50:	dc401415 	stw	r17,80(sp)
 4014f54:	d9001015 	stw	r4,64(sp)
 4014f58:	2829883a 	mov	r20,r5
 4014f5c:	d9c01115 	stw	r7,68(sp)
 4014f60:	3025883a 	mov	r18,r6
 4014f64:	0021883a 	mov	r16,zero
 4014f68:	d8000f15 	stw	zero,60(sp)
 4014f6c:	d8000e15 	stw	zero,56(sp)
 4014f70:	0039883a 	mov	fp,zero
 4014f74:	d8000915 	stw	zero,36(sp)
 4014f78:	d8000d15 	stw	zero,52(sp)
 4014f7c:	d8000c15 	stw	zero,48(sp)
 4014f80:	d8000b15 	stw	zero,44(sp)
 4014f84:	002f883a 	mov	r23,zero
 4014f88:	91400003 	ldbu	r5,0(r18)
 4014f8c:	01c00044 	movi	r7,1
 4014f90:	94800044 	addi	r18,r18,1
 4014f94:	29003fcc 	andi	r4,r5,255
 4014f98:	2100201c 	xori	r4,r4,128
 4014f9c:	213fe004 	addi	r4,r4,-128
 4014fa0:	20001526 	beq	r4,zero,4014ff8 <___vfprintf_internal_r+0xd0>
 4014fa4:	81c03526 	beq	r16,r7,401507c <___vfprintf_internal_r+0x154>
 4014fa8:	3c002016 	blt	r7,r16,401502c <___vfprintf_internal_r+0x104>
 4014fac:	803ff61e 	bne	r16,zero,4014f88 <___vfprintf_internal_r+0x60>
 4014fb0:	00800944 	movi	r2,37
 4014fb4:	2081501e 	bne	r4,r2,40154f8 <___vfprintf_internal_r+0x5d0>
 4014fb8:	073fffc4 	movi	fp,-1
 4014fbc:	00800284 	movi	r2,10
 4014fc0:	d9c00c15 	stw	r7,48(sp)
 4014fc4:	d8000f15 	stw	zero,60(sp)
 4014fc8:	d8000e15 	stw	zero,56(sp)
 4014fcc:	df000915 	stw	fp,36(sp)
 4014fd0:	d8800d15 	stw	r2,52(sp)
 4014fd4:	d8000b15 	stw	zero,44(sp)
 4014fd8:	91400003 	ldbu	r5,0(r18)
 4014fdc:	3821883a 	mov	r16,r7
 4014fe0:	94800044 	addi	r18,r18,1
 4014fe4:	29003fcc 	andi	r4,r5,255
 4014fe8:	2100201c 	xori	r4,r4,128
 4014fec:	213fe004 	addi	r4,r4,-128
 4014ff0:	01c00044 	movi	r7,1
 4014ff4:	203feb1e 	bne	r4,zero,4014fa4 <___vfprintf_internal_r+0x7c>
 4014ff8:	b805883a 	mov	r2,r23
 4014ffc:	dfc01c17 	ldw	ra,112(sp)
 4015000:	df001b17 	ldw	fp,108(sp)
 4015004:	ddc01a17 	ldw	r23,104(sp)
 4015008:	dd801917 	ldw	r22,100(sp)
 401500c:	dd401817 	ldw	r21,96(sp)
 4015010:	dd001717 	ldw	r20,92(sp)
 4015014:	dcc01617 	ldw	r19,88(sp)
 4015018:	dc801517 	ldw	r18,84(sp)
 401501c:	dc401417 	ldw	r17,80(sp)
 4015020:	dc001317 	ldw	r16,76(sp)
 4015024:	dec01d04 	addi	sp,sp,116
 4015028:	f800283a 	ret
 401502c:	00800084 	movi	r2,2
 4015030:	80801726 	beq	r16,r2,4015090 <___vfprintf_internal_r+0x168>
 4015034:	008000c4 	movi	r2,3
 4015038:	80bfd31e 	bne	r16,r2,4014f88 <___vfprintf_internal_r+0x60>
 401503c:	2c7ff404 	addi	r17,r5,-48
 4015040:	88c03fcc 	andi	r3,r17,255
 4015044:	00800244 	movi	r2,9
 4015048:	10c02136 	bltu	r2,r3,40150d0 <___vfprintf_internal_r+0x1a8>
 401504c:	d8c00917 	ldw	r3,36(sp)
 4015050:	18012716 	blt	r3,zero,40154f0 <___vfprintf_internal_r+0x5c8>
 4015054:	d9000917 	ldw	r4,36(sp)
 4015058:	01400284 	movi	r5,10
 401505c:	4014cf40 	call	4014cf4 <__mulsi3>
 4015060:	1007883a 	mov	r3,r2
 4015064:	88803fcc 	andi	r2,r17,255
 4015068:	1080201c 	xori	r2,r2,128
 401506c:	10bfe004 	addi	r2,r2,-128
 4015070:	1887883a 	add	r3,r3,r2
 4015074:	d8c00915 	stw	r3,36(sp)
 4015078:	003fc306 	br	4014f88 <___vfprintf_internal_r+0x60>
 401507c:	00800c04 	movi	r2,48
 4015080:	2080b326 	beq	r4,r2,4015350 <___vfprintf_internal_r+0x428>
 4015084:	00800944 	movi	r2,37
 4015088:	20812726 	beq	r4,r2,4015528 <___vfprintf_internal_r+0x600>
 401508c:	04000084 	movi	r16,2
 4015090:	2c7ff404 	addi	r17,r5,-48
 4015094:	88c03fcc 	andi	r3,r17,255
 4015098:	00800244 	movi	r2,9
 401509c:	10c00a36 	bltu	r2,r3,40150c8 <___vfprintf_internal_r+0x1a0>
 40150a0:	e000b416 	blt	fp,zero,4015374 <___vfprintf_internal_r+0x44c>
 40150a4:	e009883a 	mov	r4,fp
 40150a8:	01400284 	movi	r5,10
 40150ac:	4014cf40 	call	4014cf4 <__mulsi3>
 40150b0:	1007883a 	mov	r3,r2
 40150b4:	88803fcc 	andi	r2,r17,255
 40150b8:	1080201c 	xori	r2,r2,128
 40150bc:	10bfe004 	addi	r2,r2,-128
 40150c0:	18b9883a 	add	fp,r3,r2
 40150c4:	003fb006 	br	4014f88 <___vfprintf_internal_r+0x60>
 40150c8:	00800b84 	movi	r2,46
 40150cc:	2080a326 	beq	r4,r2,401535c <___vfprintf_internal_r+0x434>
 40150d0:	00801b04 	movi	r2,108
 40150d4:	2080a326 	beq	r4,r2,4015364 <___vfprintf_internal_r+0x43c>
 40150d8:	d8c00917 	ldw	r3,36(sp)
 40150dc:	1800a716 	blt	r3,zero,401537c <___vfprintf_internal_r+0x454>
 40150e0:	d8000f15 	stw	zero,60(sp)
 40150e4:	28bfea04 	addi	r2,r5,-88
 40150e8:	10803fcc 	andi	r2,r2,255
 40150ec:	00c00804 	movi	r3,32
 40150f0:	18802836 	bltu	r3,r2,4015194 <___vfprintf_internal_r+0x26c>
 40150f4:	1085883a 	add	r2,r2,r2
 40150f8:	1085883a 	add	r2,r2,r2
 40150fc:	00c10074 	movhi	r3,1025
 4015100:	18d44404 	addi	r3,r3,20752
 4015104:	10c5883a 	add	r2,r2,r3
 4015108:	11000017 	ldw	r4,0(r2)
 401510c:	2000683a 	jmp	r4
 4015110:	0401519c 	xori	r16,zero,1350
 4015114:	04015194 	movui	r16,1350
 4015118:	04015194 	movui	r16,1350
 401511c:	04015194 	movui	r16,1350
 4015120:	04015194 	movui	r16,1350
 4015124:	04015194 	movui	r16,1350
 4015128:	04015194 	movui	r16,1350
 401512c:	04015194 	movui	r16,1350
 4015130:	04015194 	movui	r16,1350
 4015134:	04015194 	movui	r16,1350
 4015138:	04015194 	movui	r16,1350
 401513c:	040153c8 	cmpgei	r16,zero,1359
 4015140:	040151b0 	cmpltui	r16,zero,1350
 4015144:	04015194 	movui	r16,1350
 4015148:	04015194 	movui	r16,1350
 401514c:	04015194 	movui	r16,1350
 4015150:	04015194 	movui	r16,1350
 4015154:	040151b0 	cmpltui	r16,zero,1350
 4015158:	04015194 	movui	r16,1350
 401515c:	04015194 	movui	r16,1350
 4015160:	04015194 	movui	r16,1350
 4015164:	04015194 	movui	r16,1350
 4015168:	04015194 	movui	r16,1350
 401516c:	04015430 	cmpltui	r16,zero,1360
 4015170:	04015194 	movui	r16,1350
 4015174:	04015194 	movui	r16,1350
 4015178:	04015194 	movui	r16,1350
 401517c:	04015440 	call	401544 <__alt_mem_sdram-0x1bfeabc>
 4015180:	04015194 	movui	r16,1350
 4015184:	04015314 	movui	r16,1356
 4015188:	04015194 	movui	r16,1350
 401518c:	04015194 	movui	r16,1350
 4015190:	0401530c 	andi	r16,zero,1356
 4015194:	0021883a 	mov	r16,zero
 4015198:	003f7b06 	br	4014f88 <___vfprintf_internal_r+0x60>
 401519c:	00c00404 	movi	r3,16
 40151a0:	00800044 	movi	r2,1
 40151a4:	d8c00d15 	stw	r3,52(sp)
 40151a8:	d8000c15 	stw	zero,48(sp)
 40151ac:	d8800b15 	stw	r2,44(sp)
 40151b0:	d8c00e17 	ldw	r3,56(sp)
 40151b4:	1805003a 	cmpeq	r2,r3,zero
 40151b8:	10005a1e 	bne	r2,zero,4015324 <___vfprintf_internal_r+0x3fc>
 40151bc:	d8800c17 	ldw	r2,48(sp)
 40151c0:	1000781e 	bne	r2,zero,40153a4 <___vfprintf_internal_r+0x47c>
 40151c4:	d8801117 	ldw	r2,68(sp)
 40151c8:	d8000a15 	stw	zero,40(sp)
 40151cc:	14400017 	ldw	r17,0(r2)
 40151d0:	11c00104 	addi	r7,r2,4
 40151d4:	d9c01115 	stw	r7,68(sp)
 40151d8:	88005a26 	beq	r17,zero,4015344 <___vfprintf_internal_r+0x41c>
 40151dc:	d8c00b17 	ldw	r3,44(sp)
 40151e0:	dcc00044 	addi	r19,sp,1
 40151e4:	05800244 	movi	r22,9
 40151e8:	182b003a 	cmpeq	r21,r3,zero
 40151ec:	dcc01215 	stw	r19,72(sp)
 40151f0:	00000506 	br	4015208 <___vfprintf_internal_r+0x2e0>
 40151f4:	21000c04 	addi	r4,r4,48
 40151f8:	99000005 	stb	r4,0(r19)
 40151fc:	9cc00044 	addi	r19,r19,1
 4015200:	80000f26 	beq	r16,zero,4015240 <___vfprintf_internal_r+0x318>
 4015204:	8023883a 	mov	r17,r16
 4015208:	d9400d17 	ldw	r5,52(sp)
 401520c:	8809883a 	mov	r4,r17
 4015210:	4014ce40 	call	4014ce4 <__udivsi3>
 4015214:	d9000d17 	ldw	r4,52(sp)
 4015218:	100b883a 	mov	r5,r2
 401521c:	1021883a 	mov	r16,r2
 4015220:	4014cf40 	call	4014cf4 <__mulsi3>
 4015224:	8889c83a 	sub	r4,r17,r2
 4015228:	b13ff20e 	bge	r22,r4,40151f4 <___vfprintf_internal_r+0x2cc>
 401522c:	a8009f1e 	bne	r21,zero,40154ac <___vfprintf_internal_r+0x584>
 4015230:	21000dc4 	addi	r4,r4,55
 4015234:	99000005 	stb	r4,0(r19)
 4015238:	9cc00044 	addi	r19,r19,1
 401523c:	803ff11e 	bne	r16,zero,4015204 <___vfprintf_internal_r+0x2dc>
 4015240:	d8801217 	ldw	r2,72(sp)
 4015244:	98a3c83a 	sub	r17,r19,r2
 4015248:	d8c00917 	ldw	r3,36(sp)
 401524c:	1c4bc83a 	sub	r5,r3,r17
 4015250:	0140130e 	bge	zero,r5,40152a0 <___vfprintf_internal_r+0x378>
 4015254:	d8c00044 	addi	r3,sp,1
 4015258:	18800804 	addi	r2,r3,32
 401525c:	9880102e 	bgeu	r19,r2,40152a0 <___vfprintf_internal_r+0x378>
 4015260:	00800c04 	movi	r2,48
 4015264:	28ffffc4 	addi	r3,r5,-1
 4015268:	98800005 	stb	r2,0(r19)
 401526c:	99000044 	addi	r4,r19,1
 4015270:	00c0080e 	bge	zero,r3,4015294 <___vfprintf_internal_r+0x36c>
 4015274:	d8c00044 	addi	r3,sp,1
 4015278:	18800804 	addi	r2,r3,32
 401527c:	2080052e 	bgeu	r4,r2,4015294 <___vfprintf_internal_r+0x36c>
 4015280:	00800c04 	movi	r2,48
 4015284:	20800005 	stb	r2,0(r4)
 4015288:	21000044 	addi	r4,r4,1
 401528c:	9945883a 	add	r2,r19,r5
 4015290:	20bff81e 	bne	r4,r2,4015274 <___vfprintf_internal_r+0x34c>
 4015294:	d8801217 	ldw	r2,72(sp)
 4015298:	2027883a 	mov	r19,r4
 401529c:	20a3c83a 	sub	r17,r4,r2
 40152a0:	d8c00a17 	ldw	r3,40(sp)
 40152a4:	1c45883a 	add	r2,r3,r17
 40152a8:	e0a1c83a 	sub	r16,fp,r2
 40152ac:	d8800f17 	ldw	r2,60(sp)
 40152b0:	10008026 	beq	r2,zero,40154b4 <___vfprintf_internal_r+0x58c>
 40152b4:	1805003a 	cmpeq	r2,r3,zero
 40152b8:	1000ae26 	beq	r2,zero,4015574 <___vfprintf_internal_r+0x64c>
 40152bc:	0400a516 	blt	zero,r16,4015554 <___vfprintf_internal_r+0x62c>
 40152c0:	b805883a 	mov	r2,r23
 40152c4:	0440950e 	bge	zero,r17,401551c <___vfprintf_internal_r+0x5f4>
 40152c8:	102f883a 	mov	r23,r2
 40152cc:	1461883a 	add	r16,r2,r17
 40152d0:	00000206 	br	40152dc <___vfprintf_internal_r+0x3b4>
 40152d4:	bdc00044 	addi	r23,r23,1
 40152d8:	85ffae26 	beq	r16,r23,4015194 <___vfprintf_internal_r+0x26c>
 40152dc:	9cffffc4 	addi	r19,r19,-1
 40152e0:	98800003 	ldbu	r2,0(r19)
 40152e4:	a0c00117 	ldw	r3,4(r20)
 40152e8:	d9001017 	ldw	r4,64(sp)
 40152ec:	d8800005 	stb	r2,0(sp)
 40152f0:	a00b883a 	mov	r5,r20
 40152f4:	d80d883a 	mov	r6,sp
 40152f8:	01c00044 	movi	r7,1
 40152fc:	183ee83a 	callr	r3
 4015300:	103ff426 	beq	r2,zero,40152d4 <___vfprintf_internal_r+0x3ac>
 4015304:	05ffffc4 	movi	r23,-1
 4015308:	003f3b06 	br	4014ff8 <___vfprintf_internal_r+0xd0>
 401530c:	00c00404 	movi	r3,16
 4015310:	d8c00d15 	stw	r3,52(sp)
 4015314:	d8000c15 	stw	zero,48(sp)
 4015318:	d8c00e17 	ldw	r3,56(sp)
 401531c:	1805003a 	cmpeq	r2,r3,zero
 4015320:	103fa626 	beq	r2,zero,40151bc <___vfprintf_internal_r+0x294>
 4015324:	d8c00c17 	ldw	r3,48(sp)
 4015328:	1800171e 	bne	r3,zero,4015388 <___vfprintf_internal_r+0x460>
 401532c:	d8c01117 	ldw	r3,68(sp)
 4015330:	d8000a15 	stw	zero,40(sp)
 4015334:	1c400017 	ldw	r17,0(r3)
 4015338:	19c00104 	addi	r7,r3,4
 401533c:	d9c01115 	stw	r7,68(sp)
 4015340:	883fa61e 	bne	r17,zero,40151dc <___vfprintf_internal_r+0x2b4>
 4015344:	dcc00044 	addi	r19,sp,1
 4015348:	dcc01215 	stw	r19,72(sp)
 401534c:	003fbe06 	br	4015248 <___vfprintf_internal_r+0x320>
 4015350:	04000084 	movi	r16,2
 4015354:	d9c00f15 	stw	r7,60(sp)
 4015358:	003f0b06 	br	4014f88 <___vfprintf_internal_r+0x60>
 401535c:	040000c4 	movi	r16,3
 4015360:	003f0906 	br	4014f88 <___vfprintf_internal_r+0x60>
 4015364:	00800044 	movi	r2,1
 4015368:	040000c4 	movi	r16,3
 401536c:	d8800e15 	stw	r2,56(sp)
 4015370:	003f0506 	br	4014f88 <___vfprintf_internal_r+0x60>
 4015374:	0007883a 	mov	r3,zero
 4015378:	003f4e06 	br	40150b4 <___vfprintf_internal_r+0x18c>
 401537c:	00800044 	movi	r2,1
 4015380:	d8800915 	stw	r2,36(sp)
 4015384:	003f5706 	br	40150e4 <___vfprintf_internal_r+0x1bc>
 4015388:	d8801117 	ldw	r2,68(sp)
 401538c:	14400017 	ldw	r17,0(r2)
 4015390:	10800104 	addi	r2,r2,4
 4015394:	d8801115 	stw	r2,68(sp)
 4015398:	88000716 	blt	r17,zero,40153b8 <___vfprintf_internal_r+0x490>
 401539c:	d8000a15 	stw	zero,40(sp)
 40153a0:	003f8d06 	br	40151d8 <___vfprintf_internal_r+0x2b0>
 40153a4:	d8c01117 	ldw	r3,68(sp)
 40153a8:	1c400017 	ldw	r17,0(r3)
 40153ac:	18c00104 	addi	r3,r3,4
 40153b0:	d8c01115 	stw	r3,68(sp)
 40153b4:	883ff90e 	bge	r17,zero,401539c <___vfprintf_internal_r+0x474>
 40153b8:	00800044 	movi	r2,1
 40153bc:	0463c83a 	sub	r17,zero,r17
 40153c0:	d8800a15 	stw	r2,40(sp)
 40153c4:	003f8406 	br	40151d8 <___vfprintf_internal_r+0x2b0>
 40153c8:	04000044 	movi	r16,1
 40153cc:	8700080e 	bge	r16,fp,40153f0 <___vfprintf_internal_r+0x4c8>
 40153d0:	d9001017 	ldw	r4,64(sp)
 40153d4:	a00b883a 	mov	r5,r20
 40153d8:	01800804 	movi	r6,32
 40153dc:	e1ffffc4 	addi	r7,fp,-1
 40153e0:	4014ea80 	call	4014ea8 <print_repeat>
 40153e4:	103fc71e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 40153e8:	e5c5883a 	add	r2,fp,r23
 40153ec:	15ffffc4 	addi	r23,r2,-1
 40153f0:	d8c01117 	ldw	r3,68(sp)
 40153f4:	d9001017 	ldw	r4,64(sp)
 40153f8:	800f883a 	mov	r7,r16
 40153fc:	18800017 	ldw	r2,0(r3)
 4015400:	a0c00117 	ldw	r3,4(r20)
 4015404:	a00b883a 	mov	r5,r20
 4015408:	d8800005 	stb	r2,0(sp)
 401540c:	d80d883a 	mov	r6,sp
 4015410:	183ee83a 	callr	r3
 4015414:	103fbb1e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015418:	d8801117 	ldw	r2,68(sp)
 401541c:	bdc00044 	addi	r23,r23,1
 4015420:	0021883a 	mov	r16,zero
 4015424:	10800104 	addi	r2,r2,4
 4015428:	d8801115 	stw	r2,68(sp)
 401542c:	003ed606 	br	4014f88 <___vfprintf_internal_r+0x60>
 4015430:	00800204 	movi	r2,8
 4015434:	d8800d15 	stw	r2,52(sp)
 4015438:	d8000c15 	stw	zero,48(sp)
 401543c:	003fb606 	br	4015318 <___vfprintf_internal_r+0x3f0>
 4015440:	d8c01117 	ldw	r3,68(sp)
 4015444:	1cc00017 	ldw	r19,0(r3)
 4015448:	9809883a 	mov	r4,r19
 401544c:	4014e880 	call	4014e88 <strlen>
 4015450:	e0a1c83a 	sub	r16,fp,r2
 4015454:	1023883a 	mov	r17,r2
 4015458:	0400070e 	bge	zero,r16,4015478 <___vfprintf_internal_r+0x550>
 401545c:	d9001017 	ldw	r4,64(sp)
 4015460:	a00b883a 	mov	r5,r20
 4015464:	01800804 	movi	r6,32
 4015468:	800f883a 	mov	r7,r16
 401546c:	4014ea80 	call	4014ea8 <print_repeat>
 4015470:	103fa41e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015474:	bc2f883a 	add	r23,r23,r16
 4015478:	a0c00117 	ldw	r3,4(r20)
 401547c:	d9001017 	ldw	r4,64(sp)
 4015480:	980d883a 	mov	r6,r19
 4015484:	a00b883a 	mov	r5,r20
 4015488:	880f883a 	mov	r7,r17
 401548c:	183ee83a 	callr	r3
 4015490:	103f9c1e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015494:	d8801117 	ldw	r2,68(sp)
 4015498:	bc6f883a 	add	r23,r23,r17
 401549c:	0021883a 	mov	r16,zero
 40154a0:	10800104 	addi	r2,r2,4
 40154a4:	d8801115 	stw	r2,68(sp)
 40154a8:	003eb706 	br	4014f88 <___vfprintf_internal_r+0x60>
 40154ac:	210015c4 	addi	r4,r4,87
 40154b0:	003f5106 	br	40151f8 <___vfprintf_internal_r+0x2d0>
 40154b4:	04003b16 	blt	zero,r16,40155a4 <___vfprintf_internal_r+0x67c>
 40154b8:	d8c00a17 	ldw	r3,40(sp)
 40154bc:	1805003a 	cmpeq	r2,r3,zero
 40154c0:	103f7f1e 	bne	r2,zero,40152c0 <___vfprintf_internal_r+0x398>
 40154c4:	a0c00117 	ldw	r3,4(r20)
 40154c8:	d9001017 	ldw	r4,64(sp)
 40154cc:	00800b44 	movi	r2,45
 40154d0:	d8800005 	stb	r2,0(sp)
 40154d4:	a00b883a 	mov	r5,r20
 40154d8:	d80d883a 	mov	r6,sp
 40154dc:	01c00044 	movi	r7,1
 40154e0:	183ee83a 	callr	r3
 40154e4:	103f871e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 40154e8:	b8800044 	addi	r2,r23,1
 40154ec:	003f7506 	br	40152c4 <___vfprintf_internal_r+0x39c>
 40154f0:	0007883a 	mov	r3,zero
 40154f4:	003edb06 	br	4015064 <___vfprintf_internal_r+0x13c>
 40154f8:	a0c00117 	ldw	r3,4(r20)
 40154fc:	d9001017 	ldw	r4,64(sp)
 4015500:	d9400005 	stb	r5,0(sp)
 4015504:	d80d883a 	mov	r6,sp
 4015508:	a00b883a 	mov	r5,r20
 401550c:	183ee83a 	callr	r3
 4015510:	103f7c1e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015514:	bdc00044 	addi	r23,r23,1
 4015518:	003e9b06 	br	4014f88 <___vfprintf_internal_r+0x60>
 401551c:	102f883a 	mov	r23,r2
 4015520:	0021883a 	mov	r16,zero
 4015524:	003e9806 	br	4014f88 <___vfprintf_internal_r+0x60>
 4015528:	a0c00117 	ldw	r3,4(r20)
 401552c:	d9000005 	stb	r4,0(sp)
 4015530:	d9001017 	ldw	r4,64(sp)
 4015534:	a00b883a 	mov	r5,r20
 4015538:	d80d883a 	mov	r6,sp
 401553c:	800f883a 	mov	r7,r16
 4015540:	183ee83a 	callr	r3
 4015544:	103f6f1e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015548:	bc2f883a 	add	r23,r23,r16
 401554c:	0021883a 	mov	r16,zero
 4015550:	003e8d06 	br	4014f88 <___vfprintf_internal_r+0x60>
 4015554:	d9001017 	ldw	r4,64(sp)
 4015558:	a00b883a 	mov	r5,r20
 401555c:	01800c04 	movi	r6,48
 4015560:	800f883a 	mov	r7,r16
 4015564:	4014ea80 	call	4014ea8 <print_repeat>
 4015568:	103f661e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 401556c:	bc05883a 	add	r2,r23,r16
 4015570:	003f5406 	br	40152c4 <___vfprintf_internal_r+0x39c>
 4015574:	a0c00117 	ldw	r3,4(r20)
 4015578:	d9001017 	ldw	r4,64(sp)
 401557c:	00800b44 	movi	r2,45
 4015580:	d8800005 	stb	r2,0(sp)
 4015584:	a00b883a 	mov	r5,r20
 4015588:	d80d883a 	mov	r6,sp
 401558c:	01c00044 	movi	r7,1
 4015590:	183ee83a 	callr	r3
 4015594:	103f5b1e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 4015598:	bdc00044 	addi	r23,r23,1
 401559c:	043f480e 	bge	zero,r16,40152c0 <___vfprintf_internal_r+0x398>
 40155a0:	003fec06 	br	4015554 <___vfprintf_internal_r+0x62c>
 40155a4:	d9001017 	ldw	r4,64(sp)
 40155a8:	a00b883a 	mov	r5,r20
 40155ac:	01800804 	movi	r6,32
 40155b0:	800f883a 	mov	r7,r16
 40155b4:	4014ea80 	call	4014ea8 <print_repeat>
 40155b8:	103f521e 	bne	r2,zero,4015304 <___vfprintf_internal_r+0x3dc>
 40155bc:	bc2f883a 	add	r23,r23,r16
 40155c0:	003fbd06 	br	40154b8 <___vfprintf_internal_r+0x590>

040155c4 <__vfprintf_internal>:
 40155c4:	008100b4 	movhi	r2,1026
 40155c8:	10a1cf04 	addi	r2,r2,-30916
 40155cc:	2013883a 	mov	r9,r4
 40155d0:	11000017 	ldw	r4,0(r2)
 40155d4:	2805883a 	mov	r2,r5
 40155d8:	300f883a 	mov	r7,r6
 40155dc:	480b883a 	mov	r5,r9
 40155e0:	100d883a 	mov	r6,r2
 40155e4:	4014f281 	jmpi	4014f28 <___vfprintf_internal_r>

040155e8 <__sfvwrite_small_dev>:
 40155e8:	2880000b 	ldhu	r2,0(r5)
 40155ec:	defffa04 	addi	sp,sp,-24
 40155f0:	dcc00315 	stw	r19,12(sp)
 40155f4:	1080020c 	andi	r2,r2,8
 40155f8:	dc800215 	stw	r18,8(sp)
 40155fc:	dc400115 	stw	r17,4(sp)
 4015600:	dfc00515 	stw	ra,20(sp)
 4015604:	dd000415 	stw	r20,16(sp)
 4015608:	dc000015 	stw	r16,0(sp)
 401560c:	2825883a 	mov	r18,r5
 4015610:	2027883a 	mov	r19,r4
 4015614:	3023883a 	mov	r17,r6
 4015618:	10002026 	beq	r2,zero,401569c <__sfvwrite_small_dev+0xb4>
 401561c:	2940008f 	ldh	r5,2(r5)
 4015620:	28000f16 	blt	r5,zero,4015660 <__sfvwrite_small_dev+0x78>
 4015624:	01c01b0e 	bge	zero,r7,4015694 <__sfvwrite_small_dev+0xac>
 4015628:	3821883a 	mov	r16,r7
 401562c:	05010004 	movi	r20,1024
 4015630:	00000206 	br	401563c <__sfvwrite_small_dev+0x54>
 4015634:	0400170e 	bge	zero,r16,4015694 <__sfvwrite_small_dev+0xac>
 4015638:	9140008f 	ldh	r5,2(r18)
 401563c:	880d883a 	mov	r6,r17
 4015640:	9809883a 	mov	r4,r19
 4015644:	800f883a 	mov	r7,r16
 4015648:	a400010e 	bge	r20,r16,4015650 <__sfvwrite_small_dev+0x68>
 401564c:	01c10004 	movi	r7,1024
 4015650:	40156a40 	call	40156a4 <_write_r>
 4015654:	88a3883a 	add	r17,r17,r2
 4015658:	80a1c83a 	sub	r16,r16,r2
 401565c:	00bff516 	blt	zero,r2,4015634 <__sfvwrite_small_dev+0x4c>
 4015660:	9080000b 	ldhu	r2,0(r18)
 4015664:	00ffffc4 	movi	r3,-1
 4015668:	10801014 	ori	r2,r2,64
 401566c:	9080000d 	sth	r2,0(r18)
 4015670:	1805883a 	mov	r2,r3
 4015674:	dfc00517 	ldw	ra,20(sp)
 4015678:	dd000417 	ldw	r20,16(sp)
 401567c:	dcc00317 	ldw	r19,12(sp)
 4015680:	dc800217 	ldw	r18,8(sp)
 4015684:	dc400117 	ldw	r17,4(sp)
 4015688:	dc000017 	ldw	r16,0(sp)
 401568c:	dec00604 	addi	sp,sp,24
 4015690:	f800283a 	ret
 4015694:	0007883a 	mov	r3,zero
 4015698:	003ff506 	br	4015670 <__sfvwrite_small_dev+0x88>
 401569c:	00ffffc4 	movi	r3,-1
 40156a0:	003ff306 	br	4015670 <__sfvwrite_small_dev+0x88>

040156a4 <_write_r>:
 40156a4:	defffd04 	addi	sp,sp,-12
 40156a8:	dc000015 	stw	r16,0(sp)
 40156ac:	040100b4 	movhi	r16,1026
 40156b0:	8422ae04 	addi	r16,r16,-30024
 40156b4:	dc400115 	stw	r17,4(sp)
 40156b8:	80000015 	stw	zero,0(r16)
 40156bc:	2023883a 	mov	r17,r4
 40156c0:	2809883a 	mov	r4,r5
 40156c4:	300b883a 	mov	r5,r6
 40156c8:	380d883a 	mov	r6,r7
 40156cc:	dfc00215 	stw	ra,8(sp)
 40156d0:	4015b6c0 	call	4015b6c <write>
 40156d4:	1007883a 	mov	r3,r2
 40156d8:	00bfffc4 	movi	r2,-1
 40156dc:	18800626 	beq	r3,r2,40156f8 <_write_r+0x54>
 40156e0:	1805883a 	mov	r2,r3
 40156e4:	dfc00217 	ldw	ra,8(sp)
 40156e8:	dc400117 	ldw	r17,4(sp)
 40156ec:	dc000017 	ldw	r16,0(sp)
 40156f0:	dec00304 	addi	sp,sp,12
 40156f4:	f800283a 	ret
 40156f8:	80800017 	ldw	r2,0(r16)
 40156fc:	103ff826 	beq	r2,zero,40156e0 <_write_r+0x3c>
 4015700:	88800015 	stw	r2,0(r17)
 4015704:	1805883a 	mov	r2,r3
 4015708:	dfc00217 	ldw	ra,8(sp)
 401570c:	dc400117 	ldw	r17,4(sp)
 4015710:	dc000017 	ldw	r16,0(sp)
 4015714:	dec00304 	addi	sp,sp,12
 4015718:	f800283a 	ret

0401571c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401571c:	defff404 	addi	sp,sp,-48
 4015720:	df000b15 	stw	fp,44(sp)
 4015724:	df000b04 	addi	fp,sp,44
 4015728:	e13ffb15 	stw	r4,-20(fp)
 401572c:	e17ffc15 	stw	r5,-16(fp)
 4015730:	e1bffd15 	stw	r6,-12(fp)
 4015734:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4015738:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401573c:	008100b4 	movhi	r2,1026
 4015740:	10a2b204 	addi	r2,r2,-30008
 4015744:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4015748:	1005003a 	cmpeq	r2,r2,zero
 401574c:	1000411e 	bne	r2,zero,4015854 <alt_alarm_start+0x138>
  {
    if (alarm)
 4015750:	e0bffb17 	ldw	r2,-20(fp)
 4015754:	1005003a 	cmpeq	r2,r2,zero
 4015758:	10003b1e 	bne	r2,zero,4015848 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 401575c:	e0fffb17 	ldw	r3,-20(fp)
 4015760:	e0bffd17 	ldw	r2,-12(fp)
 4015764:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4015768:	e0fffb17 	ldw	r3,-20(fp)
 401576c:	e0bffe17 	ldw	r2,-8(fp)
 4015770:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015774:	0005303a 	rdctl	r2,status
 4015778:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401577c:	e0fff817 	ldw	r3,-32(fp)
 4015780:	00bfff84 	movi	r2,-2
 4015784:	1884703a 	and	r2,r3,r2
 4015788:	1001703a 	wrctl	status,r2
  
  return context;
 401578c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4015790:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4015794:	008100b4 	movhi	r2,1026
 4015798:	10a2b304 	addi	r2,r2,-30004
 401579c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 40157a0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40157a4:	e0fffc17 	ldw	r3,-16(fp)
 40157a8:	e0bff917 	ldw	r2,-28(fp)
 40157ac:	1885883a 	add	r2,r3,r2
 40157b0:	10c00044 	addi	r3,r2,1
 40157b4:	e0bffb17 	ldw	r2,-20(fp)
 40157b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40157bc:	e0bffb17 	ldw	r2,-20(fp)
 40157c0:	10c00217 	ldw	r3,8(r2)
 40157c4:	e0bff917 	ldw	r2,-28(fp)
 40157c8:	1880042e 	bgeu	r3,r2,40157dc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 40157cc:	e0fffb17 	ldw	r3,-20(fp)
 40157d0:	00800044 	movi	r2,1
 40157d4:	18800405 	stb	r2,16(r3)
 40157d8:	00000206 	br	40157e4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 40157dc:	e0bffb17 	ldw	r2,-20(fp)
 40157e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40157e4:	e0fffb17 	ldw	r3,-20(fp)
 40157e8:	008100b4 	movhi	r2,1026
 40157ec:	10a1d104 	addi	r2,r2,-30908
 40157f0:	e0bff615 	stw	r2,-40(fp)
 40157f4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40157f8:	e0fff717 	ldw	r3,-36(fp)
 40157fc:	e0bff617 	ldw	r2,-40(fp)
 4015800:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4015804:	e0bff617 	ldw	r2,-40(fp)
 4015808:	10c00017 	ldw	r3,0(r2)
 401580c:	e0bff717 	ldw	r2,-36(fp)
 4015810:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4015814:	e0bff617 	ldw	r2,-40(fp)
 4015818:	10c00017 	ldw	r3,0(r2)
 401581c:	e0bff717 	ldw	r2,-36(fp)
 4015820:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4015824:	e0fff617 	ldw	r3,-40(fp)
 4015828:	e0bff717 	ldw	r2,-36(fp)
 401582c:	18800015 	stw	r2,0(r3)
 4015830:	e0bffa17 	ldw	r2,-24(fp)
 4015834:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015838:	e0bff517 	ldw	r2,-44(fp)
 401583c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4015840:	e03fff15 	stw	zero,-4(fp)
 4015844:	00000506 	br	401585c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 4015848:	00bffa84 	movi	r2,-22
 401584c:	e0bfff15 	stw	r2,-4(fp)
 4015850:	00000206 	br	401585c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4015854:	00bfde84 	movi	r2,-134
 4015858:	e0bfff15 	stw	r2,-4(fp)
 401585c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 4015860:	e037883a 	mov	sp,fp
 4015864:	df000017 	ldw	fp,0(sp)
 4015868:	dec00104 	addi	sp,sp,4
 401586c:	f800283a 	ret

04015870 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4015870:	defffe04 	addi	sp,sp,-8
 4015874:	dfc00115 	stw	ra,4(sp)
 4015878:	df000015 	stw	fp,0(sp)
 401587c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4015880:	010100b4 	movhi	r4,1026
 4015884:	2121dc04 	addi	r4,r4,-30864
 4015888:	014100b4 	movhi	r5,1026
 401588c:	29611304 	addi	r5,r5,-31668
 4015890:	018100b4 	movhi	r6,1026
 4015894:	31a1dc04 	addi	r6,r6,-30864
 4015898:	40158f00 	call	40158f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401589c:	01010074 	movhi	r4,1025
 40158a0:	21000804 	addi	r4,r4,32
 40158a4:	01410074 	movhi	r5,1025
 40158a8:	29400804 	addi	r5,r5,32
 40158ac:	01810074 	movhi	r6,1025
 40158b0:	31808b04 	addi	r6,r6,556
 40158b4:	40158f00 	call	40158f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40158b8:	010100b4 	movhi	r4,1026
 40158bc:	2120a504 	addi	r4,r4,-32108
 40158c0:	014100b4 	movhi	r5,1026
 40158c4:	2960a504 	addi	r5,r5,-32108
 40158c8:	018100b4 	movhi	r6,1026
 40158cc:	31a11304 	addi	r6,r6,-31668
 40158d0:	40158f00 	call	40158f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40158d4:	40170540 	call	4017054 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40158d8:	401730c0 	call	401730c <alt_icache_flush_all>
}
 40158dc:	e037883a 	mov	sp,fp
 40158e0:	dfc00117 	ldw	ra,4(sp)
 40158e4:	df000017 	ldw	fp,0(sp)
 40158e8:	dec00204 	addi	sp,sp,8
 40158ec:	f800283a 	ret

040158f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40158f0:	defffc04 	addi	sp,sp,-16
 40158f4:	df000315 	stw	fp,12(sp)
 40158f8:	df000304 	addi	fp,sp,12
 40158fc:	e13ffd15 	stw	r4,-12(fp)
 4015900:	e17ffe15 	stw	r5,-8(fp)
 4015904:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4015908:	e0fffe17 	ldw	r3,-8(fp)
 401590c:	e0bffd17 	ldw	r2,-12(fp)
 4015910:	18800e26 	beq	r3,r2,401594c <alt_load_section+0x5c>
  {
    while( to != end )
 4015914:	00000a06 	br	4015940 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4015918:	e0bffd17 	ldw	r2,-12(fp)
 401591c:	10c00017 	ldw	r3,0(r2)
 4015920:	e0bffe17 	ldw	r2,-8(fp)
 4015924:	10c00015 	stw	r3,0(r2)
 4015928:	e0bffe17 	ldw	r2,-8(fp)
 401592c:	10800104 	addi	r2,r2,4
 4015930:	e0bffe15 	stw	r2,-8(fp)
 4015934:	e0bffd17 	ldw	r2,-12(fp)
 4015938:	10800104 	addi	r2,r2,4
 401593c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4015940:	e0fffe17 	ldw	r3,-8(fp)
 4015944:	e0bfff17 	ldw	r2,-4(fp)
 4015948:	18bff31e 	bne	r3,r2,4015918 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 401594c:	e037883a 	mov	sp,fp
 4015950:	df000017 	ldw	fp,0(sp)
 4015954:	dec00104 	addi	sp,sp,4
 4015958:	f800283a 	ret

0401595c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401595c:	defffd04 	addi	sp,sp,-12
 4015960:	dfc00215 	stw	ra,8(sp)
 4015964:	df000115 	stw	fp,4(sp)
 4015968:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401596c:	0009883a 	mov	r4,zero
 4015970:	4015cf00 	call	4015cf0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4015974:	4015d240 	call	4015d24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4015978:	010100b4 	movhi	r4,1026
 401597c:	21210504 	addi	r4,r4,-31724
 4015980:	014100b4 	movhi	r5,1026
 4015984:	29610504 	addi	r5,r5,-31724
 4015988:	018100b4 	movhi	r6,1026
 401598c:	31a10504 	addi	r6,r6,-31724
 4015990:	40176e00 	call	40176e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4015994:	40171b00 	call	40171b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4015998:	01010074 	movhi	r4,1025
 401599c:	211c8504 	addi	r4,r4,29204
 40159a0:	4017e940 	call	4017e94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40159a4:	d120e317 	ldw	r4,-31860(gp)
 40159a8:	d160e417 	ldw	r5,-31856(gp)
 40159ac:	d1a0e517 	ldw	r6,-31852(gp)
 40159b0:	401488c0 	call	401488c <main>
 40159b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40159b8:	01000044 	movi	r4,1
 40159bc:	4016ef40 	call	4016ef4 <close>
  exit (result);
 40159c0:	e13fff17 	ldw	r4,-4(fp)
 40159c4:	4017ea80 	call	4017ea8 <exit>

040159c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40159c8:	defffa04 	addi	sp,sp,-24
 40159cc:	df000515 	stw	fp,20(sp)
 40159d0:	df000504 	addi	fp,sp,20
 40159d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40159d8:	0005303a 	rdctl	r2,status
 40159dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40159e0:	e0fffd17 	ldw	r3,-12(fp)
 40159e4:	00bfff84 	movi	r2,-2
 40159e8:	1884703a 	and	r2,r3,r2
 40159ec:	1001703a 	wrctl	status,r2
  
  return context;
 40159f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40159f4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 40159f8:	e0bfff17 	ldw	r2,-4(fp)
 40159fc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4015a00:	e0bffc17 	ldw	r2,-16(fp)
 4015a04:	10c00017 	ldw	r3,0(r2)
 4015a08:	e0bffc17 	ldw	r2,-16(fp)
 4015a0c:	10800117 	ldw	r2,4(r2)
 4015a10:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4015a14:	e0bffc17 	ldw	r2,-16(fp)
 4015a18:	10c00117 	ldw	r3,4(r2)
 4015a1c:	e0bffc17 	ldw	r2,-16(fp)
 4015a20:	10800017 	ldw	r2,0(r2)
 4015a24:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4015a28:	e0fffc17 	ldw	r3,-16(fp)
 4015a2c:	e0bffc17 	ldw	r2,-16(fp)
 4015a30:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4015a34:	e0fffc17 	ldw	r3,-16(fp)
 4015a38:	e0bffc17 	ldw	r2,-16(fp)
 4015a3c:	18800015 	stw	r2,0(r3)
 4015a40:	e0bffe17 	ldw	r2,-8(fp)
 4015a44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015a48:	e0bffb17 	ldw	r2,-20(fp)
 4015a4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4015a50:	e037883a 	mov	sp,fp
 4015a54:	df000017 	ldw	fp,0(sp)
 4015a58:	dec00104 	addi	sp,sp,4
 4015a5c:	f800283a 	ret

04015a60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4015a60:	defffb04 	addi	sp,sp,-20
 4015a64:	dfc00415 	stw	ra,16(sp)
 4015a68:	df000315 	stw	fp,12(sp)
 4015a6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4015a70:	d0a00517 	ldw	r2,-32748(gp)
 4015a74:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4015a78:	d0a0e717 	ldw	r2,-31844(gp)
 4015a7c:	10800044 	addi	r2,r2,1
 4015a80:	d0a0e715 	stw	r2,-31844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015a84:	00003106 	br	4015b4c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4015a88:	e0bffe17 	ldw	r2,-8(fp)
 4015a8c:	10800017 	ldw	r2,0(r2)
 4015a90:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4015a94:	e0bffe17 	ldw	r2,-8(fp)
 4015a98:	10800403 	ldbu	r2,16(r2)
 4015a9c:	10803fcc 	andi	r2,r2,255
 4015aa0:	1005003a 	cmpeq	r2,r2,zero
 4015aa4:	1000051e 	bne	r2,zero,4015abc <alt_tick+0x5c>
 4015aa8:	d0a0e717 	ldw	r2,-31844(gp)
 4015aac:	1004c03a 	cmpne	r2,r2,zero
 4015ab0:	1000021e 	bne	r2,zero,4015abc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4015ab4:	e0bffe17 	ldw	r2,-8(fp)
 4015ab8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4015abc:	e0bffe17 	ldw	r2,-8(fp)
 4015ac0:	10c00217 	ldw	r3,8(r2)
 4015ac4:	d0a0e717 	ldw	r2,-31844(gp)
 4015ac8:	10c01e36 	bltu	r2,r3,4015b44 <alt_tick+0xe4>
 4015acc:	e0bffe17 	ldw	r2,-8(fp)
 4015ad0:	10800403 	ldbu	r2,16(r2)
 4015ad4:	10803fcc 	andi	r2,r2,255
 4015ad8:	1004c03a 	cmpne	r2,r2,zero
 4015adc:	1000191e 	bne	r2,zero,4015b44 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4015ae0:	e0bffe17 	ldw	r2,-8(fp)
 4015ae4:	10c00317 	ldw	r3,12(r2)
 4015ae8:	e0bffe17 	ldw	r2,-8(fp)
 4015aec:	11000517 	ldw	r4,20(r2)
 4015af0:	183ee83a 	callr	r3
 4015af4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4015af8:	e0bffd17 	ldw	r2,-12(fp)
 4015afc:	1004c03a 	cmpne	r2,r2,zero
 4015b00:	1000031e 	bne	r2,zero,4015b10 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4015b04:	e13ffe17 	ldw	r4,-8(fp)
 4015b08:	40159c80 	call	40159c8 <alt_alarm_stop>
 4015b0c:	00000d06 	br	4015b44 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4015b10:	e0bffe17 	ldw	r2,-8(fp)
 4015b14:	10c00217 	ldw	r3,8(r2)
 4015b18:	e0bffd17 	ldw	r2,-12(fp)
 4015b1c:	1887883a 	add	r3,r3,r2
 4015b20:	e0bffe17 	ldw	r2,-8(fp)
 4015b24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4015b28:	e0bffe17 	ldw	r2,-8(fp)
 4015b2c:	10c00217 	ldw	r3,8(r2)
 4015b30:	d0a0e717 	ldw	r2,-31844(gp)
 4015b34:	1880032e 	bgeu	r3,r2,4015b44 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4015b38:	e0fffe17 	ldw	r3,-8(fp)
 4015b3c:	00800044 	movi	r2,1
 4015b40:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4015b44:	e0bfff17 	ldw	r2,-4(fp)
 4015b48:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015b4c:	d0e00504 	addi	r3,gp,-32748
 4015b50:	e0bffe17 	ldw	r2,-8(fp)
 4015b54:	10ffcc1e 	bne	r2,r3,4015a88 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4015b58:	e037883a 	mov	sp,fp
 4015b5c:	dfc00117 	ldw	ra,4(sp)
 4015b60:	df000017 	ldw	fp,0(sp)
 4015b64:	dec00204 	addi	sp,sp,8
 4015b68:	f800283a 	ret

04015b6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4015b6c:	defff704 	addi	sp,sp,-36
 4015b70:	dfc00815 	stw	ra,32(sp)
 4015b74:	df000715 	stw	fp,28(sp)
 4015b78:	df000704 	addi	fp,sp,28
 4015b7c:	e13ffb15 	stw	r4,-20(fp)
 4015b80:	e17ffc15 	stw	r5,-16(fp)
 4015b84:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4015b88:	e0bffb17 	ldw	r2,-20(fp)
 4015b8c:	1004803a 	cmplt	r2,r2,zero
 4015b90:	1000091e 	bne	r2,zero,4015bb8 <write+0x4c>
 4015b94:	e13ffb17 	ldw	r4,-20(fp)
 4015b98:	01400304 	movi	r5,12
 4015b9c:	4014cf40 	call	4014cf4 <__mulsi3>
 4015ba0:	1007883a 	mov	r3,r2
 4015ba4:	008100b4 	movhi	r2,1026
 4015ba8:	10a16c04 	addi	r2,r2,-31312
 4015bac:	1887883a 	add	r3,r3,r2
 4015bb0:	e0ffff15 	stw	r3,-4(fp)
 4015bb4:	00000106 	br	4015bbc <write+0x50>
 4015bb8:	e03fff15 	stw	zero,-4(fp)
 4015bbc:	e0bfff17 	ldw	r2,-4(fp)
 4015bc0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4015bc4:	e0bffa17 	ldw	r2,-24(fp)
 4015bc8:	1005003a 	cmpeq	r2,r2,zero
 4015bcc:	1000241e 	bne	r2,zero,4015c60 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4015bd0:	e0bffa17 	ldw	r2,-24(fp)
 4015bd4:	10800217 	ldw	r2,8(r2)
 4015bd8:	108000cc 	andi	r2,r2,3
 4015bdc:	1005003a 	cmpeq	r2,r2,zero
 4015be0:	10001a1e 	bne	r2,zero,4015c4c <write+0xe0>
 4015be4:	e0bffa17 	ldw	r2,-24(fp)
 4015be8:	10800017 	ldw	r2,0(r2)
 4015bec:	10800617 	ldw	r2,24(r2)
 4015bf0:	1005003a 	cmpeq	r2,r2,zero
 4015bf4:	1000151e 	bne	r2,zero,4015c4c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4015bf8:	e0bffa17 	ldw	r2,-24(fp)
 4015bfc:	10800017 	ldw	r2,0(r2)
 4015c00:	10800617 	ldw	r2,24(r2)
 4015c04:	e17ffc17 	ldw	r5,-16(fp)
 4015c08:	e1bffd17 	ldw	r6,-12(fp)
 4015c0c:	e13ffa17 	ldw	r4,-24(fp)
 4015c10:	103ee83a 	callr	r2
 4015c14:	e0bff915 	stw	r2,-28(fp)
 4015c18:	e0bff917 	ldw	r2,-28(fp)
 4015c1c:	1004403a 	cmpge	r2,r2,zero
 4015c20:	1000071e 	bne	r2,zero,4015c40 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 4015c24:	4015c900 	call	4015c90 <alt_get_errno>
 4015c28:	e0fff917 	ldw	r3,-28(fp)
 4015c2c:	00c7c83a 	sub	r3,zero,r3
 4015c30:	10c00015 	stw	r3,0(r2)
        return -1;
 4015c34:	00bfffc4 	movi	r2,-1
 4015c38:	e0bffe15 	stw	r2,-8(fp)
 4015c3c:	00000e06 	br	4015c78 <write+0x10c>
      }
      return rval;
 4015c40:	e0bff917 	ldw	r2,-28(fp)
 4015c44:	e0bffe15 	stw	r2,-8(fp)
 4015c48:	00000b06 	br	4015c78 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4015c4c:	4015c900 	call	4015c90 <alt_get_errno>
 4015c50:	1007883a 	mov	r3,r2
 4015c54:	00800344 	movi	r2,13
 4015c58:	18800015 	stw	r2,0(r3)
 4015c5c:	00000406 	br	4015c70 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4015c60:	4015c900 	call	4015c90 <alt_get_errno>
 4015c64:	1007883a 	mov	r3,r2
 4015c68:	00801444 	movi	r2,81
 4015c6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4015c70:	00bfffc4 	movi	r2,-1
 4015c74:	e0bffe15 	stw	r2,-8(fp)
 4015c78:	e0bffe17 	ldw	r2,-8(fp)
}
 4015c7c:	e037883a 	mov	sp,fp
 4015c80:	dfc00117 	ldw	ra,4(sp)
 4015c84:	df000017 	ldw	fp,0(sp)
 4015c88:	dec00204 	addi	sp,sp,8
 4015c8c:	f800283a 	ret

04015c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015c90:	defffd04 	addi	sp,sp,-12
 4015c94:	dfc00215 	stw	ra,8(sp)
 4015c98:	df000115 	stw	fp,4(sp)
 4015c9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4015ca0:	008100b4 	movhi	r2,1026
 4015ca4:	10a1da04 	addi	r2,r2,-30872
 4015ca8:	10800017 	ldw	r2,0(r2)
 4015cac:	1005003a 	cmpeq	r2,r2,zero
 4015cb0:	1000061e 	bne	r2,zero,4015ccc <alt_get_errno+0x3c>
 4015cb4:	008100b4 	movhi	r2,1026
 4015cb8:	10a1da04 	addi	r2,r2,-30872
 4015cbc:	10800017 	ldw	r2,0(r2)
 4015cc0:	103ee83a 	callr	r2
 4015cc4:	e0bfff15 	stw	r2,-4(fp)
 4015cc8:	00000306 	br	4015cd8 <alt_get_errno+0x48>
 4015ccc:	008100b4 	movhi	r2,1026
 4015cd0:	10a2ae04 	addi	r2,r2,-30024
 4015cd4:	e0bfff15 	stw	r2,-4(fp)
 4015cd8:	e0bfff17 	ldw	r2,-4(fp)
}
 4015cdc:	e037883a 	mov	sp,fp
 4015ce0:	dfc00117 	ldw	ra,4(sp)
 4015ce4:	df000017 	ldw	fp,0(sp)
 4015ce8:	dec00204 	addi	sp,sp,8
 4015cec:	f800283a 	ret

04015cf0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4015cf0:	defffd04 	addi	sp,sp,-12
 4015cf4:	dfc00215 	stw	ra,8(sp)
 4015cf8:	df000115 	stw	fp,4(sp)
 4015cfc:	df000104 	addi	fp,sp,4
 4015d00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4015d04:	4017af40 	call	4017af4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4015d08:	00800044 	movi	r2,1
 4015d0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4015d10:	e037883a 	mov	sp,fp
 4015d14:	dfc00117 	ldw	ra,4(sp)
 4015d18:	df000017 	ldw	fp,0(sp)
 4015d1c:	dec00204 	addi	sp,sp,8
 4015d20:	f800283a 	ret

04015d24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4015d24:	defffe04 	addi	sp,sp,-8
 4015d28:	dfc00115 	stw	ra,4(sp)
 4015d2c:	df000015 	stw	fp,0(sp)
 4015d30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 4015d34:	010100b4 	movhi	r4,1026
 4015d38:	21042004 	addi	r4,r4,4224
 4015d3c:	000b883a 	mov	r5,zero
 4015d40:	01800044 	movi	r6,1
 4015d44:	01c0fa04 	movi	r7,1000
 4015d48:	4016e640 	call	4016e64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4015d4c:	010100b4 	movhi	r4,1026
 4015d50:	21214b04 	addi	r4,r4,-31444
 4015d54:	4015d800 	call	4015d80 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA, sgdma);
 4015d58:	010100b4 	movhi	r4,1026
 4015d5c:	21215604 	addi	r4,r4,-31400
 4015d60:	000b883a 	mov	r5,zero
 4015d64:	01800084 	movi	r6,2
 4015d68:	4016d480 	call	4016d48 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 4015d6c:	e037883a 	mov	sp,fp
 4015d70:	dfc00117 	ldw	ra,4(sp)
 4015d74:	df000017 	ldw	fp,0(sp)
 4015d78:	dec00204 	addi	sp,sp,8
 4015d7c:	f800283a 	ret

04015d80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4015d80:	defffd04 	addi	sp,sp,-12
 4015d84:	dfc00215 	stw	ra,8(sp)
 4015d88:	df000115 	stw	fp,4(sp)
 4015d8c:	df000104 	addi	fp,sp,4
 4015d90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4015d94:	e13fff17 	ldw	r4,-4(fp)
 4015d98:	014100b4 	movhi	r5,1026
 4015d9c:	2961d704 	addi	r5,r5,-30884
 4015da0:	401709c0 	call	401709c <alt_dev_llist_insert>
}
 4015da4:	e037883a 	mov	sp,fp
 4015da8:	dfc00117 	ldw	ra,4(sp)
 4015dac:	df000017 	ldw	fp,0(sp)
 4015db0:	dec00204 	addi	sp,sp,8
 4015db4:	f800283a 	ret

04015db8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4015db8:	defffa04 	addi	sp,sp,-24
 4015dbc:	dfc00515 	stw	ra,20(sp)
 4015dc0:	df000415 	stw	fp,16(sp)
 4015dc4:	df000404 	addi	fp,sp,16
 4015dc8:	e13ffd15 	stw	r4,-12(fp)
 4015dcc:	e17ffe15 	stw	r5,-8(fp)
 4015dd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015dd4:	e0bffd17 	ldw	r2,-12(fp)
 4015dd8:	10800017 	ldw	r2,0(r2)
 4015ddc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4015de0:	e0bffc17 	ldw	r2,-16(fp)
 4015de4:	11000a04 	addi	r4,r2,40
 4015de8:	e0bffd17 	ldw	r2,-12(fp)
 4015dec:	11c00217 	ldw	r7,8(r2)
 4015df0:	e17ffe17 	ldw	r5,-8(fp)
 4015df4:	e1bfff17 	ldw	r6,-4(fp)
 4015df8:	4015e680 	call	4015e68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4015dfc:	e037883a 	mov	sp,fp
 4015e00:	dfc00117 	ldw	ra,4(sp)
 4015e04:	df000017 	ldw	fp,0(sp)
 4015e08:	dec00204 	addi	sp,sp,8
 4015e0c:	f800283a 	ret

04015e10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4015e10:	defffa04 	addi	sp,sp,-24
 4015e14:	dfc00515 	stw	ra,20(sp)
 4015e18:	df000415 	stw	fp,16(sp)
 4015e1c:	df000404 	addi	fp,sp,16
 4015e20:	e13ffd15 	stw	r4,-12(fp)
 4015e24:	e17ffe15 	stw	r5,-8(fp)
 4015e28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015e2c:	e0bffd17 	ldw	r2,-12(fp)
 4015e30:	10800017 	ldw	r2,0(r2)
 4015e34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4015e38:	e0bffc17 	ldw	r2,-16(fp)
 4015e3c:	11000a04 	addi	r4,r2,40
 4015e40:	e0bffd17 	ldw	r2,-12(fp)
 4015e44:	11c00217 	ldw	r7,8(r2)
 4015e48:	e17ffe17 	ldw	r5,-8(fp)
 4015e4c:	e1bfff17 	ldw	r6,-4(fp)
 4015e50:	4015f6c0 	call	4015f6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4015e54:	e037883a 	mov	sp,fp
 4015e58:	dfc00117 	ldw	ra,4(sp)
 4015e5c:	df000017 	ldw	fp,0(sp)
 4015e60:	dec00204 	addi	sp,sp,8
 4015e64:	f800283a 	ret

04015e68 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4015e68:	defff604 	addi	sp,sp,-40
 4015e6c:	df000915 	stw	fp,36(sp)
 4015e70:	df000904 	addi	fp,sp,36
 4015e74:	e13ffb15 	stw	r4,-20(fp)
 4015e78:	e17ffc15 	stw	r5,-16(fp)
 4015e7c:	e1bffd15 	stw	r6,-12(fp)
 4015e80:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 4015e84:	e0bffb17 	ldw	r2,-20(fp)
 4015e88:	10800017 	ldw	r2,0(r2)
 4015e8c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 4015e90:	e0bffc17 	ldw	r2,-16(fp)
 4015e94:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 4015e98:	e0bffd17 	ldw	r2,-12(fp)
 4015e9c:	1007883a 	mov	r3,r2
 4015ea0:	e0bffc17 	ldw	r2,-16(fp)
 4015ea4:	10c5883a 	add	r2,r2,r3
 4015ea8:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 4015eac:	00001606 	br	4015f08 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4015eb0:	e0bffa17 	ldw	r2,-24(fp)
 4015eb4:	10800037 	ldwio	r2,0(r2)
 4015eb8:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4015ebc:	e0bff717 	ldw	r2,-36(fp)
 4015ec0:	10a0000c 	andi	r2,r2,32768
 4015ec4:	1005003a 	cmpeq	r2,r2,zero
 4015ec8:	1000081e 	bne	r2,zero,4015eec <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4015ecc:	e0bff717 	ldw	r2,-36(fp)
 4015ed0:	1007883a 	mov	r3,r2
 4015ed4:	e0bff917 	ldw	r2,-28(fp)
 4015ed8:	10c00005 	stb	r3,0(r2)
 4015edc:	e0bff917 	ldw	r2,-28(fp)
 4015ee0:	10800044 	addi	r2,r2,1
 4015ee4:	e0bff915 	stw	r2,-28(fp)
 4015ee8:	00000706 	br	4015f08 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 4015eec:	e0fff917 	ldw	r3,-28(fp)
 4015ef0:	e0bffc17 	ldw	r2,-16(fp)
 4015ef4:	1880071e 	bne	r3,r2,4015f14 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 4015ef8:	e0bffe17 	ldw	r2,-8(fp)
 4015efc:	1090000c 	andi	r2,r2,16384
 4015f00:	1004c03a 	cmpne	r2,r2,zero
 4015f04:	1000031e 	bne	r2,zero,4015f14 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4015f08:	e0fff917 	ldw	r3,-28(fp)
 4015f0c:	e0bff817 	ldw	r2,-32(fp)
 4015f10:	18bfe736 	bltu	r3,r2,4015eb0 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 4015f14:	e0fff917 	ldw	r3,-28(fp)
 4015f18:	e0bffc17 	ldw	r2,-16(fp)
 4015f1c:	18800526 	beq	r3,r2,4015f34 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 4015f20:	e0fff917 	ldw	r3,-28(fp)
 4015f24:	e0bffc17 	ldw	r2,-16(fp)
 4015f28:	1887c83a 	sub	r3,r3,r2
 4015f2c:	e0ffff15 	stw	r3,-4(fp)
 4015f30:	00000906 	br	4015f58 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 4015f34:	e0bffe17 	ldw	r2,-8(fp)
 4015f38:	1090000c 	andi	r2,r2,16384
 4015f3c:	1005003a 	cmpeq	r2,r2,zero
 4015f40:	1000031e 	bne	r2,zero,4015f50 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 4015f44:	00bffd44 	movi	r2,-11
 4015f48:	e0bfff15 	stw	r2,-4(fp)
 4015f4c:	00000206 	br	4015f58 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 4015f50:	00bffec4 	movi	r2,-5
 4015f54:	e0bfff15 	stw	r2,-4(fp)
 4015f58:	e0bfff17 	ldw	r2,-4(fp)
}
 4015f5c:	e037883a 	mov	sp,fp
 4015f60:	df000017 	ldw	fp,0(sp)
 4015f64:	dec00104 	addi	sp,sp,4
 4015f68:	f800283a 	ret

04015f6c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4015f6c:	defff904 	addi	sp,sp,-28
 4015f70:	df000615 	stw	fp,24(sp)
 4015f74:	df000604 	addi	fp,sp,24
 4015f78:	e13ffc15 	stw	r4,-16(fp)
 4015f7c:	e17ffd15 	stw	r5,-12(fp)
 4015f80:	e1bffe15 	stw	r6,-8(fp)
 4015f84:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4015f88:	e0bffc17 	ldw	r2,-16(fp)
 4015f8c:	10800017 	ldw	r2,0(r2)
 4015f90:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 4015f94:	e0bffe17 	ldw	r2,-8(fp)
 4015f98:	1007883a 	mov	r3,r2
 4015f9c:	e0bffd17 	ldw	r2,-12(fp)
 4015fa0:	10c5883a 	add	r2,r2,r3
 4015fa4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4015fa8:	00001106 	br	4015ff0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4015fac:	e0bffb17 	ldw	r2,-20(fp)
 4015fb0:	10800104 	addi	r2,r2,4
 4015fb4:	10800037 	ldwio	r2,0(r2)
 4015fb8:	10bfffec 	andhi	r2,r2,65535
 4015fbc:	1005003a 	cmpeq	r2,r2,zero
 4015fc0:	10000b1e 	bne	r2,zero,4015ff0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4015fc4:	e13ffb17 	ldw	r4,-20(fp)
 4015fc8:	e0bffd17 	ldw	r2,-12(fp)
 4015fcc:	10800003 	ldbu	r2,0(r2)
 4015fd0:	10c03fcc 	andi	r3,r2,255
 4015fd4:	18c0201c 	xori	r3,r3,128
 4015fd8:	18ffe004 	addi	r3,r3,-128
 4015fdc:	e0bffd17 	ldw	r2,-12(fp)
 4015fe0:	10800044 	addi	r2,r2,1
 4015fe4:	e0bffd15 	stw	r2,-12(fp)
 4015fe8:	2005883a 	mov	r2,r4
 4015fec:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4015ff0:	e0fffd17 	ldw	r3,-12(fp)
 4015ff4:	e0bffa17 	ldw	r2,-24(fp)
 4015ff8:	18bfec36 	bltu	r3,r2,4015fac <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4015ffc:	e0bffe17 	ldw	r2,-8(fp)
}
 4016000:	e037883a 	mov	sp,fp
 4016004:	df000017 	ldw	fp,0(sp)
 4016008:	dec00104 	addi	sp,sp,4
 401600c:	f800283a 	ret

04016010 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4016010:	defffb04 	addi	sp,sp,-20
 4016014:	df000415 	stw	fp,16(sp)
 4016018:	df000404 	addi	fp,sp,16
 401601c:	e13ffd15 	stw	r4,-12(fp)
 4016020:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4016024:	e0bffd17 	ldw	r2,-12(fp)
 4016028:	10800317 	ldw	r2,12(r2)
 401602c:	10800037 	ldwio	r2,0(r2)
 4016030:	1080040c 	andi	r2,r2,16
 4016034:	1005003a 	cmpeq	r2,r2,zero
 4016038:	1000031e 	bne	r2,zero,4016048 <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 401603c:	00bffc04 	movi	r2,-16
 4016040:	e0bfff15 	stw	r2,-4(fp)
 4016044:	00003c06 	br	4016138 <alt_avalon_sgdma_do_async_transfer+0x128>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016048:	e0bffd17 	ldw	r2,-12(fp)
 401604c:	10800317 	ldw	r2,12(r2)
 4016050:	11000404 	addi	r4,r2,16
 4016054:	e0bffd17 	ldw	r2,-12(fp)
 4016058:	10800317 	ldw	r2,12(r2)
 401605c:	10800404 	addi	r2,r2,16
 4016060:	10c00037 	ldwio	r3,0(r2)
 4016064:	00bff7c4 	movi	r2,-33
 4016068:	1886703a 	and	r3,r3,r2
 401606c:	2005883a 	mov	r2,r4
 4016070:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016074:	e0bffd17 	ldw	r2,-12(fp)
 4016078:	10800317 	ldw	r2,12(r2)
 401607c:	1007883a 	mov	r3,r2
 4016080:	00803fc4 	movi	r2,255
 4016084:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4016088:	e0bffd17 	ldw	r2,-12(fp)
 401608c:	10800317 	ldw	r2,12(r2)
 4016090:	10800804 	addi	r2,r2,32
 4016094:	e0fffe17 	ldw	r3,-8(fp)
 4016098:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 401609c:	e0bffd17 	ldw	r2,-12(fp)
 40160a0:	10800917 	ldw	r2,36(r2)
 40160a4:	1005003a 	cmpeq	r2,r2,zero
 40160a8:	1000111e 	bne	r2,zero,40160f0 <alt_avalon_sgdma_do_async_transfer+0xe0>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40160ac:	e0bffd17 	ldw	r2,-12(fp)
 40160b0:	10800317 	ldw	r2,12(r2)
 40160b4:	10800404 	addi	r2,r2,16
 40160b8:	10800037 	ldwio	r2,0(r2)
 40160bc:	e0bffc15 	stw	r2,-16(fp)

    control |= (dev->chain_control                          |
 40160c0:	e0bffd17 	ldw	r2,-12(fp)
 40160c4:	10c00b17 	ldw	r3,44(r2)
 40160c8:	e0bffc17 	ldw	r2,-16(fp)
 40160cc:	1884b03a 	or	r2,r3,r2
 40160d0:	10801814 	ori	r2,r2,96
 40160d4:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 40160d8:	e0bffd17 	ldw	r2,-12(fp)
 40160dc:	10800317 	ldw	r2,12(r2)
 40160e0:	10800404 	addi	r2,r2,16
 40160e4:	e0fffc17 	ldw	r3,-16(fp)
 40160e8:	10c00035 	stwio	r3,0(r2)
 40160ec:	00001106 	br	4016134 <alt_avalon_sgdma_do_async_transfer+0x124>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40160f0:	e0bffd17 	ldw	r2,-12(fp)
 40160f4:	10800317 	ldw	r2,12(r2)
 40160f8:	10800404 	addi	r2,r2,16
 40160fc:	10800037 	ldwio	r2,0(r2)
 4016100:	e0bffc15 	stw	r2,-16(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 4016104:	e0bffc17 	ldw	r2,-16(fp)
 4016108:	10801814 	ori	r2,r2,96
 401610c:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 4016110:	e0fffc17 	ldw	r3,-16(fp)
 4016114:	00bffbc4 	movi	r2,-17
 4016118:	1884703a 	and	r2,r3,r2
 401611c:	e0bffc15 	stw	r2,-16(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016120:	e0bffd17 	ldw	r2,-12(fp)
 4016124:	10800317 	ldw	r2,12(r2)
 4016128:	10800404 	addi	r2,r2,16
 401612c:	e0fffc17 	ldw	r3,-16(fp)
 4016130:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 4016134:	e03fff15 	stw	zero,-4(fp)
 4016138:	e0bfff17 	ldw	r2,-4(fp)
}
 401613c:	e037883a 	mov	sp,fp
 4016140:	df000017 	ldw	fp,0(sp)
 4016144:	dec00104 	addi	sp,sp,4
 4016148:	f800283a 	ret

0401614c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 401614c:	defffc04 	addi	sp,sp,-16
 4016150:	df000315 	stw	fp,12(sp)
 4016154:	df000304 	addi	fp,sp,12
 4016158:	e13ffe15 	stw	r4,-8(fp)
 401615c:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4016160:	e0bffe17 	ldw	r2,-8(fp)
 4016164:	10800317 	ldw	r2,12(r2)
 4016168:	10800037 	ldwio	r2,0(r2)
 401616c:	1080040c 	andi	r2,r2,16
 4016170:	1004c03a 	cmpne	r2,r2,zero
 4016174:	103ffa1e 	bne	r2,zero,4016160 <alt_avalon_sgdma_do_sync_transfer+0x14>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016178:	e0bffe17 	ldw	r2,-8(fp)
 401617c:	10800317 	ldw	r2,12(r2)
 4016180:	11000404 	addi	r4,r2,16
 4016184:	e0bffe17 	ldw	r2,-8(fp)
 4016188:	10800317 	ldw	r2,12(r2)
 401618c:	10800404 	addi	r2,r2,16
 4016190:	10c00037 	ldwio	r3,0(r2)
 4016194:	00bff7c4 	movi	r2,-33
 4016198:	1886703a 	and	r3,r3,r2
 401619c:	2005883a 	mov	r2,r4
 40161a0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 40161a4:	e0bffe17 	ldw	r2,-8(fp)
 40161a8:	10800317 	ldw	r2,12(r2)
 40161ac:	1007883a 	mov	r3,r2
 40161b0:	00803fc4 	movi	r2,255
 40161b4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 40161b8:	e0bffe17 	ldw	r2,-8(fp)
 40161bc:	10800317 	ldw	r2,12(r2)
 40161c0:	10800804 	addi	r2,r2,32
 40161c4:	e0ffff17 	ldw	r3,-4(fp)
 40161c8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 40161cc:	e0bffe17 	ldw	r2,-8(fp)
 40161d0:	10800317 	ldw	r2,12(r2)
 40161d4:	11000404 	addi	r4,r2,16
 40161d8:	e0bffe17 	ldw	r2,-8(fp)
 40161dc:	10800317 	ldw	r2,12(r2)
 40161e0:	10800404 	addi	r2,r2,16
 40161e4:	10800037 	ldwio	r2,0(r2)
 40161e8:	10c01814 	ori	r3,r2,96
 40161ec:	2005883a 	mov	r2,r4
 40161f0:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 40161f4:	e0bffe17 	ldw	r2,-8(fp)
 40161f8:	10800317 	ldw	r2,12(r2)
 40161fc:	10800037 	ldwio	r2,0(r2)
 4016200:	1080040c 	andi	r2,r2,16
 4016204:	1004c03a 	cmpne	r2,r2,zero
 4016208:	103ffa1e 	bne	r2,zero,40161f4 <alt_avalon_sgdma_do_sync_transfer+0xa8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 401620c:	e0bffe17 	ldw	r2,-8(fp)
 4016210:	10800317 	ldw	r2,12(r2)
 4016214:	11000404 	addi	r4,r2,16
 4016218:	e0bffe17 	ldw	r2,-8(fp)
 401621c:	10800317 	ldw	r2,12(r2)
 4016220:	10800404 	addi	r2,r2,16
 4016224:	10c00037 	ldwio	r3,0(r2)
 4016228:	00bff7c4 	movi	r2,-33
 401622c:	1886703a 	and	r3,r3,r2
 4016230:	2005883a 	mov	r2,r4
 4016234:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 4016238:	e0bffe17 	ldw	r2,-8(fp)
 401623c:	10800317 	ldw	r2,12(r2)
 4016240:	10800037 	ldwio	r2,0(r2)
 4016244:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016248:	e0bffe17 	ldw	r2,-8(fp)
 401624c:	10800317 	ldw	r2,12(r2)
 4016250:	1007883a 	mov	r3,r2
 4016254:	00803fc4 	movi	r2,255
 4016258:	18800035 	stwio	r2,0(r3)

  return status;
 401625c:	e0bffd03 	ldbu	r2,-12(fp)
}
 4016260:	e037883a 	mov	sp,fp
 4016264:	df000017 	ldw	fp,0(sp)
 4016268:	dec00104 	addi	sp,sp,4
 401626c:	f800283a 	ret

04016270 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 4016270:	defff404 	addi	sp,sp,-48
 4016274:	dfc00b15 	stw	ra,44(sp)
 4016278:	df000a15 	stw	fp,40(sp)
 401627c:	df000a04 	addi	fp,sp,40
 4016280:	e13ffb15 	stw	r4,-20(fp)
 4016284:	e17ffc15 	stw	r5,-16(fp)
 4016288:	e1bffd15 	stw	r6,-12(fp)
 401628c:	e1fffe15 	stw	r7,-8(fp)
 4016290:	e0800217 	ldw	r2,8(fp)
 4016294:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 4016298:	e0bfff0b 	ldhu	r2,-4(fp)
 401629c:	d8800015 	stw	r2,0(sp)
 40162a0:	e0800317 	ldw	r2,12(fp)
 40162a4:	d8800115 	stw	r2,4(sp)
 40162a8:	e0800417 	ldw	r2,16(fp)
 40162ac:	d8800215 	stw	r2,8(sp)
 40162b0:	d8000315 	stw	zero,12(sp)
 40162b4:	d8000415 	stw	zero,16(sp)
 40162b8:	e13ffb17 	ldw	r4,-20(fp)
 40162bc:	e17ffc17 	ldw	r5,-16(fp)
 40162c0:	e1bffd17 	ldw	r6,-12(fp)
 40162c4:	e1fffe17 	ldw	r7,-8(fp)
 40162c8:	40162e00 	call	40162e0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 40162cc:	e037883a 	mov	sp,fp
 40162d0:	dfc00117 	ldw	ra,4(sp)
 40162d4:	df000017 	ldw	fp,0(sp)
 40162d8:	dec00204 	addi	sp,sp,8
 40162dc:	f800283a 	ret

040162e0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 40162e0:	defff204 	addi	sp,sp,-56
 40162e4:	dfc00d15 	stw	ra,52(sp)
 40162e8:	df000c15 	stw	fp,48(sp)
 40162ec:	df000c04 	addi	fp,sp,48
 40162f0:	e13ffb15 	stw	r4,-20(fp)
 40162f4:	e17ffc15 	stw	r5,-16(fp)
 40162f8:	e1bffd15 	stw	r6,-12(fp)
 40162fc:	e1fffe15 	stw	r7,-8(fp)
 4016300:	e0800217 	ldw	r2,8(fp)
 4016304:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4016308:	e0bfff0b 	ldhu	r2,-4(fp)
 401630c:	d8800015 	stw	r2,0(sp)
 4016310:	d8000115 	stw	zero,4(sp)
 4016314:	e0800317 	ldw	r2,12(fp)
 4016318:	d8800215 	stw	r2,8(sp)
 401631c:	e0800417 	ldw	r2,16(fp)
 4016320:	d8800315 	stw	r2,12(sp)
 4016324:	e0800517 	ldw	r2,20(fp)
 4016328:	d8800415 	stw	r2,16(sp)
 401632c:	e0800617 	ldw	r2,24(fp)
 4016330:	d8800515 	stw	r2,20(sp)
 4016334:	d8000615 	stw	zero,24(sp)
 4016338:	e13ffb17 	ldw	r4,-20(fp)
 401633c:	e17ffc17 	ldw	r5,-16(fp)
 4016340:	e1bffd17 	ldw	r6,-12(fp)
 4016344:	e1fffe17 	ldw	r7,-8(fp)
 4016348:	40168a00 	call	40168a0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 401634c:	e037883a 	mov	sp,fp
 4016350:	dfc00117 	ldw	ra,4(sp)
 4016354:	df000017 	ldw	fp,0(sp)
 4016358:	dec00204 	addi	sp,sp,8
 401635c:	f800283a 	ret

04016360 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 4016360:	defff804 	addi	sp,sp,-32
 4016364:	dfc00715 	stw	ra,28(sp)
 4016368:	df000615 	stw	fp,24(sp)
 401636c:	df000604 	addi	fp,sp,24
 4016370:	e13ffc15 	stw	r4,-16(fp)
 4016374:	e17ffd15 	stw	r5,-12(fp)
 4016378:	e1bffe15 	stw	r6,-8(fp)
 401637c:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 4016380:	e1ffff0b 	ldhu	r7,-4(fp)
 4016384:	e0800217 	ldw	r2,8(fp)
 4016388:	d8800015 	stw	r2,0(sp)
 401638c:	d8000115 	stw	zero,4(sp)
 4016390:	e13ffc17 	ldw	r4,-16(fp)
 4016394:	e17ffd17 	ldw	r5,-12(fp)
 4016398:	e1bffe17 	ldw	r6,-8(fp)
 401639c:	40163b40 	call	40163b4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 40163a0:	e037883a 	mov	sp,fp
 40163a4:	dfc00117 	ldw	ra,4(sp)
 40163a8:	df000017 	ldw	fp,0(sp)
 40163ac:	dec00204 	addi	sp,sp,8
 40163b0:	f800283a 	ret

040163b4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 40163b4:	defff304 	addi	sp,sp,-52
 40163b8:	dfc00c15 	stw	ra,48(sp)
 40163bc:	df000b15 	stw	fp,44(sp)
 40163c0:	df000b04 	addi	fp,sp,44
 40163c4:	e13ffc15 	stw	r4,-16(fp)
 40163c8:	e17ffd15 	stw	r5,-12(fp)
 40163cc:	e1bffe15 	stw	r6,-8(fp)
 40163d0:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 40163d4:	e0bfff0b 	ldhu	r2,-4(fp)
 40163d8:	d8800015 	stw	r2,0(sp)
 40163dc:	d8000115 	stw	zero,4(sp)
 40163e0:	d8000215 	stw	zero,8(sp)
 40163e4:	e0800217 	ldw	r2,8(fp)
 40163e8:	d8800315 	stw	r2,12(sp)
 40163ec:	d8000415 	stw	zero,16(sp)
 40163f0:	e0800317 	ldw	r2,12(fp)
 40163f4:	d8800515 	stw	r2,20(sp)
 40163f8:	d8000615 	stw	zero,24(sp)
 40163fc:	e13ffc17 	ldw	r4,-16(fp)
 4016400:	e17ffd17 	ldw	r5,-12(fp)
 4016404:	000d883a 	mov	r6,zero
 4016408:	e1fffe17 	ldw	r7,-8(fp)
 401640c:	40168a00 	call	40168a0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 4016410:	e037883a 	mov	sp,fp
 4016414:	dfc00117 	ldw	ra,4(sp)
 4016418:	df000017 	ldw	fp,0(sp)
 401641c:	dec00204 	addi	sp,sp,8
 4016420:	f800283a 	ret

04016424 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4016424:	defff404 	addi	sp,sp,-48
 4016428:	dfc00b15 	stw	ra,44(sp)
 401642c:	df000a15 	stw	fp,40(sp)
 4016430:	df000a04 	addi	fp,sp,40
 4016434:	e13ffb15 	stw	r4,-20(fp)
 4016438:	e17ffc15 	stw	r5,-16(fp)
 401643c:	e1bffd15 	stw	r6,-12(fp)
 4016440:	e0800517 	ldw	r2,20(fp)
 4016444:	e1fffe0d 	sth	r7,-8(fp)
 4016448:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 401644c:	e1fffe0b 	ldhu	r7,-8(fp)
 4016450:	e0ffff03 	ldbu	r3,-4(fp)
 4016454:	e0800217 	ldw	r2,8(fp)
 4016458:	d8800015 	stw	r2,0(sp)
 401645c:	e0800317 	ldw	r2,12(fp)
 4016460:	d8800115 	stw	r2,4(sp)
 4016464:	e0800417 	ldw	r2,16(fp)
 4016468:	d8800215 	stw	r2,8(sp)
 401646c:	d8000315 	stw	zero,12(sp)
 4016470:	d8c00415 	stw	r3,16(sp)
 4016474:	e13ffb17 	ldw	r4,-20(fp)
 4016478:	e17ffc17 	ldw	r5,-16(fp)
 401647c:	e1bffd17 	ldw	r6,-12(fp)
 4016480:	40164980 	call	4016498 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 4016484:	e037883a 	mov	sp,fp
 4016488:	dfc00117 	ldw	ra,4(sp)
 401648c:	df000017 	ldw	fp,0(sp)
 4016490:	dec00204 	addi	sp,sp,8
 4016494:	f800283a 	ret

04016498 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 4016498:	defff204 	addi	sp,sp,-56
 401649c:	dfc00d15 	stw	ra,52(sp)
 40164a0:	df000c15 	stw	fp,48(sp)
 40164a4:	df000c04 	addi	fp,sp,48
 40164a8:	e13ffb15 	stw	r4,-20(fp)
 40164ac:	e17ffc15 	stw	r5,-16(fp)
 40164b0:	e1bffd15 	stw	r6,-12(fp)
 40164b4:	e0800617 	ldw	r2,24(fp)
 40164b8:	e1fffe0d 	sth	r7,-8(fp)
 40164bc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 40164c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40164c4:	e0ffff03 	ldbu	r3,-4(fp)
 40164c8:	d8800015 	stw	r2,0(sp)
 40164cc:	e0800417 	ldw	r2,16(fp)
 40164d0:	d8800115 	stw	r2,4(sp)
 40164d4:	e0800217 	ldw	r2,8(fp)
 40164d8:	d8800215 	stw	r2,8(sp)
 40164dc:	e0800317 	ldw	r2,12(fp)
 40164e0:	d8800315 	stw	r2,12(sp)
 40164e4:	e0800517 	ldw	r2,20(fp)
 40164e8:	d8800415 	stw	r2,16(sp)
 40164ec:	d8000515 	stw	zero,20(sp)
 40164f0:	d8c00615 	stw	r3,24(sp)
 40164f4:	e13ffb17 	ldw	r4,-20(fp)
 40164f8:	e17ffc17 	ldw	r5,-16(fp)
 40164fc:	e1bffd17 	ldw	r6,-12(fp)
 4016500:	000f883a 	mov	r7,zero
 4016504:	40168a00 	call	40168a0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 4016508:	e037883a 	mov	sp,fp
 401650c:	dfc00117 	ldw	ra,4(sp)
 4016510:	df000017 	ldw	fp,0(sp)
 4016514:	dec00204 	addi	sp,sp,8
 4016518:	f800283a 	ret

0401651c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 401651c:	defffb04 	addi	sp,sp,-20
 4016520:	df000415 	stw	fp,16(sp)
 4016524:	df000404 	addi	fp,sp,16
 4016528:	e13ffc15 	stw	r4,-16(fp)
 401652c:	e17ffd15 	stw	r5,-12(fp)
 4016530:	e1bffe15 	stw	r6,-8(fp)
 4016534:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 4016538:	e0fffc17 	ldw	r3,-16(fp)
 401653c:	e0bffd17 	ldw	r2,-12(fp)
 4016540:	18800915 	stw	r2,36(r3)
  dev->callback_context = context;
 4016544:	e0fffc17 	ldw	r3,-16(fp)
 4016548:	e0bfff17 	ldw	r2,-4(fp)
 401654c:	18800a15 	stw	r2,40(r3)
  dev->chain_control    = chain_control;
 4016550:	e0fffc17 	ldw	r3,-16(fp)
 4016554:	e0bffe17 	ldw	r2,-8(fp)
 4016558:	18800b15 	stw	r2,44(r3)
}
 401655c:	e037883a 	mov	sp,fp
 4016560:	df000017 	ldw	fp,0(sp)
 4016564:	dec00104 	addi	sp,sp,4
 4016568:	f800283a 	ret

0401656c <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 401656c:	defffd04 	addi	sp,sp,-12
 4016570:	df000215 	stw	fp,8(sp)
 4016574:	df000204 	addi	fp,sp,8
 4016578:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 401657c:	e0bfff17 	ldw	r2,-4(fp)
 4016580:	10800317 	ldw	r2,12(r2)
 4016584:	10800404 	addi	r2,r2,16
 4016588:	10800037 	ldwio	r2,0(r2)
 401658c:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 4016590:	e0bffe17 	ldw	r2,-8(fp)
 4016594:	10800814 	ori	r2,r2,32
 4016598:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 401659c:	e0bfff17 	ldw	r2,-4(fp)
 40165a0:	10800317 	ldw	r2,12(r2)
 40165a4:	10800404 	addi	r2,r2,16
 40165a8:	e0fffe17 	ldw	r3,-8(fp)
 40165ac:	10c00035 	stwio	r3,0(r2)
}
 40165b0:	e037883a 	mov	sp,fp
 40165b4:	df000017 	ldw	fp,0(sp)
 40165b8:	dec00104 	addi	sp,sp,4
 40165bc:	f800283a 	ret

040165c0 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 40165c0:	defffd04 	addi	sp,sp,-12
 40165c4:	df000215 	stw	fp,8(sp)
 40165c8:	df000204 	addi	fp,sp,8
 40165cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40165d0:	e0bfff17 	ldw	r2,-4(fp)
 40165d4:	10800317 	ldw	r2,12(r2)
 40165d8:	10800404 	addi	r2,r2,16
 40165dc:	10800037 	ldwio	r2,0(r2)
 40165e0:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 40165e4:	e0fffe17 	ldw	r3,-8(fp)
 40165e8:	00bff7c4 	movi	r2,-33
 40165ec:	1884703a 	and	r2,r3,r2
 40165f0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 40165f4:	e0bfff17 	ldw	r2,-4(fp)
 40165f8:	10800317 	ldw	r2,12(r2)
 40165fc:	10800404 	addi	r2,r2,16
 4016600:	e0fffe17 	ldw	r3,-8(fp)
 4016604:	10c00035 	stwio	r3,0(r2)
}
 4016608:	e037883a 	mov	sp,fp
 401660c:	df000017 	ldw	fp,0(sp)
 4016610:	dec00104 	addi	sp,sp,4
 4016614:	f800283a 	ret

04016618 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 4016618:	defffd04 	addi	sp,sp,-12
 401661c:	df000215 	stw	fp,8(sp)
 4016620:	df000204 	addi	fp,sp,8
 4016624:	e13ffe15 	stw	r4,-8(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 4016628:	e0bffe17 	ldw	r2,-8(fp)
 401662c:	10800784 	addi	r2,r2,30
 4016630:	10800023 	ldbuio	r2,0(r2)
 4016634:	10801fcc 	andi	r2,r2,127
 4016638:	1005003a 	cmpeq	r2,r2,zero
 401663c:	1000031e 	bne	r2,zero,401664c <alt_avalon_sgdma_check_descriptor_status+0x34>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 4016640:	00bffec4 	movi	r2,-5
 4016644:	e0bfff15 	stw	r2,-4(fp)
 4016648:	00000a06 	br	4016674 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 401664c:	e0bffe17 	ldw	r2,-8(fp)
 4016650:	108007c4 	addi	r2,r2,31
 4016654:	10800023 	ldbuio	r2,0(r2)
 4016658:	1080200c 	andi	r2,r2,128
 401665c:	1005003a 	cmpeq	r2,r2,zero
 4016660:	1000031e 	bne	r2,zero,4016670 <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 4016664:	00bfe244 	movi	r2,-119
 4016668:	e0bfff15 	stw	r2,-4(fp)
 401666c:	00000106 	br	4016674 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
 4016670:	e03fff15 	stw	zero,-4(fp)
 4016674:	e0bfff17 	ldw	r2,-4(fp)
}
 4016678:	e037883a 	mov	sp,fp
 401667c:	df000017 	ldw	fp,0(sp)
 4016680:	dec00104 	addi	sp,sp,4
 4016684:	f800283a 	ret

04016688 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 4016688:	defffc04 	addi	sp,sp,-16
 401668c:	dfc00315 	stw	ra,12(sp)
 4016690:	df000215 	stw	fp,8(sp)
 4016694:	df000204 	addi	fp,sp,8
 4016698:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 401669c:	e13fff17 	ldw	r4,-4(fp)
 40166a0:	d1600704 	addi	r5,gp,-32740
 40166a4:	40172780 	call	4017278 <alt_find_dev>
 40166a8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 40166ac:	e0bffe17 	ldw	r2,-8(fp)
 40166b0:	1004c03a 	cmpne	r2,r2,zero
 40166b4:	1000041e 	bne	r2,zero,40166c8 <alt_avalon_sgdma_open+0x40>
    ALT_ERRNO = ENODEV;
 40166b8:	40166e00 	call	40166e0 <alt_get_errno>
 40166bc:	1007883a 	mov	r3,r2
 40166c0:	008004c4 	movi	r2,19
 40166c4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 40166c8:	e0bffe17 	ldw	r2,-8(fp)
}
 40166cc:	e037883a 	mov	sp,fp
 40166d0:	dfc00117 	ldw	ra,4(sp)
 40166d4:	df000017 	ldw	fp,0(sp)
 40166d8:	dec00204 	addi	sp,sp,8
 40166dc:	f800283a 	ret

040166e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40166e0:	defffd04 	addi	sp,sp,-12
 40166e4:	dfc00215 	stw	ra,8(sp)
 40166e8:	df000115 	stw	fp,4(sp)
 40166ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40166f0:	008100b4 	movhi	r2,1026
 40166f4:	10a1da04 	addi	r2,r2,-30872
 40166f8:	10800017 	ldw	r2,0(r2)
 40166fc:	1005003a 	cmpeq	r2,r2,zero
 4016700:	1000061e 	bne	r2,zero,401671c <alt_get_errno+0x3c>
 4016704:	008100b4 	movhi	r2,1026
 4016708:	10a1da04 	addi	r2,r2,-30872
 401670c:	10800017 	ldw	r2,0(r2)
 4016710:	103ee83a 	callr	r2
 4016714:	e0bfff15 	stw	r2,-4(fp)
 4016718:	00000306 	br	4016728 <alt_get_errno+0x48>
 401671c:	008100b4 	movhi	r2,1026
 4016720:	10a2ae04 	addi	r2,r2,-30024
 4016724:	e0bfff15 	stw	r2,-4(fp)
 4016728:	e0bfff17 	ldw	r2,-4(fp)
}
 401672c:	e037883a 	mov	sp,fp
 4016730:	dfc00117 	ldw	ra,4(sp)
 4016734:	df000017 	ldw	fp,0(sp)
 4016738:	dec00204 	addi	sp,sp,8
 401673c:	f800283a 	ret

04016740 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 4016740:	defff104 	addi	sp,sp,-60
 4016744:	dfc00e15 	stw	ra,56(sp)
 4016748:	df000d15 	stw	fp,52(sp)
 401674c:	df000d04 	addi	fp,sp,52
 4016750:	e13ffa15 	stw	r4,-24(fp)
 4016754:	e17ffb15 	stw	r5,-20(fp)
 4016758:	e1bffc15 	stw	r6,-16(fp)
 401675c:	e1fffd15 	stw	r7,-12(fp)
 4016760:	e0800217 	ldw	r2,8(fp)
 4016764:	e0c00617 	ldw	r3,24(fp)
 4016768:	e0bffe0d 	sth	r2,-8(fp)
 401676c:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 4016770:	e0bffe0b 	ldhu	r2,-8(fp)
 4016774:	e0ffff03 	ldbu	r3,-4(fp)
 4016778:	d8800015 	stw	r2,0(sp)
 401677c:	e0800317 	ldw	r2,12(fp)
 4016780:	d8800115 	stw	r2,4(sp)
 4016784:	e0800417 	ldw	r2,16(fp)
 4016788:	d8800215 	stw	r2,8(sp)
 401678c:	e0800517 	ldw	r2,20(fp)
 4016790:	d8800315 	stw	r2,12(sp)
 4016794:	d8000415 	stw	zero,16(sp)
 4016798:	d8000515 	stw	zero,20(sp)
 401679c:	d8c00615 	stw	r3,24(sp)
 40167a0:	e13ffa17 	ldw	r4,-24(fp)
 40167a4:	e17ffb17 	ldw	r5,-20(fp)
 40167a8:	e1bffc17 	ldw	r6,-16(fp)
 40167ac:	e1fffd17 	ldw	r7,-12(fp)
 40167b0:	40168a00 	call	40168a0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 40167b4:	e037883a 	mov	sp,fp
 40167b8:	dfc00117 	ldw	ra,4(sp)
 40167bc:	df000017 	ldw	fp,0(sp)
 40167c0:	dec00204 	addi	sp,sp,8
 40167c4:	f800283a 	ret

040167c8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 40167c8:	defffc04 	addi	sp,sp,-16
 40167cc:	df000315 	stw	fp,12(sp)
 40167d0:	df000304 	addi	fp,sp,12
 40167d4:	e13ffe15 	stw	r4,-8(fp)
 40167d8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40167dc:	e0bffe17 	ldw	r2,-8(fp)
 40167e0:	10800317 	ldw	r2,12(r2)
 40167e4:	10800404 	addi	r2,r2,16
 40167e8:	10800037 	ldwio	r2,0(r2)
 40167ec:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 40167f0:	e0fffd17 	ldw	r3,-12(fp)
 40167f4:	00a00434 	movhi	r2,32784
 40167f8:	10bfffc4 	addi	r2,r2,-1
 40167fc:	1884703a 	and	r2,r3,r2
 4016800:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 4016804:	e0bfff17 	ldw	r2,-4(fp)
 4016808:	1004953a 	slli	r2,r2,20
 401680c:	10dffc2c 	andhi	r3,r2,32752
 4016810:	e0bffd17 	ldw	r2,-12(fp)
 4016814:	1884b03a 	or	r2,r3,r2
 4016818:	10800134 	orhi	r2,r2,4
 401681c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016820:	e0bffe17 	ldw	r2,-8(fp)
 4016824:	10800317 	ldw	r2,12(r2)
 4016828:	10800404 	addi	r2,r2,16
 401682c:	e0fffd17 	ldw	r3,-12(fp)
 4016830:	10c00035 	stwio	r3,0(r2)
  
  return;
}
 4016834:	e037883a 	mov	sp,fp
 4016838:	df000017 	ldw	fp,0(sp)
 401683c:	dec00104 	addi	sp,sp,4
 4016840:	f800283a 	ret

04016844 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 4016844:	defffd04 	addi	sp,sp,-12
 4016848:	df000215 	stw	fp,8(sp)
 401684c:	df000204 	addi	fp,sp,8
 4016850:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016854:	e0bfff17 	ldw	r2,-4(fp)
 4016858:	10800317 	ldw	r2,12(r2)
 401685c:	10800404 	addi	r2,r2,16
 4016860:	10800037 	ldwio	r2,0(r2)
 4016864:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 4016868:	e0fffe17 	ldw	r3,-8(fp)
 401686c:	00bfff34 	movhi	r2,65532
 4016870:	10bfffc4 	addi	r2,r2,-1
 4016874:	1884703a 	and	r2,r3,r2
 4016878:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 401687c:	e0bfff17 	ldw	r2,-4(fp)
 4016880:	10800317 	ldw	r2,12(r2)
 4016884:	10800404 	addi	r2,r2,16
 4016888:	e0fffe17 	ldw	r3,-8(fp)
 401688c:	10c00035 	stwio	r3,0(r2)
  
  return;
}
 4016890:	e037883a 	mov	sp,fp
 4016894:	df000017 	ldw	fp,0(sp)
 4016898:	dec00104 	addi	sp,sp,4
 401689c:	f800283a 	ret

040168a0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 40168a0:	defff204 	addi	sp,sp,-56
 40168a4:	dfc00d15 	stw	ra,52(sp)
 40168a8:	df000c15 	stw	fp,48(sp)
 40168ac:	df000c04 	addi	fp,sp,48
 40168b0:	e13ff415 	stw	r4,-48(fp)
 40168b4:	e17ff515 	stw	r5,-44(fp)
 40168b8:	e1bff615 	stw	r6,-40(fp)
 40168bc:	e1fff715 	stw	r7,-36(fp)
 40168c0:	e0800217 	ldw	r2,8(fp)
 40168c4:	e0c00817 	ldw	r3,32(fp)
 40168c8:	e0bff80d 	sth	r2,-32(fp)
 40168cc:	e0fff905 	stb	r3,-28(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 40168d0:	e0bff517 	ldw	r2,-44(fp)
 40168d4:	110007c4 	addi	r4,r2,31
 40168d8:	e0bff517 	ldw	r2,-44(fp)
 40168dc:	108007c3 	ldbu	r2,31(r2)
 40168e0:	10c03fcc 	andi	r3,r2,255
 40168e4:	00bfdfc4 	movi	r2,-129
 40168e8:	1886703a 	and	r3,r3,r2
 40168ec:	2005883a 	mov	r2,r4
 40168f0:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 40168f4:	e13ff417 	ldw	r4,-48(fp)
 40168f8:	e0bff617 	ldw	r2,-40(fp)
 40168fc:	11403fcc 	andi	r5,r2,255
 4016900:	20800003 	ldbu	r2,0(r4)
 4016904:	1004703a 	and	r2,r2,zero
 4016908:	1007883a 	mov	r3,r2
 401690c:	2805883a 	mov	r2,r5
 4016910:	1884b03a 	or	r2,r3,r2
 4016914:	20800005 	stb	r2,0(r4)
 4016918:	e0bff617 	ldw	r2,-40(fp)
 401691c:	1004d23a 	srli	r2,r2,8
 4016920:	11403fcc 	andi	r5,r2,255
 4016924:	20800043 	ldbu	r2,1(r4)
 4016928:	1004703a 	and	r2,r2,zero
 401692c:	1007883a 	mov	r3,r2
 4016930:	2805883a 	mov	r2,r5
 4016934:	1884b03a 	or	r2,r3,r2
 4016938:	20800045 	stb	r2,1(r4)
 401693c:	e0bff617 	ldw	r2,-40(fp)
 4016940:	1004d43a 	srli	r2,r2,16
 4016944:	11403fcc 	andi	r5,r2,255
 4016948:	20800083 	ldbu	r2,2(r4)
 401694c:	1004703a 	and	r2,r2,zero
 4016950:	1007883a 	mov	r3,r2
 4016954:	2805883a 	mov	r2,r5
 4016958:	1884b03a 	or	r2,r3,r2
 401695c:	20800085 	stb	r2,2(r4)
 4016960:	e0bff617 	ldw	r2,-40(fp)
 4016964:	100ad63a 	srli	r5,r2,24
 4016968:	208000c3 	ldbu	r2,3(r4)
 401696c:	1004703a 	and	r2,r2,zero
 4016970:	1007883a 	mov	r3,r2
 4016974:	2805883a 	mov	r2,r5
 4016978:	1884b03a 	or	r2,r3,r2
 401697c:	208000c5 	stb	r2,3(r4)
  desc->write_addr               = write_addr;
 4016980:	e13ff417 	ldw	r4,-48(fp)
 4016984:	e0bff717 	ldw	r2,-36(fp)
 4016988:	11403fcc 	andi	r5,r2,255
 401698c:	20800203 	ldbu	r2,8(r4)
 4016990:	1004703a 	and	r2,r2,zero
 4016994:	1007883a 	mov	r3,r2
 4016998:	2805883a 	mov	r2,r5
 401699c:	1884b03a 	or	r2,r3,r2
 40169a0:	20800205 	stb	r2,8(r4)
 40169a4:	e0bff717 	ldw	r2,-36(fp)
 40169a8:	1004d23a 	srli	r2,r2,8
 40169ac:	11403fcc 	andi	r5,r2,255
 40169b0:	20800243 	ldbu	r2,9(r4)
 40169b4:	1004703a 	and	r2,r2,zero
 40169b8:	1007883a 	mov	r3,r2
 40169bc:	2805883a 	mov	r2,r5
 40169c0:	1884b03a 	or	r2,r3,r2
 40169c4:	20800245 	stb	r2,9(r4)
 40169c8:	e0bff717 	ldw	r2,-36(fp)
 40169cc:	1004d43a 	srli	r2,r2,16
 40169d0:	11403fcc 	andi	r5,r2,255
 40169d4:	20800283 	ldbu	r2,10(r4)
 40169d8:	1004703a 	and	r2,r2,zero
 40169dc:	1007883a 	mov	r3,r2
 40169e0:	2805883a 	mov	r2,r5
 40169e4:	1884b03a 	or	r2,r3,r2
 40169e8:	20800285 	stb	r2,10(r4)
 40169ec:	e0bff717 	ldw	r2,-36(fp)
 40169f0:	100ad63a 	srli	r5,r2,24
 40169f4:	208002c3 	ldbu	r2,11(r4)
 40169f8:	1004703a 	and	r2,r2,zero
 40169fc:	1007883a 	mov	r3,r2
 4016a00:	2805883a 	mov	r2,r5
 4016a04:	1884b03a 	or	r2,r3,r2
 4016a08:	208002c5 	stb	r2,11(r4)
  desc->next                     = (alt_u32 *) next;
 4016a0c:	e1bff517 	ldw	r6,-44(fp)
 4016a10:	e13ff417 	ldw	r4,-48(fp)
 4016a14:	31403fcc 	andi	r5,r6,255
 4016a18:	20800403 	ldbu	r2,16(r4)
 4016a1c:	1004703a 	and	r2,r2,zero
 4016a20:	1007883a 	mov	r3,r2
 4016a24:	2805883a 	mov	r2,r5
 4016a28:	1884b03a 	or	r2,r3,r2
 4016a2c:	20800405 	stb	r2,16(r4)
 4016a30:	3004d23a 	srli	r2,r6,8
 4016a34:	11403fcc 	andi	r5,r2,255
 4016a38:	20800443 	ldbu	r2,17(r4)
 4016a3c:	1004703a 	and	r2,r2,zero
 4016a40:	1007883a 	mov	r3,r2
 4016a44:	2805883a 	mov	r2,r5
 4016a48:	1884b03a 	or	r2,r3,r2
 4016a4c:	20800445 	stb	r2,17(r4)
 4016a50:	3004d43a 	srli	r2,r6,16
 4016a54:	11403fcc 	andi	r5,r2,255
 4016a58:	20800483 	ldbu	r2,18(r4)
 4016a5c:	1004703a 	and	r2,r2,zero
 4016a60:	1007883a 	mov	r3,r2
 4016a64:	2805883a 	mov	r2,r5
 4016a68:	1884b03a 	or	r2,r3,r2
 4016a6c:	20800485 	stb	r2,18(r4)
 4016a70:	300ad63a 	srli	r5,r6,24
 4016a74:	208004c3 	ldbu	r2,19(r4)
 4016a78:	1004703a 	and	r2,r2,zero
 4016a7c:	1007883a 	mov	r3,r2
 4016a80:	2805883a 	mov	r2,r5
 4016a84:	1884b03a 	or	r2,r3,r2
 4016a88:	208004c5 	stb	r2,19(r4)
  desc->read_addr_pad            = 0x0;
 4016a8c:	e0fff417 	ldw	r3,-48(fp)
 4016a90:	18800103 	ldbu	r2,4(r3)
 4016a94:	1004703a 	and	r2,r2,zero
 4016a98:	18800105 	stb	r2,4(r3)
 4016a9c:	18800143 	ldbu	r2,5(r3)
 4016aa0:	1004703a 	and	r2,r2,zero
 4016aa4:	18800145 	stb	r2,5(r3)
 4016aa8:	18800183 	ldbu	r2,6(r3)
 4016aac:	1004703a 	and	r2,r2,zero
 4016ab0:	18800185 	stb	r2,6(r3)
 4016ab4:	188001c3 	ldbu	r2,7(r3)
 4016ab8:	1004703a 	and	r2,r2,zero
 4016abc:	188001c5 	stb	r2,7(r3)
  desc->write_addr_pad           = 0x0;
 4016ac0:	e0fff417 	ldw	r3,-48(fp)
 4016ac4:	18800303 	ldbu	r2,12(r3)
 4016ac8:	1004703a 	and	r2,r2,zero
 4016acc:	18800305 	stb	r2,12(r3)
 4016ad0:	18800343 	ldbu	r2,13(r3)
 4016ad4:	1004703a 	and	r2,r2,zero
 4016ad8:	18800345 	stb	r2,13(r3)
 4016adc:	18800383 	ldbu	r2,14(r3)
 4016ae0:	1004703a 	and	r2,r2,zero
 4016ae4:	18800385 	stb	r2,14(r3)
 4016ae8:	188003c3 	ldbu	r2,15(r3)
 4016aec:	1004703a 	and	r2,r2,zero
 4016af0:	188003c5 	stb	r2,15(r3)
  desc->next_pad                 = 0x0;
 4016af4:	e0fff417 	ldw	r3,-48(fp)
 4016af8:	18800503 	ldbu	r2,20(r3)
 4016afc:	1004703a 	and	r2,r2,zero
 4016b00:	18800505 	stb	r2,20(r3)
 4016b04:	18800543 	ldbu	r2,21(r3)
 4016b08:	1004703a 	and	r2,r2,zero
 4016b0c:	18800545 	stb	r2,21(r3)
 4016b10:	18800583 	ldbu	r2,22(r3)
 4016b14:	1004703a 	and	r2,r2,zero
 4016b18:	18800585 	stb	r2,22(r3)
 4016b1c:	188005c3 	ldbu	r2,23(r3)
 4016b20:	1004703a 	and	r2,r2,zero
 4016b24:	188005c5 	stb	r2,23(r3)
  desc->bytes_to_transfer        = length_or_eop;
 4016b28:	e13ff417 	ldw	r4,-48(fp)
 4016b2c:	e0bff80b 	ldhu	r2,-32(fp)
 4016b30:	11403fcc 	andi	r5,r2,255
 4016b34:	20800603 	ldbu	r2,24(r4)
 4016b38:	1004703a 	and	r2,r2,zero
 4016b3c:	1007883a 	mov	r3,r2
 4016b40:	2805883a 	mov	r2,r5
 4016b44:	1884b03a 	or	r2,r3,r2
 4016b48:	20800605 	stb	r2,24(r4)
 4016b4c:	e0bff80b 	ldhu	r2,-32(fp)
 4016b50:	1004d23a 	srli	r2,r2,8
 4016b54:	117fffcc 	andi	r5,r2,65535
 4016b58:	20800643 	ldbu	r2,25(r4)
 4016b5c:	1004703a 	and	r2,r2,zero
 4016b60:	1007883a 	mov	r3,r2
 4016b64:	2805883a 	mov	r2,r5
 4016b68:	1884b03a 	or	r2,r3,r2
 4016b6c:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
 4016b70:	e0fff417 	ldw	r3,-48(fp)
 4016b74:	18800703 	ldbu	r2,28(r3)
 4016b78:	1004703a 	and	r2,r2,zero
 4016b7c:	18800705 	stb	r2,28(r3)
 4016b80:	18800743 	ldbu	r2,29(r3)
 4016b84:	1004703a 	and	r2,r2,zero
 4016b88:	18800745 	stb	r2,29(r3)
  desc->status                   = 0x0;
 4016b8c:	e0bff417 	ldw	r2,-48(fp)
 4016b90:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 4016b94:	e0800617 	ldw	r2,24(fp)
 4016b98:	1007883a 	mov	r3,r2
 4016b9c:	e0bff417 	ldw	r2,-48(fp)
 4016ba0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 4016ba4:	e0800717 	ldw	r2,28(fp)
 4016ba8:	1007883a 	mov	r3,r2
 4016bac:	e0bff417 	ldw	r2,-48(fp)
 4016bb0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4016bb4:	e0800317 	ldw	r2,12(fp)
 4016bb8:	1005003a 	cmpeq	r2,r2,zero
 4016bbc:	1000031e 	bne	r2,zero,4016bcc <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 4016bc0:	00bfe044 	movi	r2,-127
 4016bc4:	e0bfff05 	stb	r2,-4(fp)
 4016bc8:	00000206 	br	4016bd4 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
 4016bcc:	00bfe004 	movi	r2,-128
 4016bd0:	e0bfff05 	stb	r2,-4(fp)
 4016bd4:	e0800417 	ldw	r2,16(fp)
 4016bd8:	1005003a 	cmpeq	r2,r2,zero
 4016bdc:	1000031e 	bne	r2,zero,4016bec <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
 4016be0:	00800084 	movi	r2,2
 4016be4:	e0bffe05 	stb	r2,-8(fp)
 4016be8:	00000106 	br	4016bf0 <alt_avalon_sgdma_construct_descriptor_burst+0x350>
 4016bec:	e03ffe05 	stb	zero,-8(fp)
 4016bf0:	e0ffff03 	ldbu	r3,-4(fp)
 4016bf4:	e13ffe03 	ldbu	r4,-8(fp)
 4016bf8:	1904b03a 	or	r2,r3,r4
 4016bfc:	e0bffd05 	stb	r2,-12(fp)
 4016c00:	e0800517 	ldw	r2,20(fp)
 4016c04:	1005003a 	cmpeq	r2,r2,zero
 4016c08:	1000031e 	bne	r2,zero,4016c18 <alt_avalon_sgdma_construct_descriptor_burst+0x378>
 4016c0c:	00800104 	movi	r2,4
 4016c10:	e0bffc05 	stb	r2,-16(fp)
 4016c14:	00000106 	br	4016c1c <alt_avalon_sgdma_construct_descriptor_burst+0x37c>
 4016c18:	e03ffc05 	stb	zero,-16(fp)
 4016c1c:	e0fffd03 	ldbu	r3,-12(fp)
 4016c20:	e13ffc03 	ldbu	r4,-16(fp)
 4016c24:	1904b03a 	or	r2,r3,r4
 4016c28:	e0bffb05 	stb	r2,-20(fp)
 4016c2c:	e0bff903 	ldbu	r2,-28(fp)
 4016c30:	1005003a 	cmpeq	r2,r2,zero
 4016c34:	1000051e 	bne	r2,zero,4016c4c <alt_avalon_sgdma_construct_descriptor_burst+0x3ac>
 4016c38:	e0bff903 	ldbu	r2,-28(fp)
 4016c3c:	108003cc 	andi	r2,r2,15
 4016c40:	100490fa 	slli	r2,r2,3
 4016c44:	e0bffa05 	stb	r2,-24(fp)
 4016c48:	00000106 	br	4016c50 <alt_avalon_sgdma_construct_descriptor_burst+0x3b0>
 4016c4c:	e03ffa05 	stb	zero,-24(fp)
 4016c50:	e0fffb03 	ldbu	r3,-20(fp)
 4016c54:	e13ffa03 	ldbu	r4,-24(fp)
 4016c58:	1904b03a 	or	r2,r3,r4
 4016c5c:	1007883a 	mov	r3,r2
 4016c60:	e0bff417 	ldw	r2,-48(fp)
 4016c64:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
 4016c68:	e13ff417 	ldw	r4,-48(fp)
 4016c6c:	01400804 	movi	r5,32
 4016c70:	4017ab40 	call	4017ab4 <alt_remap_uncached>
}
 4016c74:	e037883a 	mov	sp,fp
 4016c78:	dfc00117 	ldw	ra,4(sp)
 4016c7c:	df000017 	ldw	fp,0(sp)
 4016c80:	dec00204 	addi	sp,sp,8
 4016c84:	f800283a 	ret

04016c88 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 4016c88:	defff904 	addi	sp,sp,-28
 4016c8c:	dfc00615 	stw	ra,24(sp)
 4016c90:	df000515 	stw	fp,20(sp)
 4016c94:	df000504 	addi	fp,sp,20
 4016c98:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 4016c9c:	e0bfff17 	ldw	r2,-4(fp)
 4016ca0:	e0bffe15 	stw	r2,-8(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4016ca4:	e0bffe17 	ldw	r2,-8(fp)
 4016ca8:	10800317 	ldw	r2,12(r2)
 4016cac:	11000404 	addi	r4,r2,16
 4016cb0:	e0bffe17 	ldw	r2,-8(fp)
 4016cb4:	10800317 	ldw	r2,12(r2)
 4016cb8:	10800404 	addi	r2,r2,16
 4016cbc:	10800037 	ldwio	r2,0(r2)
 4016cc0:	10a00034 	orhi	r2,r2,32768
 4016cc4:	1007883a 	mov	r3,r2
 4016cc8:	2005883a 	mov	r2,r4
 4016ccc:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016cd0:	e0bffe17 	ldw	r2,-8(fp)
 4016cd4:	10800317 	ldw	r2,12(r2)
 4016cd8:	10800404 	addi	r2,r2,16
 4016cdc:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 4016ce0:	e0bffe17 	ldw	r2,-8(fp)
 4016ce4:	10800917 	ldw	r2,36(r2)
 4016ce8:	1005003a 	cmpeq	r2,r2,zero
 4016cec:	1000111e 	bne	r2,zero,4016d34 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016cf0:	0005303a 	rdctl	r2,status
 4016cf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016cf8:	e0fffc17 	ldw	r3,-16(fp)
 4016cfc:	00bfff84 	movi	r2,-2
 4016d00:	1884703a 	and	r2,r3,r2
 4016d04:	1001703a 	wrctl	status,r2
  
  return context;
 4016d08:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
 4016d0c:	e0bffd15 	stw	r2,-12(fp)
    (dev->callback)(dev->callback_context);
 4016d10:	e0bffe17 	ldw	r2,-8(fp)
 4016d14:	10c00917 	ldw	r3,36(r2)
 4016d18:	e0bffe17 	ldw	r2,-8(fp)
 4016d1c:	11000a17 	ldw	r4,40(r2)
 4016d20:	183ee83a 	callr	r3
 4016d24:	e0bffd17 	ldw	r2,-12(fp)
 4016d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016d2c:	e0bffb17 	ldw	r2,-20(fp)
 4016d30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 4016d34:	e037883a 	mov	sp,fp
 4016d38:	dfc00117 	ldw	ra,4(sp)
 4016d3c:	df000017 	ldw	fp,0(sp)
 4016d40:	dec00204 	addi	sp,sp,8
 4016d44:	f800283a 	ret

04016d48 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4016d48:	defffa04 	addi	sp,sp,-24
 4016d4c:	dfc00515 	stw	ra,20(sp)
 4016d50:	df000415 	stw	fp,16(sp)
 4016d54:	df000404 	addi	fp,sp,16
 4016d58:	e13ffd15 	stw	r4,-12(fp)
 4016d5c:	e17ffe15 	stw	r5,-8(fp)
 4016d60:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016d64:	e0bffd17 	ldw	r2,-12(fp)
 4016d68:	10800317 	ldw	r2,12(r2)
 4016d6c:	10800404 	addi	r2,r2,16
 4016d70:	1007883a 	mov	r3,r2
 4016d74:	00800074 	movhi	r2,1
 4016d78:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016d7c:	e0bffd17 	ldw	r2,-12(fp)
 4016d80:	10800317 	ldw	r2,12(r2)
 4016d84:	10800404 	addi	r2,r2,16
 4016d88:	1007883a 	mov	r3,r2
 4016d8c:	00800074 	movhi	r2,1
 4016d90:	18800035 	stwio	r2,0(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 4016d94:	e0bffd17 	ldw	r2,-12(fp)
 4016d98:	10800317 	ldw	r2,12(r2)
 4016d9c:	10800404 	addi	r2,r2,16
 4016da0:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016da4:	e0bffd17 	ldw	r2,-12(fp)
 4016da8:	10800317 	ldw	r2,12(r2)
 4016dac:	1007883a 	mov	r3,r2
 4016db0:	00803fc4 	movi	r2,255
 4016db4:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 4016db8:	e13ffd17 	ldw	r4,-12(fp)
 4016dbc:	d1600704 	addi	r5,gp,-32740
 4016dc0:	401709c0 	call	401709c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 4016dc4:	d8000015 	stw	zero,0(sp)
 4016dc8:	e13ffe17 	ldw	r4,-8(fp)
 4016dcc:	e17fff17 	ldw	r5,-4(fp)
 4016dd0:	01810074 	movhi	r6,1025
 4016dd4:	319b2204 	addi	r6,r6,27784
 4016dd8:	e1fffd17 	ldw	r7,-12(fp)
 4016ddc:	401733c0 	call	401733c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 4016de0:	e037883a 	mov	sp,fp
 4016de4:	dfc00117 	ldw	ra,4(sp)
 4016de8:	df000017 	ldw	fp,0(sp)
 4016dec:	dec00204 	addi	sp,sp,8
 4016df0:	f800283a 	ret

04016df4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4016df4:	defffa04 	addi	sp,sp,-24
 4016df8:	dfc00515 	stw	ra,20(sp)
 4016dfc:	df000415 	stw	fp,16(sp)
 4016e00:	df000404 	addi	fp,sp,16
 4016e04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4016e08:	e0bfff17 	ldw	r2,-4(fp)
 4016e0c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4016e10:	e0bfff17 	ldw	r2,-4(fp)
 4016e14:	10800104 	addi	r2,r2,4
 4016e18:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016e1c:	0005303a 	rdctl	r2,status
 4016e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016e24:	e0fffd17 	ldw	r3,-12(fp)
 4016e28:	00bfff84 	movi	r2,-2
 4016e2c:	1884703a 	and	r2,r3,r2
 4016e30:	1001703a 	wrctl	status,r2
  
  return context;
 4016e34:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4016e38:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4016e3c:	4015a600 	call	4015a60 <alt_tick>
 4016e40:	e0bffe17 	ldw	r2,-8(fp)
 4016e44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016e48:	e0bffc17 	ldw	r2,-16(fp)
 4016e4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4016e50:	e037883a 	mov	sp,fp
 4016e54:	dfc00117 	ldw	ra,4(sp)
 4016e58:	df000017 	ldw	fp,0(sp)
 4016e5c:	dec00204 	addi	sp,sp,8
 4016e60:	f800283a 	ret

04016e64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4016e64:	defff804 	addi	sp,sp,-32
 4016e68:	dfc00715 	stw	ra,28(sp)
 4016e6c:	df000615 	stw	fp,24(sp)
 4016e70:	df000604 	addi	fp,sp,24
 4016e74:	e13ffc15 	stw	r4,-16(fp)
 4016e78:	e17ffd15 	stw	r5,-12(fp)
 4016e7c:	e1bffe15 	stw	r6,-8(fp)
 4016e80:	e1ffff15 	stw	r7,-4(fp)
 4016e84:	e0bfff17 	ldw	r2,-4(fp)
 4016e88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4016e8c:	008100b4 	movhi	r2,1026
 4016e90:	10a2b204 	addi	r2,r2,-30008
 4016e94:	10800017 	ldw	r2,0(r2)
 4016e98:	1004c03a 	cmpne	r2,r2,zero
 4016e9c:	1000041e 	bne	r2,zero,4016eb0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4016ea0:	00c100b4 	movhi	r3,1026
 4016ea4:	18e2b204 	addi	r3,r3,-30008
 4016ea8:	e0bffb17 	ldw	r2,-20(fp)
 4016eac:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4016eb0:	e0bffc17 	ldw	r2,-16(fp)
 4016eb4:	10800104 	addi	r2,r2,4
 4016eb8:	1007883a 	mov	r3,r2
 4016ebc:	008001c4 	movi	r2,7
 4016ec0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4016ec4:	d8000015 	stw	zero,0(sp)
 4016ec8:	e13ffd17 	ldw	r4,-12(fp)
 4016ecc:	e17ffe17 	ldw	r5,-8(fp)
 4016ed0:	01810074 	movhi	r6,1025
 4016ed4:	319b7d04 	addi	r6,r6,28148
 4016ed8:	e1fffc17 	ldw	r7,-16(fp)
 4016edc:	401733c0 	call	401733c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4016ee0:	e037883a 	mov	sp,fp
 4016ee4:	dfc00117 	ldw	ra,4(sp)
 4016ee8:	df000017 	ldw	fp,0(sp)
 4016eec:	dec00204 	addi	sp,sp,8
 4016ef0:	f800283a 	ret

04016ef4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4016ef4:	defff804 	addi	sp,sp,-32
 4016ef8:	dfc00715 	stw	ra,28(sp)
 4016efc:	df000615 	stw	fp,24(sp)
 4016f00:	df000604 	addi	fp,sp,24
 4016f04:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4016f08:	e0bffc17 	ldw	r2,-16(fp)
 4016f0c:	1004803a 	cmplt	r2,r2,zero
 4016f10:	1000091e 	bne	r2,zero,4016f38 <close+0x44>
 4016f14:	e13ffc17 	ldw	r4,-16(fp)
 4016f18:	01400304 	movi	r5,12
 4016f1c:	4014cf40 	call	4014cf4 <__mulsi3>
 4016f20:	1007883a 	mov	r3,r2
 4016f24:	008100b4 	movhi	r2,1026
 4016f28:	10a16c04 	addi	r2,r2,-31312
 4016f2c:	1887883a 	add	r3,r3,r2
 4016f30:	e0ffff15 	stw	r3,-4(fp)
 4016f34:	00000106 	br	4016f3c <close+0x48>
 4016f38:	e03fff15 	stw	zero,-4(fp)
 4016f3c:	e0bfff17 	ldw	r2,-4(fp)
 4016f40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4016f44:	e0bffb17 	ldw	r2,-20(fp)
 4016f48:	1005003a 	cmpeq	r2,r2,zero
 4016f4c:	10001d1e 	bne	r2,zero,4016fc4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4016f50:	e0bffb17 	ldw	r2,-20(fp)
 4016f54:	10800017 	ldw	r2,0(r2)
 4016f58:	10800417 	ldw	r2,16(r2)
 4016f5c:	1005003a 	cmpeq	r2,r2,zero
 4016f60:	1000071e 	bne	r2,zero,4016f80 <close+0x8c>
 4016f64:	e0bffb17 	ldw	r2,-20(fp)
 4016f68:	10800017 	ldw	r2,0(r2)
 4016f6c:	10800417 	ldw	r2,16(r2)
 4016f70:	e13ffb17 	ldw	r4,-20(fp)
 4016f74:	103ee83a 	callr	r2
 4016f78:	e0bffe15 	stw	r2,-8(fp)
 4016f7c:	00000106 	br	4016f84 <close+0x90>
 4016f80:	e03ffe15 	stw	zero,-8(fp)
 4016f84:	e0bffe17 	ldw	r2,-8(fp)
 4016f88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4016f8c:	e13ffc17 	ldw	r4,-16(fp)
 4016f90:	4017a3c0 	call	4017a3c <alt_release_fd>
    if (rval < 0)
 4016f94:	e0bffa17 	ldw	r2,-24(fp)
 4016f98:	1004403a 	cmpge	r2,r2,zero
 4016f9c:	1000071e 	bne	r2,zero,4016fbc <close+0xc8>
    {
      ALT_ERRNO = -rval;
 4016fa0:	4016ff40 	call	4016ff4 <alt_get_errno>
 4016fa4:	e0fffa17 	ldw	r3,-24(fp)
 4016fa8:	00c7c83a 	sub	r3,zero,r3
 4016fac:	10c00015 	stw	r3,0(r2)
      return -1;
 4016fb0:	00bfffc4 	movi	r2,-1
 4016fb4:	e0bffd15 	stw	r2,-12(fp)
 4016fb8:	00000806 	br	4016fdc <close+0xe8>
    }
    return 0;
 4016fbc:	e03ffd15 	stw	zero,-12(fp)
 4016fc0:	00000606 	br	4016fdc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4016fc4:	4016ff40 	call	4016ff4 <alt_get_errno>
 4016fc8:	1007883a 	mov	r3,r2
 4016fcc:	00801444 	movi	r2,81
 4016fd0:	18800015 	stw	r2,0(r3)
    return -1;
 4016fd4:	00bfffc4 	movi	r2,-1
 4016fd8:	e0bffd15 	stw	r2,-12(fp)
 4016fdc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4016fe0:	e037883a 	mov	sp,fp
 4016fe4:	dfc00117 	ldw	ra,4(sp)
 4016fe8:	df000017 	ldw	fp,0(sp)
 4016fec:	dec00204 	addi	sp,sp,8
 4016ff0:	f800283a 	ret

04016ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016ff4:	defffd04 	addi	sp,sp,-12
 4016ff8:	dfc00215 	stw	ra,8(sp)
 4016ffc:	df000115 	stw	fp,4(sp)
 4017000:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4017004:	008100b4 	movhi	r2,1026
 4017008:	10a1da04 	addi	r2,r2,-30872
 401700c:	10800017 	ldw	r2,0(r2)
 4017010:	1005003a 	cmpeq	r2,r2,zero
 4017014:	1000061e 	bne	r2,zero,4017030 <alt_get_errno+0x3c>
 4017018:	008100b4 	movhi	r2,1026
 401701c:	10a1da04 	addi	r2,r2,-30872
 4017020:	10800017 	ldw	r2,0(r2)
 4017024:	103ee83a 	callr	r2
 4017028:	e0bfff15 	stw	r2,-4(fp)
 401702c:	00000306 	br	401703c <alt_get_errno+0x48>
 4017030:	008100b4 	movhi	r2,1026
 4017034:	10a2ae04 	addi	r2,r2,-30024
 4017038:	e0bfff15 	stw	r2,-4(fp)
 401703c:	e0bfff17 	ldw	r2,-4(fp)
}
 4017040:	e037883a 	mov	sp,fp
 4017044:	dfc00117 	ldw	ra,4(sp)
 4017048:	df000017 	ldw	fp,0(sp)
 401704c:	dec00204 	addi	sp,sp,8
 4017050:	f800283a 	ret

04017054 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4017054:	deffff04 	addi	sp,sp,-4
 4017058:	df000015 	stw	fp,0(sp)
 401705c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4017060:	e037883a 	mov	sp,fp
 4017064:	df000017 	ldw	fp,0(sp)
 4017068:	dec00104 	addi	sp,sp,4
 401706c:	f800283a 	ret

04017070 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4017070:	defffc04 	addi	sp,sp,-16
 4017074:	df000315 	stw	fp,12(sp)
 4017078:	df000304 	addi	fp,sp,12
 401707c:	e13ffd15 	stw	r4,-12(fp)
 4017080:	e17ffe15 	stw	r5,-8(fp)
 4017084:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4017088:	e0bfff17 	ldw	r2,-4(fp)
}
 401708c:	e037883a 	mov	sp,fp
 4017090:	df000017 	ldw	fp,0(sp)
 4017094:	dec00104 	addi	sp,sp,4
 4017098:	f800283a 	ret

0401709c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401709c:	defff904 	addi	sp,sp,-28
 40170a0:	dfc00615 	stw	ra,24(sp)
 40170a4:	df000515 	stw	fp,20(sp)
 40170a8:	df000504 	addi	fp,sp,20
 40170ac:	e13ffd15 	stw	r4,-12(fp)
 40170b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40170b4:	e0bffd17 	ldw	r2,-12(fp)
 40170b8:	1005003a 	cmpeq	r2,r2,zero
 40170bc:	1000041e 	bne	r2,zero,40170d0 <alt_dev_llist_insert+0x34>
 40170c0:	e0bffd17 	ldw	r2,-12(fp)
 40170c4:	10800217 	ldw	r2,8(r2)
 40170c8:	1004c03a 	cmpne	r2,r2,zero
 40170cc:	1000071e 	bne	r2,zero,40170ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 40170d0:	40171500 	call	4017150 <alt_get_errno>
 40170d4:	1007883a 	mov	r3,r2
 40170d8:	00800584 	movi	r2,22
 40170dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40170e0:	00bffa84 	movi	r2,-22
 40170e4:	e0bfff15 	stw	r2,-4(fp)
 40170e8:	00001306 	br	4017138 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40170ec:	e0fffd17 	ldw	r3,-12(fp)
 40170f0:	e0bffe17 	ldw	r2,-8(fp)
 40170f4:	e0bffb15 	stw	r2,-20(fp)
 40170f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40170fc:	e0fffc17 	ldw	r3,-16(fp)
 4017100:	e0bffb17 	ldw	r2,-20(fp)
 4017104:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4017108:	e0bffb17 	ldw	r2,-20(fp)
 401710c:	10c00017 	ldw	r3,0(r2)
 4017110:	e0bffc17 	ldw	r2,-16(fp)
 4017114:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4017118:	e0bffb17 	ldw	r2,-20(fp)
 401711c:	10c00017 	ldw	r3,0(r2)
 4017120:	e0bffc17 	ldw	r2,-16(fp)
 4017124:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4017128:	e0fffb17 	ldw	r3,-20(fp)
 401712c:	e0bffc17 	ldw	r2,-16(fp)
 4017130:	18800015 	stw	r2,0(r3)

  return 0;  
 4017134:	e03fff15 	stw	zero,-4(fp)
 4017138:	e0bfff17 	ldw	r2,-4(fp)
}
 401713c:	e037883a 	mov	sp,fp
 4017140:	dfc00117 	ldw	ra,4(sp)
 4017144:	df000017 	ldw	fp,0(sp)
 4017148:	dec00204 	addi	sp,sp,8
 401714c:	f800283a 	ret

04017150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017150:	defffd04 	addi	sp,sp,-12
 4017154:	dfc00215 	stw	ra,8(sp)
 4017158:	df000115 	stw	fp,4(sp)
 401715c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4017160:	008100b4 	movhi	r2,1026
 4017164:	10a1da04 	addi	r2,r2,-30872
 4017168:	10800017 	ldw	r2,0(r2)
 401716c:	1005003a 	cmpeq	r2,r2,zero
 4017170:	1000061e 	bne	r2,zero,401718c <alt_get_errno+0x3c>
 4017174:	008100b4 	movhi	r2,1026
 4017178:	10a1da04 	addi	r2,r2,-30872
 401717c:	10800017 	ldw	r2,0(r2)
 4017180:	103ee83a 	callr	r2
 4017184:	e0bfff15 	stw	r2,-4(fp)
 4017188:	00000306 	br	4017198 <alt_get_errno+0x48>
 401718c:	008100b4 	movhi	r2,1026
 4017190:	10a2ae04 	addi	r2,r2,-30024
 4017194:	e0bfff15 	stw	r2,-4(fp)
 4017198:	e0bfff17 	ldw	r2,-4(fp)
}
 401719c:	e037883a 	mov	sp,fp
 40171a0:	dfc00117 	ldw	ra,4(sp)
 40171a4:	df000017 	ldw	fp,0(sp)
 40171a8:	dec00204 	addi	sp,sp,8
 40171ac:	f800283a 	ret

040171b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40171b0:	defffd04 	addi	sp,sp,-12
 40171b4:	dfc00215 	stw	ra,8(sp)
 40171b8:	df000115 	stw	fp,4(sp)
 40171bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40171c0:	00bfff04 	movi	r2,-4
 40171c4:	00c100b4 	movhi	r3,1026
 40171c8:	18e0a504 	addi	r3,r3,-32108
 40171cc:	1885883a 	add	r2,r3,r2
 40171d0:	e0bfff15 	stw	r2,-4(fp)
 40171d4:	00000606 	br	40171f0 <_do_ctors+0x40>
        (*ctor) (); 
 40171d8:	e0bfff17 	ldw	r2,-4(fp)
 40171dc:	10800017 	ldw	r2,0(r2)
 40171e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40171e4:	e0bfff17 	ldw	r2,-4(fp)
 40171e8:	10bfff04 	addi	r2,r2,-4
 40171ec:	e0bfff15 	stw	r2,-4(fp)
 40171f0:	e0ffff17 	ldw	r3,-4(fp)
 40171f4:	008100b4 	movhi	r2,1026
 40171f8:	10a0a404 	addi	r2,r2,-32112
 40171fc:	18bff62e 	bgeu	r3,r2,40171d8 <_do_ctors+0x28>
        (*ctor) (); 
}
 4017200:	e037883a 	mov	sp,fp
 4017204:	dfc00117 	ldw	ra,4(sp)
 4017208:	df000017 	ldw	fp,0(sp)
 401720c:	dec00204 	addi	sp,sp,8
 4017210:	f800283a 	ret

04017214 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4017214:	defffd04 	addi	sp,sp,-12
 4017218:	dfc00215 	stw	ra,8(sp)
 401721c:	df000115 	stw	fp,4(sp)
 4017220:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4017224:	00bfff04 	movi	r2,-4
 4017228:	00c100b4 	movhi	r3,1026
 401722c:	18e0a504 	addi	r3,r3,-32108
 4017230:	1885883a 	add	r2,r3,r2
 4017234:	e0bfff15 	stw	r2,-4(fp)
 4017238:	00000606 	br	4017254 <_do_dtors+0x40>
        (*dtor) (); 
 401723c:	e0bfff17 	ldw	r2,-4(fp)
 4017240:	10800017 	ldw	r2,0(r2)
 4017244:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4017248:	e0bfff17 	ldw	r2,-4(fp)
 401724c:	10bfff04 	addi	r2,r2,-4
 4017250:	e0bfff15 	stw	r2,-4(fp)
 4017254:	e0ffff17 	ldw	r3,-4(fp)
 4017258:	008100b4 	movhi	r2,1026
 401725c:	10a0a504 	addi	r2,r2,-32108
 4017260:	18bff62e 	bgeu	r3,r2,401723c <_do_dtors+0x28>
        (*dtor) (); 
}
 4017264:	e037883a 	mov	sp,fp
 4017268:	dfc00117 	ldw	ra,4(sp)
 401726c:	df000017 	ldw	fp,0(sp)
 4017270:	dec00204 	addi	sp,sp,8
 4017274:	f800283a 	ret

04017278 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4017278:	defff904 	addi	sp,sp,-28
 401727c:	dfc00615 	stw	ra,24(sp)
 4017280:	df000515 	stw	fp,20(sp)
 4017284:	df000504 	addi	fp,sp,20
 4017288:	e13ffd15 	stw	r4,-12(fp)
 401728c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4017290:	e0bffe17 	ldw	r2,-8(fp)
 4017294:	10800017 	ldw	r2,0(r2)
 4017298:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401729c:	e13ffd17 	ldw	r4,-12(fp)
 40172a0:	4014e880 	call	4014e88 <strlen>
 40172a4:	10800044 	addi	r2,r2,1
 40172a8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40172ac:	00000d06 	br	40172e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40172b0:	e0bffc17 	ldw	r2,-16(fp)
 40172b4:	11000217 	ldw	r4,8(r2)
 40172b8:	e1bffb17 	ldw	r6,-20(fp)
 40172bc:	e17ffd17 	ldw	r5,-12(fp)
 40172c0:	4017ec80 	call	4017ec8 <memcmp>
 40172c4:	1004c03a 	cmpne	r2,r2,zero
 40172c8:	1000031e 	bne	r2,zero,40172d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40172cc:	e0bffc17 	ldw	r2,-16(fp)
 40172d0:	e0bfff15 	stw	r2,-4(fp)
 40172d4:	00000706 	br	40172f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40172d8:	e0bffc17 	ldw	r2,-16(fp)
 40172dc:	10800017 	ldw	r2,0(r2)
 40172e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40172e4:	e0fffe17 	ldw	r3,-8(fp)
 40172e8:	e0bffc17 	ldw	r2,-16(fp)
 40172ec:	10fff01e 	bne	r2,r3,40172b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40172f0:	e03fff15 	stw	zero,-4(fp)
 40172f4:	e0bfff17 	ldw	r2,-4(fp)
}
 40172f8:	e037883a 	mov	sp,fp
 40172fc:	dfc00117 	ldw	ra,4(sp)
 4017300:	df000017 	ldw	fp,0(sp)
 4017304:	dec00204 	addi	sp,sp,8
 4017308:	f800283a 	ret

0401730c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401730c:	defffe04 	addi	sp,sp,-8
 4017310:	dfc00115 	stw	ra,4(sp)
 4017314:	df000015 	stw	fp,0(sp)
 4017318:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 401731c:	0009883a 	mov	r4,zero
 4017320:	01420004 	movi	r5,2048
 4017324:	4017d280 	call	4017d28 <alt_icache_flush>
#endif
}
 4017328:	e037883a 	mov	sp,fp
 401732c:	dfc00117 	ldw	ra,4(sp)
 4017330:	df000017 	ldw	fp,0(sp)
 4017334:	dec00204 	addi	sp,sp,8
 4017338:	f800283a 	ret

0401733c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401733c:	defff904 	addi	sp,sp,-28
 4017340:	dfc00615 	stw	ra,24(sp)
 4017344:	df000515 	stw	fp,20(sp)
 4017348:	df000504 	addi	fp,sp,20
 401734c:	e13ffc15 	stw	r4,-16(fp)
 4017350:	e17ffd15 	stw	r5,-12(fp)
 4017354:	e1bffe15 	stw	r6,-8(fp)
 4017358:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401735c:	e0800217 	ldw	r2,8(fp)
 4017360:	d8800015 	stw	r2,0(sp)
 4017364:	e13ffc17 	ldw	r4,-16(fp)
 4017368:	e17ffd17 	ldw	r5,-12(fp)
 401736c:	e1bffe17 	ldw	r6,-8(fp)
 4017370:	e1ffff17 	ldw	r7,-4(fp)
 4017374:	40175100 	call	4017510 <alt_iic_isr_register>
}  
 4017378:	e037883a 	mov	sp,fp
 401737c:	dfc00117 	ldw	ra,4(sp)
 4017380:	df000017 	ldw	fp,0(sp)
 4017384:	dec00204 	addi	sp,sp,8
 4017388:	f800283a 	ret

0401738c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401738c:	defff904 	addi	sp,sp,-28
 4017390:	df000615 	stw	fp,24(sp)
 4017394:	df000604 	addi	fp,sp,24
 4017398:	e13ffe15 	stw	r4,-8(fp)
 401739c:	e17fff15 	stw	r5,-4(fp)
 40173a0:	e0bfff17 	ldw	r2,-4(fp)
 40173a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40173a8:	0005303a 	rdctl	r2,status
 40173ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40173b0:	e0fffb17 	ldw	r3,-20(fp)
 40173b4:	00bfff84 	movi	r2,-2
 40173b8:	1884703a 	and	r2,r3,r2
 40173bc:	1001703a 	wrctl	status,r2
  
  return context;
 40173c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40173c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 40173c8:	e0fffc17 	ldw	r3,-16(fp)
 40173cc:	00800044 	movi	r2,1
 40173d0:	10c4983a 	sll	r2,r2,r3
 40173d4:	1007883a 	mov	r3,r2
 40173d8:	008100b4 	movhi	r2,1026
 40173dc:	10a2b404 	addi	r2,r2,-30000
 40173e0:	10800017 	ldw	r2,0(r2)
 40173e4:	1886b03a 	or	r3,r3,r2
 40173e8:	008100b4 	movhi	r2,1026
 40173ec:	10a2b404 	addi	r2,r2,-30000
 40173f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40173f4:	008100b4 	movhi	r2,1026
 40173f8:	10a2b404 	addi	r2,r2,-30000
 40173fc:	10800017 	ldw	r2,0(r2)
 4017400:	100170fa 	wrctl	ienable,r2
 4017404:	e0bffd17 	ldw	r2,-12(fp)
 4017408:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401740c:	e0bffa17 	ldw	r2,-24(fp)
 4017410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4017414:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4017418:	e037883a 	mov	sp,fp
 401741c:	df000017 	ldw	fp,0(sp)
 4017420:	dec00104 	addi	sp,sp,4
 4017424:	f800283a 	ret

04017428 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4017428:	defff904 	addi	sp,sp,-28
 401742c:	df000615 	stw	fp,24(sp)
 4017430:	df000604 	addi	fp,sp,24
 4017434:	e13ffe15 	stw	r4,-8(fp)
 4017438:	e17fff15 	stw	r5,-4(fp)
 401743c:	e0bfff17 	ldw	r2,-4(fp)
 4017440:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017444:	0005303a 	rdctl	r2,status
 4017448:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401744c:	e0fffb17 	ldw	r3,-20(fp)
 4017450:	00bfff84 	movi	r2,-2
 4017454:	1884703a 	and	r2,r3,r2
 4017458:	1001703a 	wrctl	status,r2
  
  return context;
 401745c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4017460:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4017464:	e0fffc17 	ldw	r3,-16(fp)
 4017468:	00800044 	movi	r2,1
 401746c:	10c4983a 	sll	r2,r2,r3
 4017470:	0084303a 	nor	r2,zero,r2
 4017474:	1007883a 	mov	r3,r2
 4017478:	008100b4 	movhi	r2,1026
 401747c:	10a2b404 	addi	r2,r2,-30000
 4017480:	10800017 	ldw	r2,0(r2)
 4017484:	1886703a 	and	r3,r3,r2
 4017488:	008100b4 	movhi	r2,1026
 401748c:	10a2b404 	addi	r2,r2,-30000
 4017490:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4017494:	008100b4 	movhi	r2,1026
 4017498:	10a2b404 	addi	r2,r2,-30000
 401749c:	10800017 	ldw	r2,0(r2)
 40174a0:	100170fa 	wrctl	ienable,r2
 40174a4:	e0bffd17 	ldw	r2,-12(fp)
 40174a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40174ac:	e0bffa17 	ldw	r2,-24(fp)
 40174b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40174b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 40174b8:	e037883a 	mov	sp,fp
 40174bc:	df000017 	ldw	fp,0(sp)
 40174c0:	dec00104 	addi	sp,sp,4
 40174c4:	f800283a 	ret

040174c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40174c8:	defffc04 	addi	sp,sp,-16
 40174cc:	df000315 	stw	fp,12(sp)
 40174d0:	df000304 	addi	fp,sp,12
 40174d4:	e13ffe15 	stw	r4,-8(fp)
 40174d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40174dc:	000530fa 	rdctl	r2,ienable
 40174e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40174e4:	e0ffff17 	ldw	r3,-4(fp)
 40174e8:	00800044 	movi	r2,1
 40174ec:	10c4983a 	sll	r2,r2,r3
 40174f0:	1007883a 	mov	r3,r2
 40174f4:	e0bffd17 	ldw	r2,-12(fp)
 40174f8:	1884703a 	and	r2,r3,r2
 40174fc:	1004c03a 	cmpne	r2,r2,zero
}
 4017500:	e037883a 	mov	sp,fp
 4017504:	df000017 	ldw	fp,0(sp)
 4017508:	dec00104 	addi	sp,sp,4
 401750c:	f800283a 	ret

04017510 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4017510:	defff404 	addi	sp,sp,-48
 4017514:	dfc00b15 	stw	ra,44(sp)
 4017518:	df000a15 	stw	fp,40(sp)
 401751c:	df000a04 	addi	fp,sp,40
 4017520:	e13ffb15 	stw	r4,-20(fp)
 4017524:	e17ffc15 	stw	r5,-16(fp)
 4017528:	e1bffd15 	stw	r6,-12(fp)
 401752c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4017530:	00bffa84 	movi	r2,-22
 4017534:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4017538:	e0bffc17 	ldw	r2,-16(fp)
 401753c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4017540:	e0bff917 	ldw	r2,-28(fp)
 4017544:	10800808 	cmpgei	r2,r2,32
 4017548:	1000291e 	bne	r2,zero,40175f0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401754c:	0005303a 	rdctl	r2,status
 4017550:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017554:	e0fff717 	ldw	r3,-36(fp)
 4017558:	00bfff84 	movi	r2,-2
 401755c:	1884703a 	and	r2,r3,r2
 4017560:	1001703a 	wrctl	status,r2
  
  return context;
 4017564:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4017568:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 401756c:	e0bff917 	ldw	r2,-28(fp)
 4017570:	00c100b4 	movhi	r3,1026
 4017574:	18e45f04 	addi	r3,r3,-28292
 4017578:	100490fa 	slli	r2,r2,3
 401757c:	10c7883a 	add	r3,r2,r3
 4017580:	e0bffd17 	ldw	r2,-12(fp)
 4017584:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 4017588:	e0bff917 	ldw	r2,-28(fp)
 401758c:	00c100b4 	movhi	r3,1026
 4017590:	18e45f04 	addi	r3,r3,-28292
 4017594:	100490fa 	slli	r2,r2,3
 4017598:	10c5883a 	add	r2,r2,r3
 401759c:	10c00104 	addi	r3,r2,4
 40175a0:	e0bffe17 	ldw	r2,-8(fp)
 40175a4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40175a8:	e0bffd17 	ldw	r2,-12(fp)
 40175ac:	1005003a 	cmpeq	r2,r2,zero
 40175b0:	1000051e 	bne	r2,zero,40175c8 <alt_iic_isr_register+0xb8>
 40175b4:	e17ff917 	ldw	r5,-28(fp)
 40175b8:	e13ffb17 	ldw	r4,-20(fp)
 40175bc:	401738c0 	call	401738c <alt_ic_irq_enable>
 40175c0:	e0bfff15 	stw	r2,-4(fp)
 40175c4:	00000406 	br	40175d8 <alt_iic_isr_register+0xc8>
 40175c8:	e17ff917 	ldw	r5,-28(fp)
 40175cc:	e13ffb17 	ldw	r4,-20(fp)
 40175d0:	40174280 	call	4017428 <alt_ic_irq_disable>
 40175d4:	e0bfff15 	stw	r2,-4(fp)
 40175d8:	e0bfff17 	ldw	r2,-4(fp)
 40175dc:	e0bffa15 	stw	r2,-24(fp)
 40175e0:	e0bff817 	ldw	r2,-32(fp)
 40175e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40175e8:	e0bff617 	ldw	r2,-40(fp)
 40175ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40175f0:	e0bffa17 	ldw	r2,-24(fp)
}
 40175f4:	e037883a 	mov	sp,fp
 40175f8:	dfc00117 	ldw	ra,4(sp)
 40175fc:	df000017 	ldw	fp,0(sp)
 4017600:	dec00204 	addi	sp,sp,8
 4017604:	f800283a 	ret

04017608 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4017608:	defff804 	addi	sp,sp,-32
 401760c:	dfc00715 	stw	ra,28(sp)
 4017610:	df000615 	stw	fp,24(sp)
 4017614:	dc000515 	stw	r16,20(sp)
 4017618:	df000504 	addi	fp,sp,20
 401761c:	e13ffc15 	stw	r4,-16(fp)
 4017620:	e17ffd15 	stw	r5,-12(fp)
 4017624:	e1bffe15 	stw	r6,-8(fp)
 4017628:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401762c:	e13ffd17 	ldw	r4,-12(fp)
 4017630:	e17ffe17 	ldw	r5,-8(fp)
 4017634:	e1bfff17 	ldw	r6,-4(fp)
 4017638:	40178500 	call	4017850 <open>
 401763c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4017640:	e0bffb17 	ldw	r2,-20(fp)
 4017644:	1004803a 	cmplt	r2,r2,zero
 4017648:	10001f1e 	bne	r2,zero,40176c8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 401764c:	e13ffb17 	ldw	r4,-20(fp)
 4017650:	040100b4 	movhi	r16,1026
 4017654:	84216c04 	addi	r16,r16,-31312
 4017658:	01400304 	movi	r5,12
 401765c:	4014cf40 	call	4014cf4 <__mulsi3>
 4017660:	1405883a 	add	r2,r2,r16
 4017664:	10c00017 	ldw	r3,0(r2)
 4017668:	e0bffc17 	ldw	r2,-16(fp)
 401766c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4017670:	e13ffb17 	ldw	r4,-20(fp)
 4017674:	040100b4 	movhi	r16,1026
 4017678:	84216c04 	addi	r16,r16,-31312
 401767c:	01400304 	movi	r5,12
 4017680:	4014cf40 	call	4014cf4 <__mulsi3>
 4017684:	1405883a 	add	r2,r2,r16
 4017688:	10800104 	addi	r2,r2,4
 401768c:	10c00017 	ldw	r3,0(r2)
 4017690:	e0bffc17 	ldw	r2,-16(fp)
 4017694:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4017698:	e13ffb17 	ldw	r4,-20(fp)
 401769c:	040100b4 	movhi	r16,1026
 40176a0:	84216c04 	addi	r16,r16,-31312
 40176a4:	01400304 	movi	r5,12
 40176a8:	4014cf40 	call	4014cf4 <__mulsi3>
 40176ac:	1405883a 	add	r2,r2,r16
 40176b0:	10800204 	addi	r2,r2,8
 40176b4:	10c00017 	ldw	r3,0(r2)
 40176b8:	e0bffc17 	ldw	r2,-16(fp)
 40176bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40176c0:	e13ffb17 	ldw	r4,-20(fp)
 40176c4:	4017a3c0 	call	4017a3c <alt_release_fd>
  }
} 
 40176c8:	e037883a 	mov	sp,fp
 40176cc:	dfc00217 	ldw	ra,8(sp)
 40176d0:	df000117 	ldw	fp,4(sp)
 40176d4:	dc000017 	ldw	r16,0(sp)
 40176d8:	dec00304 	addi	sp,sp,12
 40176dc:	f800283a 	ret

040176e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40176e0:	defffb04 	addi	sp,sp,-20
 40176e4:	dfc00415 	stw	ra,16(sp)
 40176e8:	df000315 	stw	fp,12(sp)
 40176ec:	df000304 	addi	fp,sp,12
 40176f0:	e13ffd15 	stw	r4,-12(fp)
 40176f4:	e17ffe15 	stw	r5,-8(fp)
 40176f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40176fc:	010100b4 	movhi	r4,1026
 4017700:	21216f04 	addi	r4,r4,-31300
 4017704:	e17ffd17 	ldw	r5,-12(fp)
 4017708:	01800044 	movi	r6,1
 401770c:	01c07fc4 	movi	r7,511
 4017710:	40176080 	call	4017608 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4017714:	010100b4 	movhi	r4,1026
 4017718:	21216c04 	addi	r4,r4,-31312
 401771c:	e17ffe17 	ldw	r5,-8(fp)
 4017720:	000d883a 	mov	r6,zero
 4017724:	01c07fc4 	movi	r7,511
 4017728:	40176080 	call	4017608 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401772c:	010100b4 	movhi	r4,1026
 4017730:	21217204 	addi	r4,r4,-31288
 4017734:	e17fff17 	ldw	r5,-4(fp)
 4017738:	01800044 	movi	r6,1
 401773c:	01c07fc4 	movi	r7,511
 4017740:	40176080 	call	4017608 <alt_open_fd>
}  
 4017744:	e037883a 	mov	sp,fp
 4017748:	dfc00117 	ldw	ra,4(sp)
 401774c:	df000017 	ldw	fp,0(sp)
 4017750:	dec00204 	addi	sp,sp,8
 4017754:	f800283a 	ret

04017758 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4017758:	defffa04 	addi	sp,sp,-24
 401775c:	dfc00515 	stw	ra,20(sp)
 4017760:	df000415 	stw	fp,16(sp)
 4017764:	dc000315 	stw	r16,12(sp)
 4017768:	df000304 	addi	fp,sp,12
 401776c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4017770:	e0bffe17 	ldw	r2,-8(fp)
 4017774:	10800217 	ldw	r2,8(r2)
 4017778:	10d00034 	orhi	r3,r2,16384
 401777c:	e0bffe17 	ldw	r2,-8(fp)
 4017780:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4017784:	e03ffd15 	stw	zero,-12(fp)
 4017788:	00002306 	br	4017818 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401778c:	e13ffd17 	ldw	r4,-12(fp)
 4017790:	040100b4 	movhi	r16,1026
 4017794:	84216c04 	addi	r16,r16,-31312
 4017798:	01400304 	movi	r5,12
 401779c:	4014cf40 	call	4014cf4 <__mulsi3>
 40177a0:	1405883a 	add	r2,r2,r16
 40177a4:	10c00017 	ldw	r3,0(r2)
 40177a8:	e0bffe17 	ldw	r2,-8(fp)
 40177ac:	10800017 	ldw	r2,0(r2)
 40177b0:	1880161e 	bne	r3,r2,401780c <alt_file_locked+0xb4>
 40177b4:	e13ffd17 	ldw	r4,-12(fp)
 40177b8:	040100b4 	movhi	r16,1026
 40177bc:	84216c04 	addi	r16,r16,-31312
 40177c0:	01400304 	movi	r5,12
 40177c4:	4014cf40 	call	4014cf4 <__mulsi3>
 40177c8:	1405883a 	add	r2,r2,r16
 40177cc:	10800204 	addi	r2,r2,8
 40177d0:	10800017 	ldw	r2,0(r2)
 40177d4:	1004403a 	cmpge	r2,r2,zero
 40177d8:	10000c1e 	bne	r2,zero,401780c <alt_file_locked+0xb4>
 40177dc:	e13ffd17 	ldw	r4,-12(fp)
 40177e0:	01400304 	movi	r5,12
 40177e4:	4014cf40 	call	4014cf4 <__mulsi3>
 40177e8:	1007883a 	mov	r3,r2
 40177ec:	008100b4 	movhi	r2,1026
 40177f0:	10a16c04 	addi	r2,r2,-31312
 40177f4:	1887883a 	add	r3,r3,r2
 40177f8:	e0bffe17 	ldw	r2,-8(fp)
 40177fc:	18800326 	beq	r3,r2,401780c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4017800:	00bffcc4 	movi	r2,-13
 4017804:	e0bfff15 	stw	r2,-4(fp)
 4017808:	00000a06 	br	4017834 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401780c:	e0bffd17 	ldw	r2,-12(fp)
 4017810:	10800044 	addi	r2,r2,1
 4017814:	e0bffd15 	stw	r2,-12(fp)
 4017818:	008100b4 	movhi	r2,1026
 401781c:	10a1d904 	addi	r2,r2,-30876
 4017820:	10800017 	ldw	r2,0(r2)
 4017824:	1007883a 	mov	r3,r2
 4017828:	e0bffd17 	ldw	r2,-12(fp)
 401782c:	18bfd72e 	bgeu	r3,r2,401778c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4017830:	e03fff15 	stw	zero,-4(fp)
 4017834:	e0bfff17 	ldw	r2,-4(fp)
}
 4017838:	e037883a 	mov	sp,fp
 401783c:	dfc00217 	ldw	ra,8(sp)
 4017840:	df000117 	ldw	fp,4(sp)
 4017844:	dc000017 	ldw	r16,0(sp)
 4017848:	dec00304 	addi	sp,sp,12
 401784c:	f800283a 	ret

04017850 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4017850:	defff404 	addi	sp,sp,-48
 4017854:	dfc00b15 	stw	ra,44(sp)
 4017858:	df000a15 	stw	fp,40(sp)
 401785c:	df000a04 	addi	fp,sp,40
 4017860:	e13ffb15 	stw	r4,-20(fp)
 4017864:	e17ffc15 	stw	r5,-16(fp)
 4017868:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401786c:	00bfffc4 	movi	r2,-1
 4017870:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4017874:	00bffb44 	movi	r2,-19
 4017878:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 401787c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4017880:	e13ffb17 	ldw	r4,-20(fp)
 4017884:	014100b4 	movhi	r5,1026
 4017888:	2961d704 	addi	r5,r5,-30884
 401788c:	40172780 	call	4017278 <alt_find_dev>
 4017890:	e0bffa15 	stw	r2,-24(fp)
 4017894:	e0bffa17 	ldw	r2,-24(fp)
 4017898:	1004c03a 	cmpne	r2,r2,zero
 401789c:	1000051e 	bne	r2,zero,40178b4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40178a0:	e13ffb17 	ldw	r4,-20(fp)
 40178a4:	4017b380 	call	4017b38 <alt_find_file>
 40178a8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 40178ac:	00800044 	movi	r2,1
 40178b0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40178b4:	e0bffa17 	ldw	r2,-24(fp)
 40178b8:	1005003a 	cmpeq	r2,r2,zero
 40178bc:	1000311e 	bne	r2,zero,4017984 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40178c0:	e13ffa17 	ldw	r4,-24(fp)
 40178c4:	4017c580 	call	4017c58 <alt_get_fd>
 40178c8:	e0bff815 	stw	r2,-32(fp)
 40178cc:	e0bff817 	ldw	r2,-32(fp)
 40178d0:	1004403a 	cmpge	r2,r2,zero
 40178d4:	1000031e 	bne	r2,zero,40178e4 <open+0x94>
    {
      status = index;
 40178d8:	e0bff817 	ldw	r2,-32(fp)
 40178dc:	e0bff715 	stw	r2,-36(fp)
 40178e0:	00002a06 	br	401798c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 40178e4:	e13ff817 	ldw	r4,-32(fp)
 40178e8:	01400304 	movi	r5,12
 40178ec:	4014cf40 	call	4014cf4 <__mulsi3>
 40178f0:	1007883a 	mov	r3,r2
 40178f4:	008100b4 	movhi	r2,1026
 40178f8:	10a16c04 	addi	r2,r2,-31312
 40178fc:	1885883a 	add	r2,r3,r2
 4017900:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4017904:	e0fffc17 	ldw	r3,-16(fp)
 4017908:	00900034 	movhi	r2,16384
 401790c:	10bfffc4 	addi	r2,r2,-1
 4017910:	1886703a 	and	r3,r3,r2
 4017914:	e0bff917 	ldw	r2,-28(fp)
 4017918:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401791c:	e0bff617 	ldw	r2,-40(fp)
 4017920:	1004c03a 	cmpne	r2,r2,zero
 4017924:	1000061e 	bne	r2,zero,4017940 <open+0xf0>
 4017928:	e13ff917 	ldw	r4,-28(fp)
 401792c:	40177580 	call	4017758 <alt_file_locked>
 4017930:	e0bff715 	stw	r2,-36(fp)
 4017934:	e0bff717 	ldw	r2,-36(fp)
 4017938:	1004803a 	cmplt	r2,r2,zero
 401793c:	1000131e 	bne	r2,zero,401798c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4017940:	e0bffa17 	ldw	r2,-24(fp)
 4017944:	10800317 	ldw	r2,12(r2)
 4017948:	1005003a 	cmpeq	r2,r2,zero
 401794c:	1000091e 	bne	r2,zero,4017974 <open+0x124>
 4017950:	e0bffa17 	ldw	r2,-24(fp)
 4017954:	10800317 	ldw	r2,12(r2)
 4017958:	e13ff917 	ldw	r4,-28(fp)
 401795c:	e17ffb17 	ldw	r5,-20(fp)
 4017960:	e1bffc17 	ldw	r6,-16(fp)
 4017964:	e1fffd17 	ldw	r7,-12(fp)
 4017968:	103ee83a 	callr	r2
 401796c:	e0bfff15 	stw	r2,-4(fp)
 4017970:	00000106 	br	4017978 <open+0x128>
 4017974:	e03fff15 	stw	zero,-4(fp)
 4017978:	e0bfff17 	ldw	r2,-4(fp)
 401797c:	e0bff715 	stw	r2,-36(fp)
 4017980:	00000206 	br	401798c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4017984:	00bffb44 	movi	r2,-19
 4017988:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401798c:	e0bff717 	ldw	r2,-36(fp)
 4017990:	1004403a 	cmpge	r2,r2,zero
 4017994:	1000091e 	bne	r2,zero,40179bc <open+0x16c>
  {
    alt_release_fd (index);  
 4017998:	e13ff817 	ldw	r4,-32(fp)
 401799c:	4017a3c0 	call	4017a3c <alt_release_fd>
    ALT_ERRNO = -status;
 40179a0:	40179dc0 	call	40179dc <alt_get_errno>
 40179a4:	e0fff717 	ldw	r3,-36(fp)
 40179a8:	00c7c83a 	sub	r3,zero,r3
 40179ac:	10c00015 	stw	r3,0(r2)
    return -1;
 40179b0:	00bfffc4 	movi	r2,-1
 40179b4:	e0bffe15 	stw	r2,-8(fp)
 40179b8:	00000206 	br	40179c4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 40179bc:	e0bff817 	ldw	r2,-32(fp)
 40179c0:	e0bffe15 	stw	r2,-8(fp)
 40179c4:	e0bffe17 	ldw	r2,-8(fp)
}
 40179c8:	e037883a 	mov	sp,fp
 40179cc:	dfc00117 	ldw	ra,4(sp)
 40179d0:	df000017 	ldw	fp,0(sp)
 40179d4:	dec00204 	addi	sp,sp,8
 40179d8:	f800283a 	ret

040179dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40179dc:	defffd04 	addi	sp,sp,-12
 40179e0:	dfc00215 	stw	ra,8(sp)
 40179e4:	df000115 	stw	fp,4(sp)
 40179e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40179ec:	008100b4 	movhi	r2,1026
 40179f0:	10a1da04 	addi	r2,r2,-30872
 40179f4:	10800017 	ldw	r2,0(r2)
 40179f8:	1005003a 	cmpeq	r2,r2,zero
 40179fc:	1000061e 	bne	r2,zero,4017a18 <alt_get_errno+0x3c>
 4017a00:	008100b4 	movhi	r2,1026
 4017a04:	10a1da04 	addi	r2,r2,-30872
 4017a08:	10800017 	ldw	r2,0(r2)
 4017a0c:	103ee83a 	callr	r2
 4017a10:	e0bfff15 	stw	r2,-4(fp)
 4017a14:	00000306 	br	4017a24 <alt_get_errno+0x48>
 4017a18:	008100b4 	movhi	r2,1026
 4017a1c:	10a2ae04 	addi	r2,r2,-30024
 4017a20:	e0bfff15 	stw	r2,-4(fp)
 4017a24:	e0bfff17 	ldw	r2,-4(fp)
}
 4017a28:	e037883a 	mov	sp,fp
 4017a2c:	dfc00117 	ldw	ra,4(sp)
 4017a30:	df000017 	ldw	fp,0(sp)
 4017a34:	dec00204 	addi	sp,sp,8
 4017a38:	f800283a 	ret

04017a3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4017a3c:	defffc04 	addi	sp,sp,-16
 4017a40:	dfc00315 	stw	ra,12(sp)
 4017a44:	df000215 	stw	fp,8(sp)
 4017a48:	dc000115 	stw	r16,4(sp)
 4017a4c:	df000104 	addi	fp,sp,4
 4017a50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4017a54:	e0bfff17 	ldw	r2,-4(fp)
 4017a58:	108000d0 	cmplti	r2,r2,3
 4017a5c:	10000f1e 	bne	r2,zero,4017a9c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 4017a60:	e13fff17 	ldw	r4,-4(fp)
 4017a64:	040100b4 	movhi	r16,1026
 4017a68:	84216c04 	addi	r16,r16,-31312
 4017a6c:	01400304 	movi	r5,12
 4017a70:	4014cf40 	call	4014cf4 <__mulsi3>
 4017a74:	1405883a 	add	r2,r2,r16
 4017a78:	10800204 	addi	r2,r2,8
 4017a7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4017a80:	e13fff17 	ldw	r4,-4(fp)
 4017a84:	040100b4 	movhi	r16,1026
 4017a88:	84216c04 	addi	r16,r16,-31312
 4017a8c:	01400304 	movi	r5,12
 4017a90:	4014cf40 	call	4014cf4 <__mulsi3>
 4017a94:	1405883a 	add	r2,r2,r16
 4017a98:	10000015 	stw	zero,0(r2)
  }
}
 4017a9c:	e037883a 	mov	sp,fp
 4017aa0:	dfc00217 	ldw	ra,8(sp)
 4017aa4:	df000117 	ldw	fp,4(sp)
 4017aa8:	dc000017 	ldw	r16,0(sp)
 4017aac:	dec00304 	addi	sp,sp,12
 4017ab0:	f800283a 	ret

04017ab4 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
 4017ab4:	defffc04 	addi	sp,sp,-16
 4017ab8:	dfc00315 	stw	ra,12(sp)
 4017abc:	df000215 	stw	fp,8(sp)
 4017ac0:	df000204 	addi	fp,sp,8
 4017ac4:	e13ffe15 	stw	r4,-8(fp)
 4017ac8:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
 4017acc:	e13ffe17 	ldw	r4,-8(fp)
 4017ad0:	e17fff17 	ldw	r5,-4(fp)
 4017ad4:	4017b140 	call	4017b14 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
 4017ad8:	e0bffe17 	ldw	r2,-8(fp)
 4017adc:	10a00034 	orhi	r2,r2,32768
}
 4017ae0:	e037883a 	mov	sp,fp
 4017ae4:	dfc00117 	ldw	ra,4(sp)
 4017ae8:	df000017 	ldw	fp,0(sp)
 4017aec:	dec00204 	addi	sp,sp,8
 4017af0:	f800283a 	ret

04017af4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4017af4:	deffff04 	addi	sp,sp,-4
 4017af8:	df000015 	stw	fp,0(sp)
 4017afc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4017b00:	000170fa 	wrctl	ienable,zero
}
 4017b04:	e037883a 	mov	sp,fp
 4017b08:	df000017 	ldw	fp,0(sp)
 4017b0c:	dec00104 	addi	sp,sp,4
 4017b10:	f800283a 	ret

04017b14 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4017b14:	defffd04 	addi	sp,sp,-12
 4017b18:	df000215 	stw	fp,8(sp)
 4017b1c:	df000204 	addi	fp,sp,8
 4017b20:	e13ffe15 	stw	r4,-8(fp)
 4017b24:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4017b28:	e037883a 	mov	sp,fp
 4017b2c:	df000017 	ldw	fp,0(sp)
 4017b30:	dec00104 	addi	sp,sp,4
 4017b34:	f800283a 	ret

04017b38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4017b38:	defffa04 	addi	sp,sp,-24
 4017b3c:	dfc00515 	stw	ra,20(sp)
 4017b40:	df000415 	stw	fp,16(sp)
 4017b44:	df000404 	addi	fp,sp,16
 4017b48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4017b4c:	008100b4 	movhi	r2,1026
 4017b50:	10a1d504 	addi	r2,r2,-30892
 4017b54:	10800017 	ldw	r2,0(r2)
 4017b58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4017b5c:	00003306 	br	4017c2c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4017b60:	e0bffd17 	ldw	r2,-12(fp)
 4017b64:	11000217 	ldw	r4,8(r2)
 4017b68:	4014e880 	call	4014e88 <strlen>
 4017b6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4017b70:	e0bffd17 	ldw	r2,-12(fp)
 4017b74:	10c00217 	ldw	r3,8(r2)
 4017b78:	e0bffc17 	ldw	r2,-16(fp)
 4017b7c:	1885883a 	add	r2,r3,r2
 4017b80:	10bfffc4 	addi	r2,r2,-1
 4017b84:	10800003 	ldbu	r2,0(r2)
 4017b88:	10803fcc 	andi	r2,r2,255
 4017b8c:	1080201c 	xori	r2,r2,128
 4017b90:	10bfe004 	addi	r2,r2,-128
 4017b94:	10800bd8 	cmpnei	r2,r2,47
 4017b98:	1000031e 	bne	r2,zero,4017ba8 <alt_find_file+0x70>
    {
      len -= 1;
 4017b9c:	e0bffc17 	ldw	r2,-16(fp)
 4017ba0:	10bfffc4 	addi	r2,r2,-1
 4017ba4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4017ba8:	e0bffc17 	ldw	r2,-16(fp)
 4017bac:	1007883a 	mov	r3,r2
 4017bb0:	e0bffe17 	ldw	r2,-8(fp)
 4017bb4:	1885883a 	add	r2,r3,r2
 4017bb8:	10800003 	ldbu	r2,0(r2)
 4017bbc:	10803fcc 	andi	r2,r2,255
 4017bc0:	1080201c 	xori	r2,r2,128
 4017bc4:	10bfe004 	addi	r2,r2,-128
 4017bc8:	10800be0 	cmpeqi	r2,r2,47
 4017bcc:	10000a1e 	bne	r2,zero,4017bf8 <alt_find_file+0xc0>
 4017bd0:	e0bffc17 	ldw	r2,-16(fp)
 4017bd4:	1007883a 	mov	r3,r2
 4017bd8:	e0bffe17 	ldw	r2,-8(fp)
 4017bdc:	1885883a 	add	r2,r3,r2
 4017be0:	10800003 	ldbu	r2,0(r2)
 4017be4:	10803fcc 	andi	r2,r2,255
 4017be8:	1080201c 	xori	r2,r2,128
 4017bec:	10bfe004 	addi	r2,r2,-128
 4017bf0:	1004c03a 	cmpne	r2,r2,zero
 4017bf4:	10000a1e 	bne	r2,zero,4017c20 <alt_find_file+0xe8>
 4017bf8:	e0bffd17 	ldw	r2,-12(fp)
 4017bfc:	11000217 	ldw	r4,8(r2)
 4017c00:	e1bffc17 	ldw	r6,-16(fp)
 4017c04:	e17ffe17 	ldw	r5,-8(fp)
 4017c08:	4017ec80 	call	4017ec8 <memcmp>
 4017c0c:	1004c03a 	cmpne	r2,r2,zero
 4017c10:	1000031e 	bne	r2,zero,4017c20 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4017c14:	e0bffd17 	ldw	r2,-12(fp)
 4017c18:	e0bfff15 	stw	r2,-4(fp)
 4017c1c:	00000806 	br	4017c40 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4017c20:	e0bffd17 	ldw	r2,-12(fp)
 4017c24:	10800017 	ldw	r2,0(r2)
 4017c28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4017c2c:	00c100b4 	movhi	r3,1026
 4017c30:	18e1d504 	addi	r3,r3,-30892
 4017c34:	e0bffd17 	ldw	r2,-12(fp)
 4017c38:	10ffc91e 	bne	r2,r3,4017b60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4017c3c:	e03fff15 	stw	zero,-4(fp)
 4017c40:	e0bfff17 	ldw	r2,-4(fp)
}
 4017c44:	e037883a 	mov	sp,fp
 4017c48:	dfc00117 	ldw	ra,4(sp)
 4017c4c:	df000017 	ldw	fp,0(sp)
 4017c50:	dec00204 	addi	sp,sp,8
 4017c54:	f800283a 	ret

04017c58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4017c58:	defffa04 	addi	sp,sp,-24
 4017c5c:	dfc00515 	stw	ra,20(sp)
 4017c60:	df000415 	stw	fp,16(sp)
 4017c64:	dc000315 	stw	r16,12(sp)
 4017c68:	df000304 	addi	fp,sp,12
 4017c6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4017c70:	00bffa04 	movi	r2,-24
 4017c74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4017c78:	e03ffe15 	stw	zero,-8(fp)
 4017c7c:	00002006 	br	4017d00 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 4017c80:	e13ffe17 	ldw	r4,-8(fp)
 4017c84:	040100b4 	movhi	r16,1026
 4017c88:	84216c04 	addi	r16,r16,-31312
 4017c8c:	01400304 	movi	r5,12
 4017c90:	4014cf40 	call	4014cf4 <__mulsi3>
 4017c94:	1405883a 	add	r2,r2,r16
 4017c98:	10800017 	ldw	r2,0(r2)
 4017c9c:	1004c03a 	cmpne	r2,r2,zero
 4017ca0:	1000141e 	bne	r2,zero,4017cf4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 4017ca4:	e13ffe17 	ldw	r4,-8(fp)
 4017ca8:	040100b4 	movhi	r16,1026
 4017cac:	84216c04 	addi	r16,r16,-31312
 4017cb0:	01400304 	movi	r5,12
 4017cb4:	4014cf40 	call	4014cf4 <__mulsi3>
 4017cb8:	1407883a 	add	r3,r2,r16
 4017cbc:	e0bfff17 	ldw	r2,-4(fp)
 4017cc0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 4017cc4:	008100b4 	movhi	r2,1026
 4017cc8:	10a1d904 	addi	r2,r2,-30876
 4017ccc:	10c00017 	ldw	r3,0(r2)
 4017cd0:	e0bffe17 	ldw	r2,-8(fp)
 4017cd4:	1880040e 	bge	r3,r2,4017ce8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 4017cd8:	00c100b4 	movhi	r3,1026
 4017cdc:	18e1d904 	addi	r3,r3,-30876
 4017ce0:	e0bffe17 	ldw	r2,-8(fp)
 4017ce4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4017ce8:	e0bffe17 	ldw	r2,-8(fp)
 4017cec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4017cf0:	00000606 	br	4017d0c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4017cf4:	e0bffe17 	ldw	r2,-8(fp)
 4017cf8:	10800044 	addi	r2,r2,1
 4017cfc:	e0bffe15 	stw	r2,-8(fp)
 4017d00:	e0bffe17 	ldw	r2,-8(fp)
 4017d04:	10800810 	cmplti	r2,r2,32
 4017d08:	103fdd1e 	bne	r2,zero,4017c80 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4017d0c:	e0bffd17 	ldw	r2,-12(fp)
}
 4017d10:	e037883a 	mov	sp,fp
 4017d14:	dfc00217 	ldw	ra,8(sp)
 4017d18:	df000117 	ldw	fp,4(sp)
 4017d1c:	dc000017 	ldw	r16,0(sp)
 4017d20:	dec00304 	addi	sp,sp,12
 4017d24:	f800283a 	ret

04017d28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4017d28:	defffb04 	addi	sp,sp,-20
 4017d2c:	df000415 	stw	fp,16(sp)
 4017d30:	df000404 	addi	fp,sp,16
 4017d34:	e13ffe15 	stw	r4,-8(fp)
 4017d38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4017d3c:	e0bfff17 	ldw	r2,-4(fp)
 4017d40:	10820070 	cmpltui	r2,r2,2049
 4017d44:	1000021e 	bne	r2,zero,4017d50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4017d48:	00820004 	movi	r2,2048
 4017d4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4017d50:	e0fffe17 	ldw	r3,-8(fp)
 4017d54:	e0bfff17 	ldw	r2,-4(fp)
 4017d58:	1885883a 	add	r2,r3,r2
 4017d5c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4017d60:	e0bffe17 	ldw	r2,-8(fp)
 4017d64:	e0bffd15 	stw	r2,-12(fp)
 4017d68:	00000506 	br	4017d80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4017d6c:	e0bffd17 	ldw	r2,-12(fp)
 4017d70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4017d74:	e0bffd17 	ldw	r2,-12(fp)
 4017d78:	10800804 	addi	r2,r2,32
 4017d7c:	e0bffd15 	stw	r2,-12(fp)
 4017d80:	e0fffd17 	ldw	r3,-12(fp)
 4017d84:	e0bffc17 	ldw	r2,-16(fp)
 4017d88:	18bff836 	bltu	r3,r2,4017d6c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4017d8c:	e0bffe17 	ldw	r2,-8(fp)
 4017d90:	108007cc 	andi	r2,r2,31
 4017d94:	1005003a 	cmpeq	r2,r2,zero
 4017d98:	1000021e 	bne	r2,zero,4017da4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4017d9c:	e0bffd17 	ldw	r2,-12(fp)
 4017da0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4017da4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4017da8:	e037883a 	mov	sp,fp
 4017dac:	df000017 	ldw	fp,0(sp)
 4017db0:	dec00104 	addi	sp,sp,4
 4017db4:	f800283a 	ret

04017db8 <alt_exception_cause_generated_bad_addr>:
 *
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4017db8:	defffc04 	addi	sp,sp,-16
 4017dbc:	df000315 	stw	fp,12(sp)
 4017dc0:	df000304 	addi	fp,sp,12
 4017dc4:	e13ffd15 	stw	r4,-12(fp)
  switch (cause) {
 4017dc8:	e0bffd17 	ldw	r2,-12(fp)
 4017dcc:	10bffe84 	addi	r2,r2,-6
 4017dd0:	e0bfff15 	stw	r2,-4(fp)
 4017dd4:	e0ffff17 	ldw	r3,-4(fp)
 4017dd8:	18800328 	cmpgeui	r2,r3,12
 4017ddc:	1000271e 	bne	r2,zero,4017e7c <alt_exception_cause_generated_bad_addr+0xc4>
 4017de0:	e13fff17 	ldw	r4,-4(fp)
 4017de4:	e13fff17 	ldw	r4,-4(fp)
 4017de8:	2105883a 	add	r2,r4,r4
 4017dec:	1087883a 	add	r3,r2,r2
 4017df0:	00810074 	movhi	r2,1025
 4017df4:	109f8104 	addi	r2,r2,32260
 4017df8:	1885883a 	add	r2,r3,r2
 4017dfc:	10800017 	ldw	r2,0(r2)
 4017e00:	1000683a 	jmp	r2
 4017e04:	04017e40 	call	4017e4 <__alt_mem_sdram-0x1bfe81c>
 4017e08:	04017e4c 	andi	r16,zero,1529
 4017e0c:	04017e7c 	xorhi	r16,zero,1529
 4017e10:	04017e7c 	xorhi	r16,zero,1529
 4017e14:	04017e7c 	xorhi	r16,zero,1529
 4017e18:	04017e34 	movhi	r16,1528
 4017e1c:	04017e7c 	xorhi	r16,zero,1529
 4017e20:	04017e7c 	xorhi	r16,zero,1529
 4017e24:	04017e58 	cmpnei	r16,zero,1529
 4017e28:	04017e64 	muli	r16,zero,1529
 4017e2c:	04017e7c 	xorhi	r16,zero,1529
 4017e30:	04017e70 	cmpltui	r16,zero,1529
  case NIOS2_EXCEPTION_SUPERVISOR_ONLY_DATA_ADDR:
    return 1;
 4017e34:	00800044 	movi	r2,1
 4017e38:	e0bffe15 	stw	r2,-8(fp)
 4017e3c:	00001006 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  case NIOS2_EXCEPTION_MISALIGNED_DATA_ADDR:
    return 1;
 4017e40:	00c00044 	movi	r3,1
 4017e44:	e0fffe15 	stw	r3,-8(fp)
 4017e48:	00000d06 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
    return 1;
 4017e4c:	01000044 	movi	r4,1
 4017e50:	e13ffe15 	stw	r4,-8(fp)
 4017e54:	00000a06 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
    return 1;
 4017e58:	00800044 	movi	r2,1
 4017e5c:	e0bffe15 	stw	r2,-8(fp)
 4017e60:	00000706 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
    return 1;
 4017e64:	00c00044 	movi	r3,1
 4017e68:	e0fffe15 	stw	r3,-8(fp)
 4017e6c:	00000406 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
    return 1;
 4017e70:	01000044 	movi	r4,1
 4017e74:	e13ffe15 	stw	r4,-8(fp)
 4017e78:	00000106 	br	4017e80 <alt_exception_cause_generated_bad_addr+0xc8>
  default:
    return 0;
 4017e7c:	e03ffe15 	stw	zero,-8(fp)
 4017e80:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4017e84:	e037883a 	mov	sp,fp
 4017e88:	df000017 	ldw	fp,0(sp)
 4017e8c:	dec00104 	addi	sp,sp,4
 4017e90:	f800283a 	ret

04017e94 <atexit>:
 4017e94:	200b883a 	mov	r5,r4
 4017e98:	000d883a 	mov	r6,zero
 4017e9c:	0009883a 	mov	r4,zero
 4017ea0:	000f883a 	mov	r7,zero
 4017ea4:	4017f041 	jmpi	4017f04 <__register_exitproc>

04017ea8 <exit>:
 4017ea8:	defffe04 	addi	sp,sp,-8
 4017eac:	dc400015 	stw	r17,0(sp)
 4017eb0:	000b883a 	mov	r5,zero
 4017eb4:	2023883a 	mov	r17,r4
 4017eb8:	dfc00115 	stw	ra,4(sp)
 4017ebc:	40180740 	call	4018074 <__call_exitprocs>
 4017ec0:	8809883a 	mov	r4,r17
 4017ec4:	40182700 	call	4018270 <_exit>

04017ec8 <memcmp>:
 4017ec8:	31ffffc4 	addi	r7,r6,-1
 4017ecc:	3000061e 	bne	r6,zero,4017ee8 <memcmp+0x20>
 4017ed0:	00000a06 	br	4017efc <memcmp+0x34>
 4017ed4:	39ffffc4 	addi	r7,r7,-1
 4017ed8:	00bfffc4 	movi	r2,-1
 4017edc:	21000044 	addi	r4,r4,1
 4017ee0:	29400044 	addi	r5,r5,1
 4017ee4:	38800526 	beq	r7,r2,4017efc <memcmp+0x34>
 4017ee8:	20c00003 	ldbu	r3,0(r4)
 4017eec:	28800003 	ldbu	r2,0(r5)
 4017ef0:	18bff826 	beq	r3,r2,4017ed4 <memcmp+0xc>
 4017ef4:	1885c83a 	sub	r2,r3,r2
 4017ef8:	f800283a 	ret
 4017efc:	0005883a 	mov	r2,zero
 4017f00:	f800283a 	ret

04017f04 <__register_exitproc>:
 4017f04:	defff904 	addi	sp,sp,-28
 4017f08:	008100b4 	movhi	r2,1026
 4017f0c:	10a1d004 	addi	r2,r2,-30912
 4017f10:	dc400115 	stw	r17,4(sp)
 4017f14:	14400017 	ldw	r17,0(r2)
 4017f18:	dc000015 	stw	r16,0(sp)
 4017f1c:	dd400515 	stw	r21,20(sp)
 4017f20:	8c000c17 	ldw	r16,48(r17)
 4017f24:	dd000415 	stw	r20,16(sp)
 4017f28:	dcc00315 	stw	r19,12(sp)
 4017f2c:	dc800215 	stw	r18,8(sp)
 4017f30:	dfc00615 	stw	ra,24(sp)
 4017f34:	2025883a 	mov	r18,r4
 4017f38:	282b883a 	mov	r21,r5
 4017f3c:	3029883a 	mov	r20,r6
 4017f40:	3827883a 	mov	r19,r7
 4017f44:	80002626 	beq	r16,zero,4017fe0 <__register_exitproc+0xdc>
 4017f48:	81400117 	ldw	r5,4(r16)
 4017f4c:	008007c4 	movi	r2,31
 4017f50:	11403716 	blt	r2,r5,4018030 <__register_exitproc+0x12c>
 4017f54:	90002026 	beq	r18,zero,4017fd8 <__register_exitproc+0xd4>
 4017f58:	81802217 	ldw	r6,136(r16)
 4017f5c:	30002926 	beq	r6,zero,4018004 <__register_exitproc+0x100>
 4017f60:	81400117 	ldw	r5,4(r16)
 4017f64:	00c00044 	movi	r3,1
 4017f68:	31004017 	ldw	r4,256(r6)
 4017f6c:	1946983a 	sll	r3,r3,r5
 4017f70:	2945883a 	add	r2,r5,r5
 4017f74:	1085883a 	add	r2,r2,r2
 4017f78:	1185883a 	add	r2,r2,r6
 4017f7c:	20c8b03a 	or	r4,r4,r3
 4017f80:	14c02015 	stw	r19,128(r2)
 4017f84:	15000015 	stw	r20,0(r2)
 4017f88:	00800084 	movi	r2,2
 4017f8c:	31004015 	stw	r4,256(r6)
 4017f90:	90801826 	beq	r18,r2,4017ff4 <__register_exitproc+0xf0>
 4017f94:	2945883a 	add	r2,r5,r5
 4017f98:	1085883a 	add	r2,r2,r2
 4017f9c:	1405883a 	add	r2,r2,r16
 4017fa0:	28c00044 	addi	r3,r5,1
 4017fa4:	0009883a 	mov	r4,zero
 4017fa8:	15400215 	stw	r21,8(r2)
 4017fac:	80c00115 	stw	r3,4(r16)
 4017fb0:	2005883a 	mov	r2,r4
 4017fb4:	dfc00617 	ldw	ra,24(sp)
 4017fb8:	dd400517 	ldw	r21,20(sp)
 4017fbc:	dd000417 	ldw	r20,16(sp)
 4017fc0:	dcc00317 	ldw	r19,12(sp)
 4017fc4:	dc800217 	ldw	r18,8(sp)
 4017fc8:	dc400117 	ldw	r17,4(sp)
 4017fcc:	dc000017 	ldw	r16,0(sp)
 4017fd0:	dec00704 	addi	sp,sp,28
 4017fd4:	f800283a 	ret
 4017fd8:	81400117 	ldw	r5,4(r16)
 4017fdc:	003fed06 	br	4017f94 <__register_exitproc+0x90>
 4017fe0:	008100b4 	movhi	r2,1026
 4017fe4:	10a49f04 	addi	r2,r2,-28036
 4017fe8:	1021883a 	mov	r16,r2
 4017fec:	88800c15 	stw	r2,48(r17)
 4017ff0:	003fd506 	br	4017f48 <__register_exitproc+0x44>
 4017ff4:	30804117 	ldw	r2,260(r6)
 4017ff8:	10c4b03a 	or	r2,r2,r3
 4017ffc:	30804115 	stw	r2,260(r6)
 4018000:	003fe406 	br	4017f94 <__register_exitproc+0x90>
 4018004:	00800034 	movhi	r2,0
 4018008:	10800004 	addi	r2,r2,0
 401800c:	10000b26 	beq	r2,zero,401803c <__register_exitproc+0x138>
 4018010:	01004204 	movi	r4,264
 4018014:	103ee83a 	callr	r2
 4018018:	10000826 	beq	r2,zero,401803c <__register_exitproc+0x138>
 401801c:	100d883a 	mov	r6,r2
 4018020:	10004015 	stw	zero,256(r2)
 4018024:	10004115 	stw	zero,260(r2)
 4018028:	80802215 	stw	r2,136(r16)
 401802c:	003fcc06 	br	4017f60 <__register_exitproc+0x5c>
 4018030:	00800034 	movhi	r2,0
 4018034:	10800004 	addi	r2,r2,0
 4018038:	1000021e 	bne	r2,zero,4018044 <__register_exitproc+0x140>
 401803c:	013fffc4 	movi	r4,-1
 4018040:	003fdb06 	br	4017fb0 <__register_exitproc+0xac>
 4018044:	01002304 	movi	r4,140
 4018048:	103ee83a 	callr	r2
 401804c:	1007883a 	mov	r3,r2
 4018050:	103ffa26 	beq	r2,zero,401803c <__register_exitproc+0x138>
 4018054:	88800c17 	ldw	r2,48(r17)
 4018058:	1821883a 	mov	r16,r3
 401805c:	18000115 	stw	zero,4(r3)
 4018060:	18800015 	stw	r2,0(r3)
 4018064:	88c00c15 	stw	r3,48(r17)
 4018068:	903fdb26 	beq	r18,zero,4017fd8 <__register_exitproc+0xd4>
 401806c:	003fba06 	br	4017f58 <__register_exitproc+0x54>

04018070 <register_fini>:
 4018070:	f800283a 	ret

04018074 <__call_exitprocs>:
 4018074:	defff304 	addi	sp,sp,-52
 4018078:	008100b4 	movhi	r2,1026
 401807c:	10a1d004 	addi	r2,r2,-30912
 4018080:	df000b15 	stw	fp,44(sp)
 4018084:	17000017 	ldw	fp,0(r2)
 4018088:	00800034 	movhi	r2,0
 401808c:	10800004 	addi	r2,r2,0
 4018090:	1005003a 	cmpeq	r2,r2,zero
 4018094:	d8800215 	stw	r2,8(sp)
 4018098:	e0800c04 	addi	r2,fp,48
 401809c:	dd800915 	stw	r22,36(sp)
 40180a0:	dd400815 	stw	r21,32(sp)
 40180a4:	dfc00c15 	stw	ra,48(sp)
 40180a8:	ddc00a15 	stw	r23,40(sp)
 40180ac:	dd000715 	stw	r20,28(sp)
 40180b0:	dcc00615 	stw	r19,24(sp)
 40180b4:	dc800515 	stw	r18,20(sp)
 40180b8:	dc400415 	stw	r17,16(sp)
 40180bc:	dc000315 	stw	r16,12(sp)
 40180c0:	282d883a 	mov	r22,r5
 40180c4:	d9000115 	stw	r4,4(sp)
 40180c8:	d8800015 	stw	r2,0(sp)
 40180cc:	282b003a 	cmpeq	r21,r5,zero
 40180d0:	e4400c17 	ldw	r17,48(fp)
 40180d4:	88001226 	beq	r17,zero,4018120 <__call_exitprocs+0xac>
 40180d8:	ddc00017 	ldw	r23,0(sp)
 40180dc:	88800117 	ldw	r2,4(r17)
 40180e0:	8c802217 	ldw	r18,136(r17)
 40180e4:	143fffc4 	addi	r16,r2,-1
 40180e8:	80000b16 	blt	r16,zero,4018118 <__call_exitprocs+0xa4>
 40180ec:	9027003a 	cmpeq	r19,r18,zero
 40180f0:	a800171e 	bne	r21,zero,4018150 <__call_exitprocs+0xdc>
 40180f4:	9800051e 	bne	r19,zero,401810c <__call_exitprocs+0x98>
 40180f8:	8409883a 	add	r4,r16,r16
 40180fc:	2105883a 	add	r2,r4,r4
 4018100:	1485883a 	add	r2,r2,r18
 4018104:	10c02017 	ldw	r3,128(r2)
 4018108:	b0c01226 	beq	r22,r3,4018154 <__call_exitprocs+0xe0>
 401810c:	843fffc4 	addi	r16,r16,-1
 4018110:	00bfffc4 	movi	r2,-1
 4018114:	80bff61e 	bne	r16,r2,40180f0 <__call_exitprocs+0x7c>
 4018118:	d8800217 	ldw	r2,8(sp)
 401811c:	10003226 	beq	r2,zero,40181e8 <__call_exitprocs+0x174>
 4018120:	dfc00c17 	ldw	ra,48(sp)
 4018124:	df000b17 	ldw	fp,44(sp)
 4018128:	ddc00a17 	ldw	r23,40(sp)
 401812c:	dd800917 	ldw	r22,36(sp)
 4018130:	dd400817 	ldw	r21,32(sp)
 4018134:	dd000717 	ldw	r20,28(sp)
 4018138:	dcc00617 	ldw	r19,24(sp)
 401813c:	dc800517 	ldw	r18,20(sp)
 4018140:	dc400417 	ldw	r17,16(sp)
 4018144:	dc000317 	ldw	r16,12(sp)
 4018148:	dec00d04 	addi	sp,sp,52
 401814c:	f800283a 	ret
 4018150:	8409883a 	add	r4,r16,r16
 4018154:	88c00117 	ldw	r3,4(r17)
 4018158:	2105883a 	add	r2,r4,r4
 401815c:	1445883a 	add	r2,r2,r17
 4018160:	18ffffc4 	addi	r3,r3,-1
 4018164:	11800217 	ldw	r6,8(r2)
 4018168:	1c001826 	beq	r3,r16,40181cc <__call_exitprocs+0x158>
 401816c:	10000215 	stw	zero,8(r2)
 4018170:	303fe626 	beq	r6,zero,401810c <__call_exitprocs+0x98>
 4018174:	8d000117 	ldw	r20,4(r17)
 4018178:	9800121e 	bne	r19,zero,40181c4 <__call_exitprocs+0x150>
 401817c:	00c00044 	movi	r3,1
 4018180:	1c06983a 	sll	r3,r3,r16
 4018184:	90804017 	ldw	r2,256(r18)
 4018188:	1884703a 	and	r2,r3,r2
 401818c:	10000d26 	beq	r2,zero,40181c4 <__call_exitprocs+0x150>
 4018190:	90804117 	ldw	r2,260(r18)
 4018194:	1884703a 	and	r2,r3,r2
 4018198:	10000e1e 	bne	r2,zero,40181d4 <__call_exitprocs+0x160>
 401819c:	2105883a 	add	r2,r4,r4
 40181a0:	1485883a 	add	r2,r2,r18
 40181a4:	11400017 	ldw	r5,0(r2)
 40181a8:	d9000117 	ldw	r4,4(sp)
 40181ac:	303ee83a 	callr	r6
 40181b0:	88800117 	ldw	r2,4(r17)
 40181b4:	a0bfc61e 	bne	r20,r2,40180d0 <__call_exitprocs+0x5c>
 40181b8:	b8800017 	ldw	r2,0(r23)
 40181bc:	147fd326 	beq	r2,r17,401810c <__call_exitprocs+0x98>
 40181c0:	003fc306 	br	40180d0 <__call_exitprocs+0x5c>
 40181c4:	303ee83a 	callr	r6
 40181c8:	003ff906 	br	40181b0 <__call_exitprocs+0x13c>
 40181cc:	8c000115 	stw	r16,4(r17)
 40181d0:	003fe706 	br	4018170 <__call_exitprocs+0xfc>
 40181d4:	2105883a 	add	r2,r4,r4
 40181d8:	1485883a 	add	r2,r2,r18
 40181dc:	11000017 	ldw	r4,0(r2)
 40181e0:	303ee83a 	callr	r6
 40181e4:	003ff206 	br	40181b0 <__call_exitprocs+0x13c>
 40181e8:	88800117 	ldw	r2,4(r17)
 40181ec:	10000b1e 	bne	r2,zero,401821c <__call_exitprocs+0x1a8>
 40181f0:	89000017 	ldw	r4,0(r17)
 40181f4:	20000a26 	beq	r4,zero,4018220 <__call_exitprocs+0x1ac>
 40181f8:	b9000015 	stw	r4,0(r23)
 40181fc:	90000226 	beq	r18,zero,4018208 <__call_exitprocs+0x194>
 4018200:	9009883a 	mov	r4,r18
 4018204:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 4018208:	8809883a 	mov	r4,r17
 401820c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 4018210:	bc400017 	ldw	r17,0(r23)
 4018214:	883fb11e 	bne	r17,zero,40180dc <__call_exitprocs+0x68>
 4018218:	003fc106 	br	4018120 <__call_exitprocs+0xac>
 401821c:	89000017 	ldw	r4,0(r17)
 4018220:	882f883a 	mov	r23,r17
 4018224:	2023883a 	mov	r17,r4
 4018228:	883fac1e 	bne	r17,zero,40180dc <__call_exitprocs+0x68>
 401822c:	003fbc06 	br	4018120 <__call_exitprocs+0xac>

04018230 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4018230:	defffd04 	addi	sp,sp,-12
 4018234:	df000215 	stw	fp,8(sp)
 4018238:	df000204 	addi	fp,sp,8
 401823c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4018240:	e0bfff17 	ldw	r2,-4(fp)
 4018244:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4018248:	e0bffe17 	ldw	r2,-8(fp)
 401824c:	1005003a 	cmpeq	r2,r2,zero
 4018250:	1000021e 	bne	r2,zero,401825c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4018254:	002af070 	cmpltui	zero,zero,43969
 4018258:	00000106 	br	4018260 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 401825c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4018260:	e037883a 	mov	sp,fp
 4018264:	df000017 	ldw	fp,0(sp)
 4018268:	dec00104 	addi	sp,sp,4
 401826c:	f800283a 	ret

04018270 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4018270:	defffd04 	addi	sp,sp,-12
 4018274:	dfc00215 	stw	ra,8(sp)
 4018278:	df000115 	stw	fp,4(sp)
 401827c:	df000104 	addi	fp,sp,4
 4018280:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4018284:	e13fff17 	ldw	r4,-4(fp)
 4018288:	40182300 	call	4018230 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401828c:	003fff06 	br	401828c <_exit+0x1c>
 4018290:	04018070 	cmpltui	r16,zero,1537
